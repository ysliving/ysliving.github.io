<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>码农印象</title>
    <link>https://ysliving.github.io/</link>
    
    <image>
      <url>https://ysliving.github.io/img/icon.png</url>
      <title>码农印象</title>
      <link>https://ysliving.github.io/</link>
    </image>
    
    <atom:link href="https://ysliving.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>码农印象的博客，致力于分享一些技术教程和有趣的技术实践，包括但不限于 Go 语言/golang, Python, Linux, 分布式等相关的内容。</description>
    <pubDate>Mon, 06 Sep 2021 15:53:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>2020 年终总结</title>
      <link>https://ysliving.github.io/post/2020.html</link>
      <guid>https://ysliving.github.io/post/2020.html</guid>
      <pubDate>Tue, 29 Dec 2020 17:00:00 GMT</pubDate>
      
      <description>从 2020 年开始，在博客里记录每一年的成长与改变。年初的时候，给自己定了两个目标：工作上升一级，博客浏览量能翻一倍。第一个目标没想到刚过完年，就实现了。第二个目标到年底的时候也基本达成了，月 UV 3w，月 PV 8w。在这里，将过程中的一些经历和感悟记录下来。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/2020/2020.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/">年终总结</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E5%85%B3%E4%BA%8E%E6%88%91/">关于我</category>
      
      
      <comments>https://ysliving.github.io/post/2020.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 接口型函数的使用场景</title>
      <link>https://ysliving.github.io/post/7days-golang-q1.html</link>
      <guid>https://ysliving.github.io/post/7days-golang-q1.html</guid>
      <pubDate>Sun, 25 Oct 2020 04:30:00 GMT</pubDate>
      
      <description>Go 语言/golang 中函数式接口或接口型函数的实现与价值，什么是接口型函数，为什么不直接将函数作为参数，而是封装为一个接口。Go 语言标准库 net/http 中是如何使用接口型函数的。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/7days-golang-q1/7days-golang-qa.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/7days-golang-Q-A/">7days-golang Q &amp; A</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/7days-golang-q1.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python 简明教程</title>
      <link>https://ysliving.github.io/post/quick-python.html</link>
      <guid>https://ysliving.github.io/post/quick-python.html</guid>
      <pubDate>Sat, 17 Oct 2020 12:00:00 GMT</pubDate>
      
      <description>一篇文章入门 Python/Python3，Python简明教程，Python入门教程，Python中文教程(Python 3 tutorial)。Python 是一个易于学习、功能强大的编程语言，它拥有高效高级的数据结构和一种简单有效的面向对象编程的编程方法。本文介绍了 Python 的安装、基本类型/内置类型(字符串str，整型，数组，字典 dict 等)、控制流(if, for循环, while 等)、复杂类型(类 class, 方法 method 等)，函数式编程，面向对象编程，错误处理(try except finally)，pip 引入第三方依赖，以及如何写单元测试(unit test)等。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/quick-python/python.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Python-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">Python 简明教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/Python/">Python</category>
      
      
      <comments>https://ysliving.github.io/post/quick-python.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写RPC框架 - GeeRPC第七天 服务发现与注册中心(registry)</title>
      <link>https://ysliving.github.io/post/geerpc-day7.html</link>
      <guid>https://ysliving.github.io/post/geerpc-day7.html</guid>
      <pubDate>Thu, 08 Oct 2020 08:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 RPC 框架 GeeRPC 教程(7 days implement golang remote procedure call framework from scratch tutorial)，动手写 RPC 框架，参照 golang 标准库 net/rpc 的实现，实现了服务端(server)、支持异步和并发的客户端(client)、消息编码与解码(message encoding and decoding)、服务注册(service register)、支持 TCP/Unix/HTTP 等多种传输协议。第七天实现了一个简单的注册中心(registry)，具备超时移除、接收心跳(heartbeat)等能力，并且实现了一个简单的服务发现(server discovery)模块。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geerpc/geerpc.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/RPC%E6%A1%86%E6%9E%B6-GeeRPC/">RPC框架 - GeeRPC</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geerpc-day7.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写RPC框架 - GeeRPC第六天 负载均衡(load balance)</title>
      <link>https://ysliving.github.io/post/geerpc-day6.html</link>
      <guid>https://ysliving.github.io/post/geerpc-day6.html</guid>
      <pubDate>Thu, 08 Oct 2020 06:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 RPC 框架 GeeRPC 教程(7 days implement golang remote procedure call framework from scratch tutorial)，动手写 RPC 框架，参照 golang 标准库 net/rpc 的实现，实现了服务端(server)、支持异步和并发的客户端(client)、消息编码与解码(message encoding and decoding)、服务注册(service register)、支持 TCP/Unix/HTTP 等多种传输协议。第六天实现了2种简单的负载均衡(load balance)算法，随机选择和 Round Robin 轮询调度算法。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geerpc/geerpc.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/RPC%E6%A1%86%E6%9E%B6-GeeRPC/">RPC框架 - GeeRPC</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geerpc-day6.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写RPC框架 - GeeRPC第五天 支持HTTP协议</title>
      <link>https://ysliving.github.io/post/geerpc-day5.html</link>
      <guid>https://ysliving.github.io/post/geerpc-day5.html</guid>
      <pubDate>Thu, 08 Oct 2020 03:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 RPC 框架 GeeRPC 教程(7 days implement golang remote procedure call framework from scratch tutorial)，动手写 RPC 框架，参照 golang 标准库 net/rpc 的实现，实现了服务端(server)、支持异步和并发的客户端(client)、消息编码与解码(message encoding and decoding)、服务注册(service register)、支持 TCP/Unix/HTTP 等多种传输协议。第五天支持了 HTTP 协议，并且提供了一个简单的 DEBUG 页面。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geerpc/geerpc.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/RPC%E6%A1%86%E6%9E%B6-GeeRPC/">RPC框架 - GeeRPC</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geerpc-day5.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写RPC框架 - GeeRPC第四天 超时处理(timeout)</title>
      <link>https://ysliving.github.io/post/geerpc-day4.html</link>
      <guid>https://ysliving.github.io/post/geerpc-day4.html</guid>
      <pubDate>Wed, 07 Oct 2020 15:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 RPC 框架 GeeRPC 教程(7 days implement golang remote procedure call framework from scratch tutorial)，动手写 RPC 框架，参照 golang 标准库 net/rpc 的实现，实现了服务端(server)、支持异步和并发的客户端(client)、消息编码与解码(message encoding and decoding)、服务注册(service register)、支持 TCP/Unix/HTTP 等多种传输协议。第四天为RPC框架提供了处理超时的能力(timeout processing)。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geerpc/geerpc.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/RPC%E6%A1%86%E6%9E%B6-GeeRPC/">RPC框架 - GeeRPC</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geerpc-day4.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写RPC框架 - GeeRPC第三天 服务注册(service register)</title>
      <link>https://ysliving.github.io/post/geerpc-day3.html</link>
      <guid>https://ysliving.github.io/post/geerpc-day3.html</guid>
      <pubDate>Wed, 07 Oct 2020 11:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 RPC 框架 GeeRPC 教程(7 days implement golang remote procedure call framework from scratch tutorial)，动手写 RPC 框架，参照 golang 标准库 net/rpc 的实现，实现了服务端(server)、支持异步和并发的客户端(client)、消息编码与解码(message encoding and decoding)、服务注册(service register)、支持 TCP/Unix/HTTP 等多种传输协议。第三天实现了服务注册，即将 Go 语言结构体通过反射映射为服务。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geerpc/geerpc.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/RPC%E6%A1%86%E6%9E%B6-GeeRPC/">RPC框架 - GeeRPC</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geerpc-day3.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写RPC框架 - GeeRPC第二天 支持并发与异步的客户端</title>
      <link>https://ysliving.github.io/post/geerpc-day2.html</link>
      <guid>https://ysliving.github.io/post/geerpc-day2.html</guid>
      <pubDate>Wed, 07 Oct 2020 10:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 RPC 框架 GeeRPC 教程(7 days implement golang remote procedure call framework from scratch tutorial)，动手写 RPC 框架，参照 golang 标准库 net/rpc 的实现，实现了服务端(server)、支持异步和并发的客户端(client)、消息编码与解码(message encoding and decoding)、服务注册(service register)、支持 TCP/Unix/HTTP 等多种传输协议。第二天实现了一个支持异步(asynchronous)和并发(concurrent)的客户端。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geerpc/geerpc.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/RPC%E6%A1%86%E6%9E%B6-GeeRPC/">RPC框架 - GeeRPC</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geerpc-day2.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写RPC框架 - GeeRPC第一天 服务端与消息编码</title>
      <link>https://ysliving.github.io/post/geerpc-day1.html</link>
      <guid>https://ysliving.github.io/post/geerpc-day1.html</guid>
      <pubDate>Tue, 06 Oct 2020 09:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 RPC 框架 GeeRPC 教程(7 days implement golang remote procedure call framework from scratch tutorial)，动手写 RPC 框架，参照 golang 标准库 net/rpc 的实现，实现了服务端(server)、支持异步和并发的客户端(client)、消息编码与解码(message encoding and decoding)、服务注册(service register)、支持 TCP/Unix/HTTP 等多种传输协议。第一天实现了一个简单的服务端和消息的编码与解码。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geerpc/geerpc.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/RPC%E6%A1%86%E6%9E%B6-GeeRPC/">RPC框架 - GeeRPC</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geerpc-day1.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>7天用Go从零实现RPC框架GeeRPC</title>
      <link>https://ysliving.github.io/post/geerpc.html</link>
      <guid>https://ysliving.github.io/post/geerpc.html</guid>
      <pubDate>Tue, 06 Oct 2020 08:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 RPC 框架 GeeRPC 教程(7 days implement golang remote procedure call framework from scratch tutorial)，动手写 RPC 框架，参照 golang 标准库 net/rpc 的实现，实现了服务端(server)、支持异步和并发的客户端(client)、消息编码与解码(message encoding and decoding)、服务注册(service register)、支持 TCP/Unix/HTTP 等多种传输协议。并在此基础上新增了协议交换(protocol exchange)、注册中心(registry)、服务发现(service discovery)、负载均衡(load balance)、超时处理(timeout processing)等特性。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geerpc/geerpc.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/RPC%E6%A1%86%E6%9E%B6-GeeRPC/">RPC框架 - GeeRPC</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geerpc.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go Context 并发编程简明教程</title>
      <link>https://ysliving.github.io/post/quick-go-context.html</link>
      <guid>https://ysliving.github.io/post/quick-go-context.html</guid>
      <pubDate>Mon, 20 Apr 2020 15:30:00 GMT</pubDate>
      
      <description>WaitGroup 和信道(channel)是常见的 2 种并发控制的方式。但是对于复杂的并发场景，Context 上下文是更优雅的控制方式。Context 提供了 WithCancel(取消)、WithValue(传值)、WithTimeout(超时机制)、WithDeadline(截止时间)等4种并发控制的方式。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/quick-go-context/context_sm.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Go-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">Go 简明教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/quick-go-context.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go Mmap 文件内存映射简明教程</title>
      <link>https://ysliving.github.io/post/quick-go-mmap.html</link>
      <guid>https://ysliving.github.io/post/quick-go-mmap.html</guid>
      <pubDate>Mon, 20 Apr 2020 14:30:00 GMT</pubDate>
      
      <description>简单理解，mmap 是一种将文件/设备映射到内存的方法，实现文件的磁盘地址和进程虚拟地址空间中的一段虚拟地址的一一映射关系。也就是说，可以在某个进程中通过操作这一段映射的内存，实现对文件的读写等操作。修改了这一段内存的内容，文件对应位置的内容也会同步修改，而读取这一段内存的内容，相当于读取文件对应位置的内容。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/quick-go-mmap/mmap_sm.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Go-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">Go 简明教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/quick-go-mmap.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写ORM框架 - GeeORM第七天 数据库迁移(Migrate)</title>
      <link>https://ysliving.github.io/post/geeorm-day7.html</link>
      <guid>https://ysliving.github.io/post/geeorm-day7.html</guid>
      <pubDate>Sun, 08 Mar 2020 15:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 ORM 框架 GeeORM 教程(7 days implement golang object relational mapping framework from scratch tutorial)，动手写 ORM 框架，参照 gorm, xorm 的实现。结构体(struct)变更时，数据库表的字段(field)自动迁移(migrate)；仅支持字段新增与删除，不支持字段类型变更。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geeorm/geeorm_sm.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/ORM%E6%A1%86%E6%9E%B6-GeeORM/">ORM框架 - GeeORM</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geeorm-day7.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写ORM框架 - GeeORM第六天 支持事务(Transaction)</title>
      <link>https://ysliving.github.io/post/geeorm-day6.html</link>
      <guid>https://ysliving.github.io/post/geeorm-day6.html</guid>
      <pubDate>Sun, 08 Mar 2020 13:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 ORM 框架 GeeORM 教程(7 days implement golang object relational mapping framework from scratch tutorial)，动手写 ORM 框架，参照 gorm, xorm 的实现。介绍数据库中的事务(transaction)；封装事务，用户自定义回调函数实现原子操作。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geeorm/geeorm_sm.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/ORM%E6%A1%86%E6%9E%B6-GeeORM/">ORM框架 - GeeORM</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geeorm-day6.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写ORM框架 - GeeORM第五天 实现钩子(Hooks)</title>
      <link>https://ysliving.github.io/post/geeorm-day5.html</link>
      <guid>https://ysliving.github.io/post/geeorm-day5.html</guid>
      <pubDate>Sun, 08 Mar 2020 10:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 ORM 框架 GeeORM 教程(7 days implement golang object relational mapping framework from scratch tutorial)，动手写 ORM 框架，参照 gorm, xorm 的实现。通过反射(reflect)获取结构体绑定的钩子(hooks)，并调用；支持增删查改(CRUD)前后调用钩子。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geeorm/geeorm_sm.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/ORM%E6%A1%86%E6%9E%B6-GeeORM/">ORM框架 - GeeORM</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geeorm-day5.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写ORM框架 - GeeORM第四天 链式操作与更新删除</title>
      <link>https://ysliving.github.io/post/geeorm-day4.html</link>
      <guid>https://ysliving.github.io/post/geeorm-day4.html</guid>
      <pubDate>Sun, 08 Mar 2020 08:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 ORM 框架 GeeORM 教程(7 days implement golang object relational mapping framework from scratch tutorial)，动手写 ORM 框架，参照 gorm, xorm 的实现。通过链式(chain)操作，支持查询条件(where, order by, limit 等)的叠加；实现记录的更新(update)、删除(delete)和统计(count)功能。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geeorm/geeorm_sm.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/ORM%E6%A1%86%E6%9E%B6-GeeORM/">ORM框架 - GeeORM</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geeorm-day4.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写ORM框架 - GeeORM第三天 记录新增和查询</title>
      <link>https://ysliving.github.io/post/geeorm-day3.html</link>
      <guid>https://ysliving.github.io/post/geeorm-day3.html</guid>
      <pubDate>Sat, 07 Mar 2020 17:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 ORM 框架 GeeORM 教程(7 days implement golang object relational mapping framework from scratch tutorial)，动手写 ORM 框架，参照 gorm, xorm 的实现。实现新增(insert)记录的功能；使用反射(reflect)将数据库的记录转换为对应的结构体实例，实现查询(select)功能。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geeorm/geeorm_sm.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/ORM%E6%A1%86%E6%9E%B6-GeeORM/">ORM框架 - GeeORM</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geeorm-day3.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写ORM框架 - GeeORM第二天 对象表结构映射</title>
      <link>https://ysliving.github.io/post/geeorm-day2.html</link>
      <guid>https://ysliving.github.io/post/geeorm-day2.html</guid>
      <pubDate>Sat, 07 Mar 2020 16:20:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 ORM 框架 GeeORM 教程(7 days implement golang object relational mapping framework from scratch tutorial)，动手写 ORM 框架，参照 gorm, xorm 的实现。使用反射(reflect)获取任意 struct 对象的名称和字段，映射为数据中的表；使用 dialect 隔离不同数据库之间的差异，便于扩展；数据库表的创建(create)、删除(drop)。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geeorm/geeorm_sm.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/ORM%E6%A1%86%E6%9E%B6-GeeORM/">ORM框架 - GeeORM</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geeorm-day2.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写ORM框架 - GeeORM第一天 database/sql 基础</title>
      <link>https://ysliving.github.io/post/geeorm-day1.html</link>
      <guid>https://ysliving.github.io/post/geeorm-day1.html</guid>
      <pubDate>Sat, 07 Mar 2020 15:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 ORM 框架 GeeORM 教程(7 days implement golang object relational mapping framework from scratch tutorial)，动手写 ORM 框架，参照 gorm, xorm 的实现。介绍了 SQLite 的基础操作（连接数据库，创建表、增删记录等），使用 Go 标准库 database/sql 操作 SQLite 数据库，包括执行(Exec)，查询(Query, QueryRow)。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geeorm/geeorm_sm.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/ORM%E6%A1%86%E6%9E%B6-GeeORM/">ORM框架 - GeeORM</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geeorm-day1.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SQLite 常用命令</title>
      <link>https://ysliving.github.io/post/cheat-sheet-sqlite.html</link>
      <guid>https://ysliving.github.io/post/cheat-sheet-sqlite.html</guid>
      <pubDate>Mon, 02 Mar 2020 15:51:24 GMT</pubDate>
      
      <description>SQLite 常见的使用命令。包括数据库的安装与连接，表(table)的创建(create)与删除(delete)，记录的插入(insert)删除(delete)查询(select)改(update)，以及事务(transaction)等操作。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/cheat-sheet-sqlite/sqlite.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/SQLite-%E9%80%9F%E6%9F%A5%E8%A1%A8/">SQLite 速查表</category>
      
      
      <category domain="https://ysliving.github.io/tags/Cheat-Sheet/">Cheat Sheet</category>
      
      
      <comments>https://ysliving.github.io/post/cheat-sheet-sqlite.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>7天用Go从零实现ORM框架GeeORM</title>
      <link>https://ysliving.github.io/post/geeorm.html</link>
      <guid>https://ysliving.github.io/post/geeorm.html</guid>
      <pubDate>Sat, 29 Feb 2020 17:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现 ORM 框架 GeeORM 教程(7 days implement golang object relational mapping framework from scratch tutorial)，动手写 ORM 框架，参照 gorm, xorm 的实现。功能包括对象和表结构的相互映射，表的创建删除(table)，记录的增删查改，事务支持(transaction)，数据库迁移(migrate)，钩子(hooks)等。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geeorm/geeorm_sm.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/ORM%E6%A1%86%E6%9E%B6-GeeORM/">ORM框架 - GeeORM</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geeorm.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写分布式缓存 - GeeCache第七天 使用 Protobuf 通信</title>
      <link>https://ysliving.github.io/post/geecache-day7.html</link>
      <guid>https://ysliving.github.io/post/geecache-day7.html</guid>
      <pubDate>Sun, 16 Feb 2020 16:30:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现分布式缓存 GeeCache 教程(7 days implement golang distributed cache from scratch tutorial)，动手写分布式缓存，参照 groupcache 的实现。本文介绍了使用 protobuf(protocol buffer) 进行节点间通信，编码报文，提高效率</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geecache-day7/protobuf_logo.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-GeeCache/">分布式缓存 - GeeCache</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geecache-day7.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写分布式缓存 - GeeCache第六天 防止缓存击穿</title>
      <link>https://ysliving.github.io/post/geecache-day6.html</link>
      <guid>https://ysliving.github.io/post/geecache-day6.html</guid>
      <pubDate>Sun, 16 Feb 2020 15:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现分布式缓存 GeeCache 教程(7 days implement golang distributed cache from scratch tutorial)，动手写分布式缓存，参照 groupcache 的实现。本文介绍了缓存雪崩、缓存击穿与缓存穿透的概念，使用 singleflight 防止缓存击穿，实现与测试。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geecache-day6/singleflight_logo.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-GeeCache/">分布式缓存 - GeeCache</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geecache-day6.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写分布式缓存 - GeeCache第五天 分布式节点</title>
      <link>https://ysliving.github.io/post/geecache-day5.html</link>
      <guid>https://ysliving.github.io/post/geecache-day5.html</guid>
      <pubDate>Sun, 16 Feb 2020 13:30:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现分布式缓存 GeeCache 教程(7 days implement golang distributed cache from scratch tutorial)，动手写分布式缓存，参照 groupcache 的实现。本文介绍了为 GeeCache 添加了注册节点与选择节点的功能，并实现了 HTTP 客户端，与远程节点的服务端通信。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geecache-day5/dist_nodes_logo.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-GeeCache/">分布式缓存 - GeeCache</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geecache-day5.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写分布式缓存 - GeeCache第四天 一致性哈希(hash)</title>
      <link>https://ysliving.github.io/post/geecache-day4.html</link>
      <guid>https://ysliving.github.io/post/geecache-day4.html</guid>
      <pubDate>Sun, 16 Feb 2020 12:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现分布式缓存 GeeCache 教程(7 days implement golang distributed cache from scratch tutorial)，动手写分布式缓存，参照 groupcache 的实现。本文介绍了一致性哈希(consistent hashing)的原理、实现以及相关测试用例，一致性哈希为什么能避免缓存雪崩，虚拟节点为什么能解决数据倾斜的问题。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geecache-day4/hash_logo.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-GeeCache/">分布式缓存 - GeeCache</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geecache-day4.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go Mock (gomock)简明教程</title>
      <link>https://ysliving.github.io/post/quick-gomock.html</link>
      <guid>https://ysliving.github.io/post/quick-gomock.html</guid>
      <pubDate>Fri, 14 Feb 2020 15:30:10 GMT</pubDate>
      
      <description>gomock 是Go语言/golang 官方提供的mock库，用于在单元测试(unit tests) 中模拟一些依赖复杂，难以直接调用的场景，比如网络请求、数据库依赖和文件I/O等。本文介绍了 gomock 的使用方法，包括模拟参数(Any, Nil, Not, Eq)和返回值(Do, Return, DoAndReturn)，以及调用次数(Times) 和顺序(InOrder)，如何写可测试可mock的代码。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/quick-gomock/gomock_logo.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Go-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">Go 简明教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/quick-gomock.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写分布式缓存 - GeeCache第三天 HTTP 服务端</title>
      <link>https://ysliving.github.io/post/geecache-day3.html</link>
      <guid>https://ysliving.github.io/post/geecache-day3.html</guid>
      <pubDate>Wed, 12 Feb 2020 15:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现分布式缓存 GeeCache 教程(7 days implement golang distributed cache from scratch tutorial)，动手写分布式缓存，参照 groupcache 的实现。本文介绍了如何使用标准库 http 搭建 HTTP Server，为 GeeCache 单机节点搭建 HTTP 服务，并进行相关的测试。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geecache-day3/http_logo.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-GeeCache/">分布式缓存 - GeeCache</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geecache-day3.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写分布式缓存 - GeeCache第二天 单机并发缓存</title>
      <link>https://ysliving.github.io/post/geecache-day2.html</link>
      <guid>https://ysliving.github.io/post/geecache-day2.html</guid>
      <pubDate>Wed, 12 Feb 2020 14:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现分布式缓存 GeeCache 教程(7 days implement golang distributed cache from scratch tutorial)，动手写分布式缓存，参照 groupcache 的实现。本文介绍了 sync.Mutex 互斥锁的使用，并发控制 LRU 缓存。实现 GeeCache 核心数据结构 Group，缓存不存在时，调用回调函数(callback)获取源数据。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geecache-day2/concurrent_cache_logo.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-GeeCache/">分布式缓存 - GeeCache</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geecache-day2.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>动手写分布式缓存 - GeeCache第一天 LRU 缓存淘汰策略</title>
      <link>https://ysliving.github.io/post/geecache-day1.html</link>
      <guid>https://ysliving.github.io/post/geecache-day1.html</guid>
      <pubDate>Tue, 11 Feb 2020 14:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现分布式缓存 GeeCache 教程(7 days implement golang distributed cache from scratch tutorial)，动手写分布式缓存，参照 groupcache 的实现。本文介绍了常用的三种缓存淘汰(失效)算法：先进先出(FIFO)，最少使用(LFU) 和 最近最少使用(LRU)，并实现 LRU 算法和相应的测试代码。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geecache-day1/lru_logo.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-GeeCache/">分布式缓存 - GeeCache</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geecache-day1.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go Test 单元测试简明教程</title>
      <link>https://ysliving.github.io/post/quick-go-test.html</link>
      <guid>https://ysliving.github.io/post/quick-go-test.html</guid>
      <pubDate>Mon, 10 Feb 2020 15:00:00 GMT</pubDate>
      
      <description>本文介绍了Go语言(golang) 如何写单元测试(unit tests)，详细介绍了标准库 testing 的使用。包括子测试(subtests)，帮助函数(helpers)，setup 和 teardown 机制，网络测试(Network, http) 和基准测试(benchmark)</description>
      
      
      <enclosure url="https://ysliving.github.io/post/quick-go-test/go_test.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Go-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">Go 简明教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/quick-go-test.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>7天用Go从零实现分布式缓存GeeCache</title>
      <link>https://ysliving.github.io/post/geecache.html</link>
      <guid>https://ysliving.github.io/post/geecache.html</guid>
      <pubDate>Fri, 07 Feb 2020 17:00:00 GMT</pubDate>
      
      <description>7天用 Go语言/golang 从零实现分布式缓存 GeeCache 教程(7 days implement golang distributed cache from scratch tutorial)，动手写分布式缓存，参照 groupcache 的实现。功能包括单机/分布式缓存，LRU (Least Recently Used) 缓存策略，防止缓存击穿、一致性哈希(Consistent Hash)，protobuf 通信等。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/geecache/geecache_sm.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98-GeeCache/">分布式缓存 - GeeCache</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/geecache.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go WebAssembly (Wasm) 简明教程</title>
      <link>https://ysliving.github.io/post/quick-go-wasm.html</link>
      <guid>https://ysliving.github.io/post/quick-go-wasm.html</guid>
      <pubDate>Thu, 23 Jan 2020 15:25:00 GMT</pubDate>
      
      <description>本文介绍了如何使用Go 语言(golang)、WebAssembly 和 gopherjs 进行前端开发。包括注册函数，并与浏览器 JavaScript 对象交互，操作 DOM 元素，异步编程与回调函数等。最后介绍了一些进阶的 Demo（游戏，渲染等方面）和相关的项目和文档。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/quick-go-wasm/go-wasm.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Go-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">Go 简明教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/quick-go-wasm.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go RPC &amp; TLS 鉴权简明教程</title>
      <link>https://ysliving.github.io/post/quick-go-rpc.html</link>
      <guid>https://ysliving.github.io/post/quick-go-rpc.html</guid>
      <pubDate>Mon, 13 Jan 2020 15:47:00 GMT</pubDate>
      
      <description>本文介绍了 Go 语言（Golang）中远程过程调用(Remote Procedure Call, RPC)的使用方式，使用 Golang 标准库 net/rpc，同时介绍了异步调用，以及如何使用 TLS/SSL/HTTPS 实现服务器端和客户端的单向鉴权、双向鉴权。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/quick-go-rpc/go-rpc.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Go-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">Go 简明教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/quick-go-rpc.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go Protobuf 简明教程</title>
      <link>https://ysliving.github.io/post/quick-go-protobuf.html</link>
      <guid>https://ysliving.github.io/post/quick-go-protobuf.html</guid>
      <pubDate>Fri, 10 Jan 2020 16:27:00 GMT</pubDate>
      
      <description>protobuf 即 Protocol Buffers，是一种轻便高效的结构化数据存储格式，与语言、平台无关，可扩展可序列化。protobuf 性能和效率大幅度优于 JSON、XML 等其他的结构化数据格式。protobuf 是以二进制方式存储的，占用空间小，但也带来了可读性差的缺点。protobuf 在通信协议和数据存储等领域应用广泛。本文介绍的是 Protocol Buffers 3 (protobuf3, proto3) 的安装和基本语法，以及如何在 Go 语言使用。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/quick-go-protobuf/protocol-buffers.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Go-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">Go 简明教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/quick-go-protobuf.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go语言动手写Web框架 - Gee第七天 错误恢复(Panic Recover)</title>
      <link>https://ysliving.github.io/post/gee-day7.html</link>
      <guid>https://ysliving.github.io/post/gee-day7.html</guid>
      <pubDate>Wed, 08 Jan 2020 17:00:00 GMT</pubDate>
      
      <description>7天用 Go语言 从零实现Web框架教程(7 days implement golang web framework from scratch tutorial)，用 Go语言/golang 动手写Web框架，从零实现一个Web框架，以 Gin 为原型从零设计一个Web框架。本文介绍了如何为Web框架增加错误处理机制。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/gee-day7/go-panic.png" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Web%E6%A1%86%E6%9E%B6-Gee/">Web框架 - Gee</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/gee-day7.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WSL, Git, Mircosoft Terminal 等常用工具配置</title>
      <link>https://ysliving.github.io/post/awesome-config.html</link>
      <guid>https://ysliving.github.io/post/awesome-config.html</guid>
      <pubDate>Mon, 02 Dec 2019 16:30:00 GMT</pubDate>
      
      <description>记录开发过程中一些工具的常用配置，加速在新环境上的准备效率。工具包括不限于微软 Linux 子系统 Ubuntu (WSL, WSL2), Git, 微软最新发布的命令行神器( Mircosoft Terminal )等。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/awesome-config/wsl.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%B7%A5%E5%85%B7/">工具</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E7%99%BE%E5%AE%9D%E7%AE%B1/">百宝箱</category>
      
      
      <comments>https://ysliving.github.io/post/awesome-config.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Rust 简明教程</title>
      <link>https://ysliving.github.io/post/quick-rust.html</link>
      <guid>https://ysliving.github.io/post/quick-rust.html</guid>
      <pubDate>Sun, 24 Nov 2019 15:59:10 GMT</pubDate>
      
      <description>Rust简明教程，Rust入门教程，Rust 是一门系统编程语言(Systems Programming Language)，兼顾安全(Safety)、性能(Speed)和并发(Concurrency)。包括 Rust 和 Cargo 安装、基本类型(字符串str，整形等)、控制流(if, if let, while let, loop, for循环等)、复杂类型(struct, enum等)，以及错误处理(panic, Result)，Cargo 项目的代码结构，如何测试 Rust 代码等。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/quick-rust/rust.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Rust-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">Rust 简明教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/Rust/">Rust</category>
      
      
      <comments>https://ysliving.github.io/post/quick-rust.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go语言动手写Web框架 - Gee第六天 模板(HTML Template)</title>
      <link>https://ysliving.github.io/post/gee-day6.html</link>
      <guid>https://ysliving.github.io/post/gee-day6.html</guid>
      <pubDate>Sun, 08 Sep 2019 12:10:00 GMT</pubDate>
      
      <description>7天用 Go语言 从零实现Web框架教程(7 days implement golang web framework from scratch tutorial)，用 Go语言/golang 动手写Web框架，从零实现一个Web框架，以 Gin 为原型从零设计一个Web框架。本文介绍了如何为Web框架添加HTML模板(HTML Template)以及静态文件(Serve Static Files)的功能。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/gee-day6/html.png" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Web%E6%A1%86%E6%9E%B6-Gee/">Web框架 - Gee</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/gee-day6.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>百宝箱 - 值得收藏的工具网站</title>
      <link>https://ysliving.github.io/post/box-tools.html</link>
      <guid>https://ysliving.github.io/post/box-tools.html</guid>
      <pubDate>Sun, 01 Sep 2019 17:00:10 GMT</pubDate>
      
      <description>极客兔兔的百宝箱，都是些珍藏多年的宝贝。包括编程常用的网站，例如在线正则表达式；前端设计常用的网站，例如色彩搭配等。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/box-tools/colorhunt.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%B7%A5%E5%85%B7/">工具</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E7%99%BE%E5%AE%9D%E7%AE%B1/">百宝箱</category>
      
      
      <comments>https://ysliving.github.io/post/box-tools.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go语言动手写Web框架 - Gee第五天 中间件Middleware</title>
      <link>https://ysliving.github.io/post/gee-day5.html</link>
      <guid>https://ysliving.github.io/post/gee-day5.html</guid>
      <pubDate>Sun, 01 Sep 2019 12:10:10 GMT</pubDate>
      
      <description>7天用 Go语言 从零实现Web框架教程(7 days implement golang web framework from scratch tutorial)，用 Go语言/golang 动手写Web框架，从零实现一个Web框架，以 Gin 为原型从零设计一个Web框架。本文介绍了如何为Web框架添加中间件的功能(middlewares)。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/gee-day5/middleware.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Web%E6%A1%86%E6%9E%B6-Gee/">Web框架 - Gee</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/gee-day5.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go语言动手写Web框架 - Gee第四天 分组控制Group</title>
      <link>https://ysliving.github.io/post/gee-day4.html</link>
      <guid>https://ysliving.github.io/post/gee-day4.html</guid>
      <pubDate>Sun, 01 Sep 2019 07:10:10 GMT</pubDate>
      
      <description>7天用 Go语言 从零实现Web框架教程(7 days implement golang web framework from scratch tutorial)，用 Go语言/golang 动手写Web框架，从零实现一个Web框架，以 Gin 为原型从零设计一个Web框架。本文介绍了分组控制(Group Control)的意义，以及嵌套分组路由的实现。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/gee-day4/group.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Web%E6%A1%86%E6%9E%B6-Gee/">Web框架 - Gee</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/gee-day4.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go语言动手写Web框架 - Gee第三天 前缀树路由Router</title>
      <link>https://ysliving.github.io/post/gee-day3.html</link>
      <guid>https://ysliving.github.io/post/gee-day3.html</guid>
      <pubDate>Tue, 27 Aug 2019 16:10:10 GMT</pubDate>
      
      <description>7天用 Go语言 从零实现Web框架教程(7 days implement golang web framework from scratch tutorial)，用 Go语言/golang 动手写Web框架，从零实现一个Web框架，以 Gin 为原型从零设计一个Web框架。本文介绍了如何用 Trie 前缀树实现路由 Route。支持简单的参数解析和通配符的场景。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/gee-day3/trie_router.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Web%E6%A1%86%E6%9E%B6-Gee/">Web框架 - Gee</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/gee-day3.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>博客折腾记(七) - Gitalk Plus</title>
      <link>https://ysliving.github.io/post/blog-experience-7.html</link>
      <guid>https://ysliving.github.io/post/blog-experience-7.html</guid>
      <pubDate>Fri, 23 Aug 2019 12:00:00 GMT</pubDate>
      
      <description>极客兔兔(Geektutu)的博客折腾记的第七篇，模仿disqus的 SEE ALSO ON &lt;blog&gt; 功能，为静态博客添加“显示本站其他文章评论”的功能，完善内链。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/blog-experience-7/comment.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%BB%BA%E7%AB%99%E7%BB%8F%E5%8E%86/">建站经历</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E5%85%B3%E4%BA%8E%E6%88%91/">关于我</category>
      
      
      <comments>https://ysliving.github.io/post/blog-experience-7.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go语言动手写Web框架 - Gee第二天 上下文Context</title>
      <link>https://ysliving.github.io/post/gee-day2.html</link>
      <guid>https://ysliving.github.io/post/gee-day2.html</guid>
      <pubDate>Sun, 18 Aug 2019 16:10:10 GMT</pubDate>
      
      <description>7天用 Go语言 从零实现Web框架教程(7 days implement golang web framework from scratch tutorial)，用 Go语言/golang 动手写Web框架，从零实现一个Web框架，以 Gin 为原型从零设计一个Web框架。本文介绍了请求上下文(Context)的设计理念，封装了返回JSON/String/Data/HTML等类型响应的方法。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/gee/gee.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Web%E6%A1%86%E6%9E%B6-Gee/">Web框架 - Gee</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/gee-day2.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go2 新特性简明教程</title>
      <link>https://ysliving.github.io/post/quick-go2.html</link>
      <guid>https://ysliving.github.io/post/quick-go2.html</guid>
      <pubDate>Thu, 15 Aug 2019 15:59:10 GMT</pubDate>
      
      <description>GO 2 (golang 2) 的变化和新特性，与Go1相比Go2的变化。GO2草案，GO2设计草案。包管理机制(package)、错误处理(Error handling)，错误值(Error values)和泛型(Generics)。GO语言的历史。difference between GO 2 and GO 1.</description>
      
      
      <enclosure url="https://ysliving.github.io/post/quick-go2/go2.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Go-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">Go 简明教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/quick-go2.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>博客折腾记(六) - 不要为了流量忘记了初心</title>
      <link>https://ysliving.github.io/post/blog-experience-6.html</link>
      <guid>https://ysliving.github.io/post/blog-experience-6.html</guid>
      <pubDate>Tue, 13 Aug 2019 16:16:00 GMT</pubDate>
      
      <description>极客兔兔(Geektutu)的博客折腾记的第六篇，不要为了流量忘记了初心。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/blog-experience-6/value.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%BB%BA%E7%AB%99%E7%BB%8F%E5%8E%86/">建站经历</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E5%85%B3%E4%BA%8E%E6%88%91/">关于我</category>
      
      
      <comments>https://ysliving.github.io/post/blog-experience-6.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go语言动手写Web框架 - Gee第一天 http.Handler</title>
      <link>https://ysliving.github.io/post/gee-day1.html</link>
      <guid>https://ysliving.github.io/post/gee-day1.html</guid>
      <pubDate>Sun, 11 Aug 2019 16:10:10 GMT</pubDate>
      
      <description>7天用 Go语言 从零实现Web框架教程(7 days implement golang web framework from scratch tutorial)，用 Go语言/golang 动手写Web框架，从零实现一个Web框架，以 Gin 为原型从零设计一个Web框架。本文介绍了Go标准库 net/http 和 http.Handler 接口的使用，拦截所有的 HTTP 请求，交给Gee框架处理。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/gee/gee.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Web%E6%A1%86%E6%9E%B6-Gee/">Web框架 - Gee</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/gee-day1.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go语言动手写Web框架 - Gee第一天 http.Handler</title>
      <link>https://ysliving.github.io/post/ys-%E6%B5%8B%E8%AF%95.html</link>
      <guid>https://ysliving.github.io/post/ys-%E6%B5%8B%E8%AF%95.html</guid>
      <pubDate>Sun, 11 Aug 2019 16:10:10 GMT</pubDate>
      
      <description>7天用 Go语言 从零实现Web框架教程(7 days implement golang web framework from scratch tutorial)，用 Go语言/golang 动手写Web框架，从零实现一个Web框架，以 Gin 为原型从零设计一个Web框架。本文介绍了Go标准库 net/http 和 http.Handler 接口的使用，拦截所有的 HTTP 请求，交给Gee框架处理。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/gee/gee.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E6%B5%8B%E8%AF%95/">测试</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/ys-%E6%B5%8B%E8%AF%95.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>7天用Go从零实现Web框架Gee教程</title>
      <link>https://ysliving.github.io/post/gee.html</link>
      <guid>https://ysliving.github.io/post/gee.html</guid>
      <pubDate>Sat, 10 Aug 2019 18:10:10 GMT</pubDate>
      
      <description>7天用 Go语言 从零实现Web框架教程(7 days implement golang web framework from scratch tutorial)，用 Go语言/golang 动手写Web框架，从零实现一个Web框架，以 Gin 为原型从零设计一个Web框架。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/gee/gee.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Web%E6%A1%86%E6%9E%B6-Gee/">Web框架 - Gee</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/gee.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go Gin 简明教程</title>
      <link>https://ysliving.github.io/post/quick-go-gin.html</link>
      <guid>https://ysliving.github.io/post/quick-go-gin.html</guid>
      <pubDate>Wed, 07 Aug 2019 12:10:10 GMT</pubDate>
      
      <description>Gin教程，Gin框架教程，Gin快速入门，Gin中文教程，Gin中文文档，Golang Web Framework Gin Tutorial (Go语言Web框架)。Go安装，环境搭建；热加载(hot reload, live reload)；路由(Route, Router)和分组路由(Group Router)；HTML模板(HTML Template)；中间件(Middleware)。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/quick-go-gin/gin.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Go-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">Go 简明教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/quick-go-gin.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 语言简明教程</title>
      <link>https://ysliving.github.io/post/quick-golang.html</link>
      <guid>https://ysliving.github.io/post/quick-golang.html</guid>
      <pubDate>Mon, 05 Aug 2019 17:00:00 GMT</pubDate>
      
      <description>一篇文章入门Go语言，Go语言(Golang)简明教程，Go语言入门教程，Go语言中文教程(golang tutorial)。Go 是一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。本文介绍了 Go 语言的安装、基本类型(字符串str，整型，数组，切片slice，字典 map 等)、控制流(if, for range, for循环, switch 等)、复杂类型(结构体 struct, 接口 interface，方法 method 等)，并发编程(sync, chan)，错误处理(panic, error)，Go Modules 引入第三方依赖，以及如何写测试代码(Unit Test)等。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/quick-golang/golang.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Go-%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/">Go 简明教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/Go/">Go</category>
      
      
      <comments>https://ysliving.github.io/post/quick-golang.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TensorFlow 2.0 (九) - 强化学习 70行代码实战 Policy Gradient</title>
      <link>https://ysliving.github.io/post/tensorflow2-gym-pg.html</link>
      <guid>https://ysliving.github.io/post/tensorflow2-gym-pg.html</guid>
      <pubDate>Sat, 06 Jul 2019 09:30:00 GMT</pubDate>
      
      <description>TensorFlow2教程，TensorFlow2.0教程，TensorFlow 2.0 入门系列文章，第九篇，使用强化学习算法策略梯度(Policy Gradient)，实战 OpenAI gym CartPole，代码仅70行。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/tensorflow2-gym-pg/pg_plot.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/TensorFlow-%E6%95%99%E7%A8%8B/">TensorFlow 教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/TensorFlow/">TensorFlow</category>
      
      <category domain="https://ysliving.github.io/tags/Python/">Python</category>
      
      <category domain="https://ysliving.github.io/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/">强化学习</category>
      
      <category domain="https://ysliving.github.io/tags/OpenAI-gym/">OpenAI gym</category>
      
      
      <comments>https://ysliving.github.io/post/tensorflow2-gym-pg.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>博客折腾记(五) - 友链这件事，没那么简单</title>
      <link>https://ysliving.github.io/post/blog-experience-5.html</link>
      <guid>https://ysliving.github.io/post/blog-experience-5.html</guid>
      <pubDate>Tue, 02 Jul 2019 16:30:00 GMT</pubDate>
      
      <description>极客兔兔(Geektutu)的博客折腾记的第五篇，介绍对于站点质量评估和高质量外链的一些思考。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/blog-experience-5/heart.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%BB%BA%E7%AB%99%E7%BB%8F%E5%8E%86/">建站经历</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E5%85%B3%E4%BA%8E%E6%88%91/">关于我</category>
      
      
      <comments>https://ysliving.github.io/post/blog-experience-5.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>博客折腾记(四) - 原创资格是争取来的</title>
      <link>https://ysliving.github.io/post/blog-experience-4.html</link>
      <guid>https://ysliving.github.io/post/blog-experience-4.html</guid>
      <pubDate>Sun, 30 Jun 2019 03:54:00 GMT</pubDate>
      
      <description>极客兔兔(Geektutu)的博客折腾记的第四篇，介绍原创维权经历，与在 V2EX 发帖的一些总结思考。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/blog-experience-4/google.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%BB%BA%E7%AB%99%E7%BB%8F%E5%8E%86/">建站经历</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E5%85%B3%E4%BA%8E%E6%88%91/">关于我</category>
      
      
      <comments>https://ysliving.github.io/post/blog-experience-4.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TensorFlow 2.0 (八) - 强化学习 DQN 玩转 gym Mountain Car</title>
      <link>https://ysliving.github.io/post/tensorflow2-gym-dqn.html</link>
      <guid>https://ysliving.github.io/post/tensorflow2-gym-dqn.html</guid>
      <pubDate>Thu, 27 Jun 2019 16:30:24 GMT</pubDate>
      
      <description>TensorFlow2教程，TensorFlow2.0教程，TensorFlow 2.0 入门系列文章，第八篇，强化学习 DQN (Deep Q-Learning) 玩转 OpenAI gym game MountainCar-v0。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/tensorflow2-gym-dqn/mountaincar_v0_scores.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/TensorFlow-%E6%95%99%E7%A8%8B/">TensorFlow 教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/TensorFlow/">TensorFlow</category>
      
      <category domain="https://ysliving.github.io/tags/Python/">Python</category>
      
      <category domain="https://ysliving.github.io/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/">强化学习</category>
      
      <category domain="https://ysliving.github.io/tags/OpenAI-gym/">OpenAI gym</category>
      
      <category domain="https://ysliving.github.io/tags/DQN/">DQN</category>
      
      
      <comments>https://ysliving.github.io/post/tensorflow2-gym-dqn.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TensorFlow 2.0 (七) - 强化学习 Q-Learning 玩转 OpenAI gym</title>
      <link>https://ysliving.github.io/post/tensorflow2-gym-q-learning.html</link>
      <guid>https://ysliving.github.io/post/tensorflow2-gym-q-learning.html</guid>
      <pubDate>Mon, 24 Jun 2019 16:40:24 GMT</pubDate>
      
      <description>TensorFlow2教程，TensorFlow2.0教程，TensorFlow 2.0 入门系列文章，第七篇，Q-Learning 玩转 OpenAI gym game MountainCar-v0。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/tensorflow2-gym-q-learning/mountaincar_v0_success.gif" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/TensorFlow-%E6%95%99%E7%A8%8B/">TensorFlow 教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/TensorFlow/">TensorFlow</category>
      
      <category domain="https://ysliving.github.io/tags/Python/">Python</category>
      
      <category domain="https://ysliving.github.io/tags/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/">强化学习</category>
      
      <category domain="https://ysliving.github.io/tags/OpenAI-gym/">OpenAI gym</category>
      
      <category domain="https://ysliving.github.io/tags/Q-Learning/">Q-Learning</category>
      
      
      <comments>https://ysliving.github.io/post/tensorflow2-gym-q-learning.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>博客折腾记(三) - 主题设计、彩蛋与阅读量翻倍</title>
      <link>https://ysliving.github.io/post/blog-experience-3.html</link>
      <guid>https://ysliving.github.io/post/blog-experience-3.html</guid>
      <pubDate>Sun, 23 Jun 2019 03:48:00 GMT</pubDate>
      
      <description>极客兔兔(Geektutu)的博客折腾记的第三篇，Hexo主题改版与提高人均阅读量的一些思考。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/blog-experience-3/cnzz.jpg" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%BB%BA%E7%AB%99%E7%BB%8F%E5%8E%86/">建站经历</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E5%85%B3%E4%BA%8E%E6%88%91/">关于我</category>
      
      
      <comments>https://ysliving.github.io/post/blog-experience-3.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TensorFlow 2.0 (六) - 监督学习玩转 OpenAI gym game</title>
      <link>https://ysliving.github.io/post/tensorflow2-gym-nn.html</link>
      <guid>https://ysliving.github.io/post/tensorflow2-gym-nn.html</guid>
      <pubDate>Thu, 20 Jun 2019 16:10:20 GMT</pubDate>
      
      <description>TensorFlow2教程，TensorFlow2.0教程，TensorFlow 入门系列文章，第六篇，监督学习玩转 OpenAI gym game。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/tensorflow2-gym-nn/cartpole_v0_failed.gif" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/TensorFlow-%E6%95%99%E7%A8%8B/">TensorFlow 教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/">机器学习</category>
      
      <category domain="https://ysliving.github.io/tags/TensorFlow/">TensorFlow</category>
      
      <category domain="https://ysliving.github.io/tags/Python/">Python</category>
      
      <category domain="https://ysliving.github.io/tags/OpenAI-gym/">OpenAI gym</category>
      
      
      <comments>https://ysliving.github.io/post/tensorflow2-gym-nn.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>博客折腾记(二) - 对搜索引擎的理解</title>
      <link>https://ysliving.github.io/post/blog-experience-2.html</link>
      <guid>https://ysliving.github.io/post/blog-experience-2.html</guid>
      <pubDate>Mon, 17 Jun 2019 16:10:24 GMT</pubDate>
      
      <description>极客兔兔(Geektutu)的博客折腾记的第一篇，介绍博主对原创有价值的理解。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/blog-experience-2/origin_create.gif" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%BB%BA%E7%AB%99%E7%BB%8F%E5%8E%86/">建站经历</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E5%85%B3%E4%BA%8E%E6%88%91/">关于我</category>
      
      
      <comments>https://ysliving.github.io/post/blog-experience-2.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>博客折腾记(一) - 极致性能的尝试</title>
      <link>https://ysliving.github.io/post/blog-experience-1.html</link>
      <guid>https://ysliving.github.io/post/blog-experience-1.html</guid>
      <pubDate>Mon, 17 Jun 2019 12:10:00 GMT</pubDate>
      
      <description>极客兔兔(Geektutu)的博客折腾记的第一篇，介绍了博主从Koa+React到Hexo的切换，以及为达到极致性能的一些尝试。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/blog-experience-1/loading.gif" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/%E5%BB%BA%E7%AB%99%E7%BB%8F%E5%8E%86/">建站经历</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E5%85%B3%E4%BA%8E%E6%88%91/">关于我</category>
      
      
      <comments>https://ysliving.github.io/post/blog-experience-1.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pandas 数据处理(三) - Cheat Sheet 中文版</title>
      <link>https://ysliving.github.io/post/pandas-cheat-sheet-zh-cn.html</link>
      <guid>https://ysliving.github.io/post/pandas-cheat-sheet-zh-cn.html</guid>
      <pubDate>Sat, 15 Jun 2019 16:10:24 GMT</pubDate>
      
      <description>Pandas_Cheat_Sheet_zh_CN.pdf 中文版，Geektutu翻译</description>
      
      
      <enclosure url="https://ysliving.github.io/post/pandas-cheat-sheet-zh-cn/cheat_sheet_part.png" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Pandas-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/">Pandas 数据处理</category>
      
      
      <category domain="https://ysliving.github.io/tags/Pandas/">Pandas</category>
      
      
      <comments>https://ysliving.github.io/post/pandas-cheat-sheet-zh-cn.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TensorFlow 2.0 (五) - mnist手写数字识别(CNN卷积神经网络)</title>
      <link>https://ysliving.github.io/post/tensorflow2-mnist-cnn.html</link>
      <guid>https://ysliving.github.io/post/tensorflow2-mnist-cnn.html</guid>
      <pubDate>Wed, 12 Jun 2019 16:10:24 GMT</pubDate>
      
      <description>TensorFlow2教程，TensorFlow2.0教程，TensorFlow 2.0 入门系列文章，第五篇，mnist手写数字识别(CNN卷积神经网络)。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/tensorflow2-mnist-cnn/cnn_image_sample.gif" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/TensorFlow-%E6%95%99%E7%A8%8B/">TensorFlow 教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/">机器学习</category>
      
      <category domain="https://ysliving.github.io/tags/TensorFlow/">TensorFlow</category>
      
      <category domain="https://ysliving.github.io/tags/mnist/">mnist</category>
      
      <category domain="https://ysliving.github.io/tags/Python/">Python</category>
      
      <category domain="https://ysliving.github.io/tags/CNN/">CNN</category>
      
      
      <comments>https://ysliving.github.io/post/tensorflow2-mnist-cnn.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TensorFlow入门(四) - mnist手写数字识别(制作h5py训练集)</title>
      <link>https://ysliving.github.io/post/tensorflow-make-npy-hdf5-data-set.html</link>
      <guid>https://ysliving.github.io/post/tensorflow-make-npy-hdf5-data-set.html</guid>
      <pubDate>Mon, 02 Apr 2018 03:51:24 GMT</pubDate>
      
      <description>TensorFlow 入门系列文章，第四篇，mnist手写数字识别(制作h5py训练集)。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/tensorflow-mnist-simplest/x_y.png" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/TensorFlow-%E6%95%99%E7%A8%8B/">TensorFlow 教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/">机器学习</category>
      
      <category domain="https://ysliving.github.io/tags/TensorFlow/">TensorFlow</category>
      
      <category domain="https://ysliving.github.io/tags/mnist/">mnist</category>
      
      <category domain="https://ysliving.github.io/tags/Python/">Python</category>
      
      
      <comments>https://ysliving.github.io/post/tensorflow-make-npy-hdf5-data-set.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TensorFlow入门(三) - mnist手写数字识别(可视化训练)</title>
      <link>https://ysliving.github.io/post/tensorflow-mnist-tensorboard-training.html</link>
      <guid>https://ysliving.github.io/post/tensorflow-mnist-tensorboard-training.html</guid>
      <pubDate>Thu, 29 Mar 2018 03:51:24 GMT</pubDate>
      
      <description>TensorFlow 入门系列文章，第三篇，mnist手写数字识别(可视化训练)。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/tensorflow-mnist-tensorboard-training/tensorboard_mnist_graph.png" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/TensorFlow-%E6%95%99%E7%A8%8B/">TensorFlow 教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/">机器学习</category>
      
      <category domain="https://ysliving.github.io/tags/TensorFlow/">TensorFlow</category>
      
      <category domain="https://ysliving.github.io/tags/mnist/">mnist</category>
      
      <category domain="https://ysliving.github.io/tags/Python/">Python</category>
      
      
      <comments>https://ysliving.github.io/post/tensorflow-mnist-tensorboard-training.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pandas 数据处理(二) - 筛选数据</title>
      <link>https://ysliving.github.io/post/pandas-select-data.html</link>
      <guid>https://ysliving.github.io/post/pandas-select-data.html</guid>
      <pubDate>Wed, 21 Mar 2018 02:51:24 GMT</pubDate>
      
      <description>Pandas筛选DataFrame和Series数据的一些实用技巧。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/pandas-select-data/pandas.gif" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Pandas-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/">Pandas 数据处理</category>
      
      
      <category domain="https://ysliving.github.io/tags/Pandas/">Pandas</category>
      
      
      <comments>https://ysliving.github.io/post/pandas-select-data.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pandas 数据处理(一) - DataFrame 与 Series</title>
      <link>https://ysliving.github.io/post/pandas-dataframe-series.html</link>
      <guid>https://ysliving.github.io/post/pandas-dataframe-series.html</guid>
      <pubDate>Tue, 20 Mar 2018 02:51:24 GMT</pubDate>
      
      <description>DataFrame和Series是pandas中最常见的2种数据结构。DataFrame可以理解为Excel中的一张表，Series可以理解为一张Excel表的一行或一列数据。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/pandas-dataframe-series/pandas.gif" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/Pandas-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/">Pandas 数据处理</category>
      
      
      <category domain="https://ysliving.github.io/tags/Pandas/">Pandas</category>
      
      
      <comments>https://ysliving.github.io/post/pandas-dataframe-series.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TensorFlow入门(二) - mnist手写数字识别(模型保存加载)</title>
      <link>https://ysliving.github.io/post/tensorflow-mnist-save-ckpt.html</link>
      <guid>https://ysliving.github.io/post/tensorflow-mnist-save-ckpt.html</guid>
      <pubDate>Sun, 17 Dec 2017 03:51:24 GMT</pubDate>
      
      <description>TensorFlow 入门系列文章，第二篇，mnist手写数字识别(模型保存加载)。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/tensorflow-mnist-save-ckpt/save_ckpt.png" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/TensorFlow-%E6%95%99%E7%A8%8B/">TensorFlow 教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/">机器学习</category>
      
      <category domain="https://ysliving.github.io/tags/TensorFlow/">TensorFlow</category>
      
      <category domain="https://ysliving.github.io/tags/mnist/">mnist</category>
      
      <category domain="https://ysliving.github.io/tags/Python/">Python</category>
      
      
      <comments>https://ysliving.github.io/post/tensorflow-mnist-save-ckpt.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TensorFlow入门(一) - mnist手写数字识别(网络搭建)</title>
      <link>https://ysliving.github.io/post/tensorflow-mnist-simplest.html</link>
      <guid>https://ysliving.github.io/post/tensorflow-mnist-simplest.html</guid>
      <pubDate>Sat, 09 Dec 2017 03:51:24 GMT</pubDate>
      
      <description>TensorFlow 入门系列文章，第一篇，mnist手写数字识别(网络搭建)。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/tensorflow-mnist-simplest/x_y.png" type="image"/>
      
      
      
      <category domain="https://ysliving.github.io/categories/TensorFlow-%E6%95%99%E7%A8%8B/">TensorFlow 教程</category>
      
      
      <category domain="https://ysliving.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/">机器学习</category>
      
      <category domain="https://ysliving.github.io/tags/TensorFlow/">TensorFlow</category>
      
      <category domain="https://ysliving.github.io/tags/mnist/">mnist</category>
      
      <category domain="https://ysliving.github.io/tags/Python/">Python</category>
      
      
      <comments>https://ysliving.github.io/post/tensorflow-mnist-simplest.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>留言板</title>
      <link>https://ysliving.github.io/post/about.html</link>
      <guid>https://ysliving.github.io/post/about.html</guid>
      <pubDate>Mon, 03 Jul 2017 03:51:24 GMT</pubDate>
      
      <description>极客兔兔的小站，致力于分享一些技术教程和有趣的技术实践。</description>
      
      
      <enclosure url="https://ysliving.github.io/post/about/leave_a_msg.gif" type="image"/>
      
      
      
      
      <category domain="https://ysliving.github.io/tags/%E5%85%B3%E4%BA%8E%E6%88%91/">关于我</category>
      
      
      <comments>https://ysliving.github.io/post/about.html#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>友情链接</title>
      <link>https://ysliving.github.io/post/link.html</link>
      <guid>https://ysliving.github.io/post/link.html</guid>
      <pubDate>Mon, 03 Jul 2017 03:51:24 GMT</pubDate>
      
      <description>码农印象的友情链接</description>
      
      
      <enclosure url="https://ysliving.github.io/post/link/link.png" type="image"/>
      
      
      
      
      <category domain="https://ysliving.github.io/tags/%E5%8F%8B%E9%93%BE/">友链</category>
      
      
      <comments>https://ysliving.github.io/post/link.html#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
