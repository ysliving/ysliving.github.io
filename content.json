{"meta":{"title":"码农印象","subtitle":"","description":"专职于互联网企业后端开发，专注于分享Linux C/C++/Golang、数据库等技术栈和互联网求职面试干货、经典面试算法。在这里我们终将一起从前沿技术，探索巅峰人生！","author":"码农印象","url":"https://ysluckly.github.io","root":"/"},"pages":[{"title":"","date":"2022-02-19T09:27:58.478Z","updated":"2022-02-19T09:27:58.478Z","comments":true,"path":"README.html","permalink":"https://ysluckly.github.io/README.html","excerpt":"","text":"为 layui 扩展的 下拉多选select在线demo： http://yelog.org/layui-select-multiple/ 这个在线 demo就是本项目的 index.html。 可将项目 clone 到本地查看效果。 效果图 参数 属性名 属性值 备注 multiple 无 开启多选 lay-search 无 开启搜索 lay-case 无 大小写敏感 lay-omit 无 开启多选简写，显示勾选条数 使用 将项目中的 form.js 覆盖自己项目中的 form.js。 引入下面cssselect[multiple]+.layui-form-select&gt;.layui-select-title&gt;input.layui-input&#123; border-bottom: 0&#125; select[multiple]+.layui-form-select dd&#123; padding:0;&#125; select[multiple]+.layui-form-select .layui-form-checkbox[lay-skin=primary]&#123; margin:0 !important; display:block; line-height:36px !important; position:relative; padding-left:26px;&#125; select[multiple]+.layui-form-select .layui-form-checkbox[lay-skin=primary] span&#123;line-height:36px !important; float:none;&#125; select[multiple]+.layui-form-select .layui-form-checkbox[lay-skin=primary] i&#123; position:absolute; left:10px; top:0; margin-top:9px;&#125; .multiSelect&#123; line-height:normal; height:auto; padding:4px 10px; overflow:hidden;min-height:38px; margin-top:-38px; left:0; z-index:99;position:relative;background:none;&#125; .multiSelect a&#123; padding:2px 5px; background:#908e8e; border-radius:2px; color:#fff; display:block; line-height:20px; height:20px; margin:2px 5px 2px 0; float:left;&#125; .multiSelect a span&#123; float:left;&#125; .multiSelect a i &#123;float:left;display:block;margin:2px 0 0 2px;border-radius:2px;width:8px;height:8px;padding:4px;position:relative;-webkit-transition:all .3s;transition:all .3s&#125; .multiSelect a i:before, .multiSelect a i:after &#123;position:absolute;left:8px;top:2px;content:&#39;&#39;;height:12px;width:1px;background-color:#fff&#125; .multiSelect a i:before &#123;-webkit-transform:rotate(45deg);transform:rotate(45deg)&#125; .multiSelect a i:after &#123;-webkit-transform:rotate(-45deg);transform:rotate(-45deg)&#125; .multiSelect a i:hover&#123; background-color:#545556;&#125; 使用实例下面实例 开启了下拉多选（multiple）, 并开启了检索功能（lay-search）。效果可以参考 在线实例 的 多选+搜索+大小写不敏感 模块 &lt;select name=&quot;多选+搜索+大小写不敏感&quot; lay-verify=&quot;required&quot; multiple lay-search&gt; &lt;option value=&quot;&quot;&gt;请选择您的兴趣爱好&lt;/option&gt; &lt;option&gt;sing1&lt;/option&gt; &lt;option selected&gt;sing2&lt;/option&gt; &lt;option&gt;SING1-大写&lt;/option&gt; &lt;option&gt;movie1&lt;/option&gt; &lt;option selected&gt;movie2&lt;/option&gt; &lt;option&gt;movie3&lt;/option&gt; &lt;option&gt;MOVIE4&lt;/option&gt; &lt;option&gt;swim&lt;/option&gt; &lt;option&gt;moon&lt;/option&gt; &lt;/select&gt; 更多实例参考 在线实例、或 index.html。 声明此项目基于 https://gitee.com/layuicms/XiaLaDuoXuan 项目修改得来，修复了一些bug，扩展了 简化多选、多选搜索、大小写敏感控制等功能。"},{"title":"","date":"2022-02-19T09:27:58.597Z","updated":"2022-02-19T09:27:58.597Z","comments":true,"path":"index.html","permalink":"https://ysluckly.github.io/index.html","excerpt":"","text":"layui-select-multiple /* 下拉多选样式 需要引用*/ select[multiple]+.layui-form-select>.layui-select-title>input.layui-input{ border-bottom: 0} select[multiple]+.layui-form-select dd{ padding:0;} select[multiple]+.layui-form-select .layui-form-checkbox[lay-skin=primary]{ margin:0 !important; display:block; line-height:36px !important; position:relative; padding-left:26px;} select[multiple]+.layui-form-select .layui-form-checkbox[lay-skin=primary] span{line-height:36px !important; float:none;} select[multiple]+.layui-form-select .layui-form-checkbox[lay-skin=primary] i{ position:absolute; left:10px; top:0; margin-top:9px;} .multiSelect{ line-height:normal; height:auto; padding:4px 10px; overflow:hidden;min-height:38px; margin-top:-38px; left:0; z-index:99;position:relative;background:none;} .multiSelect a{ padding:2px 5px; background:#908e8e; border-radius:2px; color:#fff; display:block; line-height:20px; height:20px; margin:2px 5px 2px 0; float:left;} .multiSelect a span{ float:left;} .multiSelect a i {float:left;display:block;margin:2px 0 0 2px;border-radius:2px;width:8px;height:8px;padding:4px;position:relative;-webkit-transition:all .3s;transition:all .3s} .multiSelect a i:before, .multiSelect a i:after {position:absolute;left:8px;top:2px;content:'';height:12px;width:1px;background-color:#fff} .multiSelect a i:before {-webkit-transform:rotate(45deg);transform:rotate(45deg)} .multiSelect a i:after {-webkit-transform:rotate(-45deg);transform:rotate(-45deg)} .multiSelect a i:hover{ background-color:#545556;} /* 下面是页面内样式，无需引用 */ .layui-block { margin-bottom: 10px; } .layui-form-label { width: 180px; } .code { color: gray; margin-left: 10px; } .unshow>#result { display: none; } pre { padding: 5px; margin: 5px; } .string { color: green; } .number { color: darkorange; } .boolean { color: blue; } .null { color: magenta; } .key { color: red; } 基础属性 属性名 属性值 备注 multiple 无 开启多选 lay-search 无 开启搜索 lay-case 无 大小写敏感 lay-omit 无 开启多选简写，显示勾选条数 单选select 单选 请选择您的兴趣爱好 sing1 sing2 SING1-大写 movie1 movie2 movie3 MOVIE4 swim moon &ltselect> 单选+搜索+大小写不敏感 请选择您的兴趣爱好 sing1 sing2 SING1-大写 movie1 movie2 movie3 MOVIE4 swim moon &ltselect lay-search> 单选+搜索+大小写敏感 请选择您的兴趣爱好 sing1 sing2 SING1-大写 movie1 movie2 movie3 MOVIE4 swim moon &ltselect lay-search lay-case> 查看表单信息 多选select 多选 请选择您的兴趣爱好 sing1 sing2 SING1-大写 movie1 movie2 movie3 MOVIE4 swim moon &ltselect multiple> 简化多选 请选择您的兴趣爱好 sing1 sing2 SING1-大写 movie1 movie2 movie3 MOVIE4 swim moon &ltselect multiple lay-omit> 多选+搜索+大小写不敏感 请选择您的兴趣爱好 sing1 sing2 SING1-大写 movie1 movie2 movie3 MOVIE4 swim moon &ltselect multiple lay-search> 简化多选+搜索+大小写敏感 请选择您的兴趣爱好 sing1 sing2 SING1-大写 movie1 movie2 movie3 MOVIE4 swim moon &ltselect multiple lay-search lay-case lay-omit> 查看表单信息 赋值 // 有两种赋值方式： 1. 直接在option中写selected。 2. 通过 js 赋值。 // 1. 直接在option中写selected 请选择您的兴趣爱好 sing1 sing2 SING1-大写 movie1 movie2 movie3 MOVIE4 swim moon // 2. 通过 js 赋值。 请选择您的兴趣爱好 sing1 sing2 SING1-大写 movie1 movie2 movie3 MOVIE4 swim moon &ltscript> // 手动赋值 $('select[name=\"简化多选+搜索+大小写敏感\"]').val(['sing1', 'movie2']); form.render(); &lt/script> layui.use(['form','code'], function () { var form = layui.form, $ = layui.$; // 代码块 layui.code({ title: 'html', encode: true, about: false }); // 手动赋值 $('select[name=\"简化多选+搜索+大小写敏感\"]').val(['sing1', 'movie2']); form.render(); // 提交事件 form.on(\"submit(*)\", function (data) { $('#result').html(syntaxHighlight(data.field)); layer.open({ type: 1, title: '提交信息', shadeClose: true, content:$('#result') }); return false; }); // json 格式化+高亮 function syntaxHighlight(json) { if (typeof json != 'string') { json = JSON.stringify(json, undefined, 2); } json = json.replace(/&/g, '&').replace(//g, '>'); return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function(match) { var cls = 'number'; if (/^\"/.test(match)) { if (/:$/.test(match)) { cls = 'key'; } else { cls = 'string'; } } else if (/true|false/.test(match)) { cls = 'boolean'; } else if (/null/.test(match)) { cls = 'null'; } return '' + match + ''; }); } })"},{"title":"","date":"2022-02-20T11:31:21.375Z","updated":"2022-02-20T11:31:21.375Z","comments":true,"path":"about/index.html","permalink":"https://ysluckly.github.io/about/index.html","excerpt":"","text":"YSLIVING'S HOME | ABOUT document.onkeydown = function () { if (window.event && window.event.keyCode == 123) { event.keyCode = 0; event.returnValue = false; return false; } }; 您的浏览器不支持audio标签，无法播放音乐！"},{"title":"","date":"2021-09-08T22:25:28.547Z","updated":"2020-09-09T14:32:06.000Z","comments":true,"path":"about/about.css","permalink":"https://ysluckly.github.io/about/about.css","excerpt":"","text":"body { margin: 0; overflow-x: hidden; overflow-y: hidden; } .mdui-container, .mdui-container-fluid { -webkit-box-sizing: border-box; box-sizing: border-box; padding-right: 8px; padding-left: 8px; margin-right: auto; margin-left: auto } .mdui-container-fluid:after, .mdui-container:after { display: table; clear: both; content: '' } .mdui-container { width: 96%; max-width: 1280px } @media (min-width:600px) { .mdui-container { width: 94% } } @media (min-width:1024px) { .mdui-container { width: 92% } } h3 { text-align: center } .icon { padding: 0 2% 1% 2%; width: 40px; height: 40px } table { text-align: left; font-family:'STZhongsong'; margin: 0 0 0 230px; font-size: 20px; height: 145px; width: 75% } .showarea-1 { opacity: 0.9; background-color: white; margin: 4% 10% 0% 10%; padding: 10px } .showarea-2 { opacity: 0.9; background-color: white; height: 300px; margin: 0.5% 0 0 10%; float: left; width: 38%; padding: 0 0 8px 20px } .showarea-3 { opacity: 0.9; background-color: white; height: 300px; float: left; width: 38.3%; margin: 0.5% 0 0 0.5%; padding: 0 0 8px 20px } .showarea-4 { opacity: 0.9; background-color: white; margin: 0.5% 10% 0 10%; padding: 8px; text-align: center } .skill { max-width: 700px; margin: auto; } .skill .item { width: 100%; clear: both; margin-right: auto; margin-left: auto; height: 35px; } .skill .describe { font-family: \"Microsoft Yahei\"; margin-right: 12px; text-align: center; } .skill .progress { float: left; height: 25px; background: #fbfbfb; border-left: 1px solid transparent; border-right: 1px solid transparent; width: 70%; } .skill .progress>span { position: relative; float: left; margin: 0 -1px; min-width: 30px; height: 25px; line-height: 21px; text-align: right; background: #cccccc; border: none; border-color: #bfbfbf #b3b3b3 #9e9e9e; -webkit-box-shadow: inset 0 1px rgba(255, 255, 255, 0.3), 0 1px 2px rgba(0, 0, 0, 0.2); box-shadow: inset 0 1px rgba(255, 255, 255, 0.3), 0 1px 2px rgba(0, 0, 0, 0.2); } .skill .progress>span>span { padding: 0 8px; font-size: 14px; color: #404040; color: rgba(0, 0, 0, 0.7); font-family: \"Microsoft Yahie\"; line-height: 25px; } .skill .progress>span:before { content: ''; position: absolute; top: 0; bottom: 0; left: 0; right: 0; z-index: 1; height: 25px; border-radius: 10px; } .skill .progress .green { background: #49C085; } .skill .progress .darkblue { background: #7782D1; } .skill .progress .red { background: #EC5B5B; } .skill .progress .orange { background: #f2b63c; } .skill .progress .blue { background: #6F92FF; } @media (min-width:750px) { .skill .describe { width: 100px; float: left; } .skill .progress { width: 70%; float: left; } } @media (max-width:750px) { .skill .describe { width: 100%; margin-bottom: 5px; text-align: left; } .skill .progress { width: 100%; margin-bottom: 5px; } } #mainicon { -webkit-animation: rotateImg 5s linear infinite; height: 140px; width: 140px; float: left; border: 3px solid; border-color: aqua; border-radius: 50%; transition: transform 1s; max-width: 50%; display: block } @keyframes rotateImg { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } @-webkit-keyframes rotateImg { 0% { -webkit-transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); } } canvas { top: 0; padding: 0; margin: 0; position: absolute; z-index: -1; left: 0px } #footer { position: relative; clear: both; width: 100%; top: 20px; text-align: center; display: inline-block; color: #D3D3D3; font-family:Georgia, 'Times New Roman', Times, serif } #footer a { text-decoration: none; color: #D3D3D3; cursor: pointer } #footer a:hover { border-bottom: 1px dotted #FFFFFF; color: #FFFFFF } @media screen and (max-width:480px) { #mainicon { position: relative; float: top; display: block } }"},{"title":"","date":"2021-09-08T22:25:28.555Z","updated":"2020-09-09T14:32:06.000Z","comments":true,"path":"about/sakura.js","permalink":"https://ysluckly.github.io/about/sakura.js","excerpt":"","text":"// Utilities var Vector3 = {}; var Matrix44 = {}; Vector3.create = function(x, y, z) { return {'x':x, 'y':y, 'z':z}; }; Vector3.dot = function (v0, v1) { return v0.x * v1.x + v0.y * v1.y + v0.z * v1.z; }; Vector3.cross = function (v, v0, v1) { v.x = v0.y * v1.z - v0.z * v1.y; v.y = v0.z * v1.x - v0.x * v1.z; v.z = v0.x * v1.y - v0.y * v1.x; }; Vector3.normalize = function (v) { var l = v.x * v.x + v.y * v.y + v.z * v.z; if(l > 0.00001) { l = 1.0 / Math.sqrt(l); v.x *= l; v.y *= l; v.z *= l; } }; Vector3.arrayForm = function(v) { if(v.array) { v.array[0] = v.x; v.array[1] = v.y; v.array[2] = v.z; } else { v.array = new Float32Array([v.x, v.y, v.z]); } return v.array; }; Matrix44.createIdentity = function () { return new Float32Array([1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]); }; Matrix44.loadProjection = function (m, aspect, vdeg, near, far) { var h = near * Math.tan(vdeg * Math.PI / 180.0 * 0.5) * 2.0; var w = h * aspect; m[0] = 2.0 * near / w; m[1] = 0.0; m[2] = 0.0; m[3] = 0.0; m[4] = 0.0; m[5] = 2.0 * near / h; m[6] = 0.0; m[7] = 0.0; m[8] = 0.0; m[9] = 0.0; m[10] = -(far + near) / (far - near); m[11] = -1.0; m[12] = 0.0; m[13] = 0.0; m[14] = -2.0 * far * near / (far - near); m[15] = 0.0; }; Matrix44.loadLookAt = function (m, vpos, vlook, vup) { var frontv = Vector3.create(vpos.x - vlook.x, vpos.y - vlook.y, vpos.z - vlook.z); Vector3.normalize(frontv); var sidev = Vector3.create(1.0, 0.0, 0.0); Vector3.cross(sidev, vup, frontv); Vector3.normalize(sidev); var topv = Vector3.create(1.0, 0.0, 0.0); Vector3.cross(topv, frontv, sidev); Vector3.normalize(topv); m[0] = sidev.x; m[1] = topv.x; m[2] = frontv.x; m[3] = 0.0; m[4] = sidev.y; m[5] = topv.y; m[6] = frontv.y; m[7] = 0.0; m[8] = sidev.z; m[9] = topv.z; m[10] = frontv.z; m[11] = 0.0; m[12] = -(vpos.x * m[0] + vpos.y * m[4] + vpos.z * m[8]); m[13] = -(vpos.x * m[1] + vpos.y * m[5] + vpos.z * m[9]); m[14] = -(vpos.x * m[2] + vpos.y * m[6] + vpos.z * m[10]); m[15] = 1.0; }; // var timeInfo = { 'start':0, 'prev':0, // Date 'delta':0, 'elapsed':0 // Number(sec) }; // var gl; var renderSpec = { 'width':0, 'height':0, 'aspect':1, 'array':new Float32Array(3), 'halfWidth':0, 'halfHeight':0, 'halfArray':new Float32Array(3) // and some render targets. see setViewport() }; renderSpec.setSize = function(w, h) { renderSpec.width = w; renderSpec.height = h; renderSpec.aspect = renderSpec.width / renderSpec.height; renderSpec.array[0] = renderSpec.width; renderSpec.array[1] = renderSpec.height; renderSpec.array[2] = renderSpec.aspect; renderSpec.halfWidth = Math.floor(w / 2); renderSpec.halfHeight = Math.floor(h / 2); renderSpec.halfArray[0] = renderSpec.halfWidth; renderSpec.halfArray[1] = renderSpec.halfHeight; renderSpec.halfArray[2] = renderSpec.halfWidth / renderSpec.halfHeight; }; function deleteRenderTarget(rt) { gl.deleteFramebuffer(rt.frameBuffer); gl.deleteRenderbuffer(rt.renderBuffer); gl.deleteTexture(rt.texture); } function createRenderTarget(w, h) { var ret = { 'width':w, 'height':h, 'sizeArray':new Float32Array([w, h, w / h]), 'dtxArray':new Float32Array([1.0 / w, 1.0 / h]) }; ret.frameBuffer = gl.createFramebuffer(); ret.renderBuffer = gl.createRenderbuffer(); ret.texture = gl.createTexture(); gl.bindTexture(gl.TEXTURE_2D, ret.texture); gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, w, h, 0, gl.RGBA, gl.UNSIGNED_BYTE, null); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR); gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR); gl.bindFramebuffer(gl.FRAMEBUFFER, ret.frameBuffer); gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ret.texture, 0); gl.bindRenderbuffer(gl.RENDERBUFFER, ret.renderBuffer); gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, w, h); gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, ret.renderBuffer); gl.bindTexture(gl.TEXTURE_2D, null); gl.bindRenderbuffer(gl.RENDERBUFFER, null); gl.bindFramebuffer(gl.FRAMEBUFFER, null); return ret; } function compileShader(shtype, shsrc) { var retsh = gl.createShader(shtype); gl.shaderSource(retsh, shsrc); gl.compileShader(retsh); if(!gl.getShaderParameter(retsh, gl.COMPILE_STATUS)) { var errlog = gl.getShaderInfoLog(retsh); gl.deleteShader(retsh); console.error(errlog); return null; } return retsh; } function createShader(vtxsrc, frgsrc, uniformlist, attrlist) { var vsh = compileShader(gl.VERTEX_SHADER, vtxsrc); var fsh = compileShader(gl.FRAGMENT_SHADER, frgsrc); if(vsh == null || fsh == null) { return null; } var prog = gl.createProgram(); gl.attachShader(prog, vsh); gl.attachShader(prog, fsh); gl.deleteShader(vsh); gl.deleteShader(fsh); gl.linkProgram(prog); if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) { var errlog = gl.getProgramInfoLog(prog); console.error(errlog); return null; } if(uniformlist) { prog.uniforms = {}; for(var i = 0; i < uniformlist.length; i++) { prog.uniforms[uniformlist[i]] = gl.getUniformLocation(prog, uniformlist[i]); } } if(attrlist) { prog.attributes = {}; for(var i = 0; i < attrlist.length; i++) { var attr = attrlist[i]; prog.attributes[attr] = gl.getAttribLocation(prog, attr); } } return prog; } function useShader(prog) { gl.useProgram(prog); for(var attr in prog.attributes) { gl.enableVertexAttribArray(prog.attributes[attr]);; } } function unuseShader(prog) { for(var attr in prog.attributes) { gl.disableVertexAttribArray(prog.attributes[attr]);; } gl.useProgram(null); } ///// var projection = { 'angle':60, 'nearfar':new Float32Array([0.1, 100.0]), 'matrix':Matrix44.createIdentity() }; var camera = { 'position':Vector3.create(0, 0, 100), 'lookat':Vector3.create(0, 0, 0), 'up':Vector3.create(0, 1, 0), 'dof':Vector3.create(10.0, 4.0, 8.0), 'matrix':Matrix44.createIdentity() }; var pointFlower = {}; var meshFlower = {}; var sceneStandBy = false; var BlossomParticle = function () { this.velocity = new Array(3); this.rotation = new Array(3); this.position = new Array(3); this.euler = new Array(3); this.size = 1.0; this.alpha = 1.0; this.zkey = 0.0; }; BlossomParticle.prototype.setVelocity = function (vx, vy, vz) { this.velocity[0] = vx; this.velocity[1] = vy; this.velocity[2] = vz; }; BlossomParticle.prototype.setRotation = function (rx, ry, rz) { this.rotation[0] = rx; this.rotation[1] = ry; this.rotation[2] = rz; }; BlossomParticle.prototype.setPosition = function (nx, ny, nz) { this.position[0] = nx; this.position[1] = ny; this.position[2] = nz; }; BlossomParticle.prototype.setEulerAngles = function (rx, ry, rz) { this.euler[0] = rx; this.euler[1] = ry; this.euler[2] = rz; }; BlossomParticle.prototype.setSize = function (s) { this.size = s; }; BlossomParticle.prototype.update = function (dt, et) { this.position[0] += this.velocity[0] * dt; this.position[1] += this.velocity[1] * dt; this.position[2] += this.velocity[2] * dt; this.euler[0] += this.rotation[0] * dt; this.euler[1] += this.rotation[1] * dt; this.euler[2] += this.rotation[2] * dt; }; function createPointFlowers() { // get point sizes var prm = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE); renderSpec.pointSize = {'min':prm[0], 'max':prm[1]}; var vtxsrc = document.getElementById(\"sakura_point_vsh\").textContent; var frgsrc = document.getElementById(\"sakura_point_fsh\").textContent; pointFlower.program = createShader( vtxsrc, frgsrc, ['uProjection', 'uModelview', 'uResolution', 'uOffset', 'uDOF', 'uFade'], ['aPosition', 'aEuler', 'aMisc'] ); useShader(pointFlower.program); pointFlower.offset = new Float32Array([0.0, 0.0, 0.0]); pointFlower.fader = Vector3.create(0.0, 10.0, 0.0); // paramerters: velocity[3], rotate[3] pointFlower.numFlowers = 1600; pointFlower.particles = new Array(pointFlower.numFlowers); // vertex attributes {position[3], euler_xyz[3], size[1]} pointFlower.dataArray = new Float32Array(pointFlower.numFlowers * (3 + 3 + 2)); pointFlower.positionArrayOffset = 0; pointFlower.eulerArrayOffset = pointFlower.numFlowers * 3; pointFlower.miscArrayOffset = pointFlower.numFlowers * 6; pointFlower.buffer = gl.createBuffer(); gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer); gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW); gl.bindBuffer(gl.ARRAY_BUFFER, null); unuseShader(pointFlower.program); for(var i = 0; i < pointFlower.numFlowers; i++) { pointFlower.particles[i] = new BlossomParticle(); } } function initPointFlowers() { //area pointFlower.area = Vector3.create(20.0, 20.0, 20.0); pointFlower.area.x = pointFlower.area.y * renderSpec.aspect; pointFlower.fader.x = 10.0; //env fade start pointFlower.fader.y = pointFlower.area.z; //env fade half pointFlower.fader.z = 0.1; //near fade start //particles var PI2 = Math.PI * 2.0; var tmpv3 = Vector3.create(0, 0, 0); var tmpv = 0; var symmetryrand = function() {return (Math.random() * 2.0 - 1.0);}; for(var i = 0; i < pointFlower.numFlowers; i++) { var tmpprtcl = pointFlower.particles[i]; //velocity tmpv3.x = symmetryrand() * 0.3 + 0.8; tmpv3.y = symmetryrand() * 0.2 - 1.0; tmpv3.z = symmetryrand() * 0.3 + 0.5; Vector3.normalize(tmpv3); tmpv = 2.0 + Math.random() * 1.0; tmpprtcl.setVelocity(tmpv3.x * tmpv, tmpv3.y * tmpv, tmpv3.z * tmpv); //rotation tmpprtcl.setRotation( symmetryrand() * PI2 * 0.5, symmetryrand() * PI2 * 0.5, symmetryrand() * PI2 * 0.5 ); //position tmpprtcl.setPosition( symmetryrand() * pointFlower.area.x, symmetryrand() * pointFlower.area.y, symmetryrand() * pointFlower.area.z ); //euler tmpprtcl.setEulerAngles( Math.random() * Math.PI * 2.0, Math.random() * Math.PI * 2.0, Math.random() * Math.PI * 2.0 ); //size tmpprtcl.setSize(0.9 + Math.random() * 0.1); } } function renderPointFlowers() { //update var PI2 = Math.PI * 2.0; var limit = [pointFlower.area.x, pointFlower.area.y, pointFlower.area.z]; var repeatPos = function (prt, cmp, limit) { if(Math.abs(prt.position[cmp]) - prt.size * 0.5 > limit) { //out of area if(prt.position[cmp] > 0) { prt.position[cmp] -= limit * 2.0; } else { prt.position[cmp] += limit * 2.0; } } }; var repeatEuler = function (prt, cmp) { prt.euler[cmp] = prt.euler[cmp] % PI2; if(prt.euler[cmp] < 0.0) { prt.euler[cmp] += PI2; } }; for(var i = 0; i < pointFlower.numFlowers; i++) { var prtcl = pointFlower.particles[i]; prtcl.update(timeInfo.delta, timeInfo.elapsed); repeatPos(prtcl, 0, pointFlower.area.x); repeatPos(prtcl, 1, pointFlower.area.y); repeatPos(prtcl, 2, pointFlower.area.z); repeatEuler(prtcl, 0); repeatEuler(prtcl, 1); repeatEuler(prtcl, 2); prtcl.alpha = 1.0;//(pointFlower.area.z - prtcl.position[2]) * 0.5; prtcl.zkey = (camera.matrix[2] * prtcl.position[0] + camera.matrix[6] * prtcl.position[1] + camera.matrix[10] * prtcl.position[2] + camera.matrix[14]); } // sort pointFlower.particles.sort(function(p0, p1){return p0.zkey - p1.zkey;}); // update data var ipos = pointFlower.positionArrayOffset; var ieuler = pointFlower.eulerArrayOffset; var imisc = pointFlower.miscArrayOffset; for(var i = 0; i < pointFlower.numFlowers; i++) { var prtcl = pointFlower.particles[i]; pointFlower.dataArray[ipos] = prtcl.position[0]; pointFlower.dataArray[ipos + 1] = prtcl.position[1]; pointFlower.dataArray[ipos + 2] = prtcl.position[2]; ipos += 3; pointFlower.dataArray[ieuler] = prtcl.euler[0]; pointFlower.dataArray[ieuler + 1] = prtcl.euler[1]; pointFlower.dataArray[ieuler + 2] = prtcl.euler[2]; ieuler += 3; pointFlower.dataArray[imisc] = prtcl.size; pointFlower.dataArray[imisc + 1] = prtcl.alpha; imisc += 2; } //draw gl.enable(gl.BLEND); //gl.disable(gl.DEPTH_TEST); gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); var prog = pointFlower.program; useShader(prog); gl.uniformMatrix4fv(prog.uniforms.uProjection, false, projection.matrix); gl.uniformMatrix4fv(prog.uniforms.uModelview, false, camera.matrix); gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array); gl.uniform3fv(prog.uniforms.uDOF, Vector3.arrayForm(camera.dof)); gl.uniform3fv(prog.uniforms.uFade, Vector3.arrayForm(pointFlower.fader)); gl.bindBuffer(gl.ARRAY_BUFFER, pointFlower.buffer); gl.bufferData(gl.ARRAY_BUFFER, pointFlower.dataArray, gl.DYNAMIC_DRAW); gl.vertexAttribPointer(prog.attributes.aPosition, 3, gl.FLOAT, false, 0, pointFlower.positionArrayOffset * Float32Array.BYTES_PER_ELEMENT); gl.vertexAttribPointer(prog.attributes.aEuler, 3, gl.FLOAT, false, 0, pointFlower.eulerArrayOffset * Float32Array.BYTES_PER_ELEMENT); gl.vertexAttribPointer(prog.attributes.aMisc, 2, gl.FLOAT, false, 0, pointFlower.miscArrayOffset * Float32Array.BYTES_PER_ELEMENT); // doubler for(var i = 1; i < 2; i++) { var zpos = i * -2.0; pointFlower.offset[0] = pointFlower.area.x * -1.0; pointFlower.offset[1] = pointFlower.area.y * -1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); pointFlower.offset[0] = pointFlower.area.x * -1.0; pointFlower.offset[1] = pointFlower.area.y * 1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); pointFlower.offset[0] = pointFlower.area.x * 1.0; pointFlower.offset[1] = pointFlower.area.y * -1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); pointFlower.offset[0] = pointFlower.area.x * 1.0; pointFlower.offset[1] = pointFlower.area.y * 1.0; pointFlower.offset[2] = pointFlower.area.z * zpos; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); } //main pointFlower.offset[0] = 0.0; pointFlower.offset[1] = 0.0; pointFlower.offset[2] = 0.0; gl.uniform3fv(prog.uniforms.uOffset, pointFlower.offset); gl.drawArrays(gl.POINT, 0, pointFlower.numFlowers); gl.bindBuffer(gl.ARRAY_BUFFER, null); unuseShader(prog); gl.enable(gl.DEPTH_TEST); gl.disable(gl.BLEND); } // effects //common util function createEffectProgram(vtxsrc, frgsrc, exunifs, exattrs) { var ret = {}; var unifs = ['uResolution', 'uSrc', 'uDelta']; if(exunifs) { unifs = unifs.concat(exunifs); } var attrs = ['aPosition']; if(exattrs) { attrs = attrs.concat(exattrs); } ret.program = createShader(vtxsrc, frgsrc, unifs, attrs); useShader(ret.program); ret.dataArray = new Float32Array([ -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0 ]); ret.buffer = gl.createBuffer(); gl.bindBuffer(gl.ARRAY_BUFFER, ret.buffer); gl.bufferData(gl.ARRAY_BUFFER, ret.dataArray, gl.STATIC_DRAW); gl.bindBuffer(gl.ARRAY_BUFFER, null); unuseShader(ret.program); return ret; } // basic usage // useEffect(prog, srctex({'texture':texid, 'dtxArray':(f32)[dtx, dty]})); //basic initialize // gl.uniform**(...); //additional uniforms // drawEffect() // unuseEffect(prog) // TEXTURE0 makes src function useEffect(fxobj, srctex) { var prog = fxobj.program; useShader(prog); gl.uniform3fv(prog.uniforms.uResolution, renderSpec.array); if(srctex != null) { gl.uniform2fv(prog.uniforms.uDelta, srctex.dtxArray); gl.uniform1i(prog.uniforms.uSrc, 0); gl.activeTexture(gl.TEXTURE0); gl.bindTexture(gl.TEXTURE_2D, srctex.texture); } } function drawEffect(fxobj) { gl.bindBuffer(gl.ARRAY_BUFFER, fxobj.buffer); gl.vertexAttribPointer(fxobj.program.attributes.aPosition, 2, gl.FLOAT, false, 0, 0); gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4); } function unuseEffect(fxobj) { unuseShader(fxobj.program); } var effectLib = {}; function createEffectLib() { var vtxsrc, frgsrc; //common var cmnvtxsrc = document.getElementById(\"fx_common_vsh\").textContent; //background frgsrc = document.getElementById(\"bg_fsh\").textContent; effectLib.sceneBg = createEffectProgram(cmnvtxsrc, frgsrc, ['uTimes'], null); // make brightpixels buffer frgsrc = document.getElementById(\"fx_brightbuf_fsh\").textContent; effectLib.mkBrightBuf = createEffectProgram(cmnvtxsrc, frgsrc, null, null); // direction blur frgsrc = document.getElementById(\"fx_dirblur_r4_fsh\").textContent; effectLib.dirBlur = createEffectProgram(cmnvtxsrc, frgsrc, ['uBlurDir'], null); //final composite vtxsrc = document.getElementById(\"pp_final_vsh\").textContent; frgsrc = document.getElementById(\"pp_final_fsh\").textContent; effectLib.finalComp = createEffectProgram(vtxsrc, frgsrc, ['uBloom'], null); } // background function createBackground() { //console.log(\"create background\"); } function initBackground() { //console.log(\"init background\"); } function renderBackground() { gl.disable(gl.DEPTH_TEST); useEffect(effectLib.sceneBg, null); gl.uniform2f(effectLib.sceneBg.program.uniforms.uTimes, timeInfo.elapsed, timeInfo.delta); drawEffect(effectLib.sceneBg); unuseEffect(effectLib.sceneBg); gl.enable(gl.DEPTH_TEST); } // post process var postProcess = {}; function createPostProcess() { //console.log(\"create post process\"); } function initPostProcess() { //console.log(\"init post process\"); } function renderPostProcess() { gl.enable(gl.TEXTURE_2D); gl.disable(gl.DEPTH_TEST); var bindRT = function (rt, isclear) { gl.bindFramebuffer(gl.FRAMEBUFFER, rt.frameBuffer); gl.viewport(0, 0, rt.width, rt.height); if(isclear) { gl.clearColor(0, 0, 0, 0); gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); } }; //make bright buff bindRT(renderSpec.wHalfRT0, true); useEffect(effectLib.mkBrightBuf, renderSpec.mainRT); drawEffect(effectLib.mkBrightBuf); unuseEffect(effectLib.mkBrightBuf); // make bloom for(var i = 0; i < 2; i++) { var p = 1.5 + 1 * i; var s = 2.0 + 1 * i; bindRT(renderSpec.wHalfRT1, true); useEffect(effectLib.dirBlur, renderSpec.wHalfRT0); gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, p, 0.0, s, 0.0); drawEffect(effectLib.dirBlur); unuseEffect(effectLib.dirBlur); bindRT(renderSpec.wHalfRT0, true); useEffect(effectLib.dirBlur, renderSpec.wHalfRT1); gl.uniform4f(effectLib.dirBlur.program.uniforms.uBlurDir, 0.0, p, 0.0, s); drawEffect(effectLib.dirBlur); unuseEffect(effectLib.dirBlur); } //display gl.bindFramebuffer(gl.FRAMEBUFFER, null); gl.viewport(0, 0, renderSpec.width, renderSpec.height); gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); useEffect(effectLib.finalComp, renderSpec.mainRT); gl.uniform1i(effectLib.finalComp.program.uniforms.uBloom, 1); gl.activeTexture(gl.TEXTURE1); gl.bindTexture(gl.TEXTURE_2D, renderSpec.wHalfRT0.texture); drawEffect(effectLib.finalComp); unuseEffect(effectLib.finalComp); gl.enable(gl.DEPTH_TEST); } ///// var SceneEnv = {}; function createScene() { createEffectLib(); createBackground(); createPointFlowers(); createPostProcess(); sceneStandBy = true; } function initScene() { initBackground(); initPointFlowers(); initPostProcess(); //camera.position.z = 17.320508; camera.position.z = pointFlower.area.z + projection.nearfar[0]; projection.angle = Math.atan2(pointFlower.area.y, camera.position.z + pointFlower.area.z) * 180.0 / Math.PI * 2.0; Matrix44.loadProjection(projection.matrix, renderSpec.aspect, projection.angle, projection.nearfar[0], projection.nearfar[1]); } function renderScene() { //draw Matrix44.loadLookAt(camera.matrix, camera.position, camera.lookat, camera.up); gl.enable(gl.DEPTH_TEST); //gl.bindFramebuffer(gl.FRAMEBUFFER, null); gl.bindFramebuffer(gl.FRAMEBUFFER, renderSpec.mainRT.frameBuffer); gl.viewport(0, 0, renderSpec.mainRT.width, renderSpec.mainRT.height); gl.clearColor(0.005, 0, 0.05, 0); gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); renderBackground(); renderPointFlowers(); renderPostProcess(); } ///// function onResize(e) { makeCanvasFullScreen(document.getElementById(\"sakura\")); setViewports(); if(sceneStandBy) { initScene(); } } function setViewports() { renderSpec.setSize(gl.canvas.width, gl.canvas.height); gl.clearColor(0.2, 0.2, 0.5, 1.0); gl.viewport(0, 0, renderSpec.width, renderSpec.height); var rtfunc = function (rtname, rtw, rth) { var rt = renderSpec[rtname]; if(rt) deleteRenderTarget(rt); renderSpec[rtname] = createRenderTarget(rtw, rth); }; rtfunc('mainRT', renderSpec.width, renderSpec.height); rtfunc('wFullRT0', renderSpec.width, renderSpec.height); rtfunc('wFullRT1', renderSpec.width, renderSpec.height); rtfunc('wHalfRT0', renderSpec.halfWidth, renderSpec.halfHeight); rtfunc('wHalfRT1', renderSpec.halfWidth, renderSpec.halfHeight); } function render() { renderScene(); } var animating = true; function toggleAnimation(elm) { animating ^= true; if(animating) animate(); if(elm) { elm.innerHTML = animating? \"Stop\":\"Start\"; } } function stepAnimation() { if(!animating) animate(); } function animate() { var curdate = new Date(); timeInfo.elapsed = (curdate - timeInfo.start) / 1000.0; timeInfo.delta = (curdate - timeInfo.prev) / 1000.0; timeInfo.prev = curdate; if(animating) requestAnimationFrame(animate); render(); } function makeCanvasFullScreen(canvas) { var b = document.body; var d = document.documentElement; fullw = Math.max(b.clientWidth , b.scrollWidth, d.scrollWidth, d.clientWidth); fullh = Math.max(b.clientHeight , b.scrollHeight, d.scrollHeight, d.clientHeight); canvas.width = fullw; canvas.height = fullh; } window.addEventListener('load', function(e) { var canvas = document.getElementById(\"sakura\"); try { makeCanvasFullScreen(canvas); gl = canvas.getContext('experimental-webgl'); } catch(e) { alert(\"WebGL not supported.\" + e); console.error(e); return; } window.addEventListener('resize', onResize); setViewports(); createScene(); initScene(); timeInfo.start = new Date(); timeInfo.prev = timeInfo.start; animate(); }); //set window.requestAnimationFrame (function (w, r) { w['r'+r] = w['r'+r] || w['webkitR'+r] || w['mozR'+r] || w['msR'+r] || w['oR'+r] || function(c){ w.setTimeout(c, 1000 / 60); }; })(window, 'equestAnimationFrame');"},{"title":"404 Not Found：该页无法显示","date":"2016-09-27T03:31:01.000Z","updated":"2022-02-20T12:11:04.731Z","comments":true,"path":"/404.html","permalink":"https://ysluckly.github.io/404.html","excerpt":"","text":"很抱歉，您所访问的地址并不存在"},{"title":"","date":"2021-09-11T13:10:32.570Z","updated":"2021-09-11T13:10:32.570Z","comments":true,"path":"games/element/index.html","permalink":"https://ysluckly.github.io/games/element/index.html","excerpt":"","text":"3D元素周期表 | YSLIVING'S BLOG html, body { height: 100%; } body { background-color: #000000; margin: 0; font-family: Helvetica, sans-serif;; overflow: hidden; } a { color: #ffffff; } #info { position: absolute; width: 100%; color: #ffffff; padding: 5px; font-family: Monospace; font-size: 13px; font-weight: bold; text-align: center; z-index: 1; } #menu { position: absolute; bottom: 20px; width: 100%; text-align: center; font-family: verdana,Tahoma,Arial,Hei,\"Microsoft Yahei\",SimHei; } .element { width: 120px; height: 160px; box-shadow: 0px 0px 12px rgba(0,255,255,0.5); border: 1px solid rgba(127,255,255,0.25); text-align: center; cursor: default; } .element:hover { box-shadow: 0px 0px 12px rgba(0,255,255,0.75); border: 1px solid rgba(127,255,255,0.75); } .element .number { position: absolute; top: 20px; right: 20px; font-size: 12px; color: rgba(127,255,255,0.75); } .element .symbol { position: absolute; top: 40px; left: 0px; right: 0px; font-size: 60px; font-weight: bold; color: rgba(255,255,255,0.75); text-shadow: 0 0 10px rgba(0,255,255,0.95); } .element .details { position: absolute; bottom: 15px; left: 0px; right: 0px; font-size: 12px; color: rgba(127,255,255,0.75); } button { color: rgba(127,255,255,0.75); background: transparent; outline: 1px solid rgba(127,255,255,0.75); border: 0px; padding: 5px 10px; cursor: pointer; } button:hover { background-color: rgba(0,255,255,0.5); } button:active { color: #000000; background-color: rgba(0,255,255,0.75); } 表面 球体 螺旋 网格 var table = [ \"H\", \"Hydrogen\", \"1.00794\", 1, 1, \"He\", \"Helium\", \"4.002602\", 18, 1, \"Li\", \"Lithium\", \"#6.941\", 1, 2, \"Be\", \"Beryllium\", \"9.012182\", 2, 2, \"B\", \"Boron\", \"#10.811\", 13, 2, \"C\", \"Carbon\", \"#12.0107\", 14, 2, \"N\", \"Nitrogen\", \"#14.0067\", 15, 2, \"O\", \"Oxygen\", \"#15.9994\", 16, 2, \"F\", \"Fluorine\", \"18.9984032\", 17, 2, \"Ne\", \"Neon\", \"#20.1797\", 18, 2, \"Na\", \"Sodium\", \"22.98976...\", 1, 3, \"Mg\", \"Magnesium\", \"#24.305\", 2, 3, \"Al\", \"Aluminium\", \"26.9815386\", 13, 3, \"Si\", \"Silicon\", \"#28.0855\", 14, 3, \"P\", \"Phosphorus\", \"30.973762\", 15, 3, \"S\", \"Sulfur\", \"#32.065\", 16, 3, \"Cl\", \"Chlorine\", \"#35.453\", 17, 3, \"Ar\", \"Argon\", \"#39.948\", 18, 3, \"K\", \"Potassium\", \"#39.948\", 1, 4, \"Ca\", \"Calcium\", \"#40.078\", 2, 4, \"Sc\", \"Scandium\", \"44.955912\", 3, 4, \"Ti\", \"Titanium\", \"#47.867\", 4, 4, \"V\", \"Vanadium\", \"#50.9415\", 5, 4, \"Cr\", \"Chromium\", \"#51.9961\", 6, 4, \"Mn\", \"Manganese\", \"54.938045\", 7, 4, \"Fe\", \"Iron\", \"#55.845\", 8, 4, \"Co\", \"Cobalt\", \"58.933195\", 9, 4, \"Ni\", \"Nickel\", \"#58.6934\", 10, 4, \"Cu\", \"Copper\", \"#63.546\", 11, 4, \"Zn\", \"Zinc\", \"#65.38\", 12, 4, \"Ga\", \"Gallium\", \"#69.723\", 13, 4, \"Ge\", \"Germanium\", \"#72.63\", 14, 4, \"As\", \"Arsenic\", \"#74.9216\", 15, 4, \"Se\", \"Selenium\", \"#78.96\", 16, 4, \"Br\", \"Bromine\", \"#79.904\", 17, 4, \"Kr\", \"Krypton\", \"#83.798\", 18, 4, \"Rb\", \"Rubidium\", \"#85.4678\", 1, 5, \"Sr\", \"Strontium\", \"#87.62\", 2, 5, \"Y\", \"Yttrium\", \"88.90585\", 3, 5, \"Zr\", \"Zirconium\", \"#91.224\", 4, 5, \"Nb\", \"Niobium\", \"92.90628\", 5, 5, \"Mo\", \"Molybdenum\", \"#95.96\", 6, 5, \"Tc\", \"Technetium\", \"(98)\", 7, 5, \"Ru\", \"Ruthenium\", \"#101.07\", 8, 5, \"Rh\", \"Rhodium\", \"#102.9055\", 9, 5, \"Pd\", \"Palladium\", \"#106.42\", 10, 5, \"Ag\", \"Silver\", \"#107.8682\", 11, 5, \"Cd\", \"Cadmium\", \"#112.411\", 12, 5, \"In\", \"Indium\", \"#114.818\", 13, 5, \"Sn\", \"Tin\", \"#118.71\", 14, 5, \"Sb\", \"Antimony\", \"#121.76\", 15, 5, \"Te\", \"Tellurium\", \"127.6\", 16, 5, \"I\", \"Iodine\", \"126.90447\", 17, 5, \"Xe\", \"Xenon\", \"#131.293\", 18, 5, \"Cs\", \"Caesium\", \"#132.9054\", 1, 6, \"Ba\", \"Barium\", \"#132.9054\", 2, 6, \"La\", \"Lanthanum\", \"138.90547\", 4, 9, \"Ce\", \"Cerium\", \"#140.116\", 5, 9, \"Pr\", \"Praseodymium\", \"140.90765\", 6, 9, \"Nd\", \"Neodymium\", \"#144.242\", 7, 9, \"Pm\", \"Promethium\", \"(145)\", 8, 9, \"Sm\", \"Samarium\", \"#150.36\", 9, 9, \"Eu\", \"Europium\", \"#151.964\", 10, 9, \"Gd\", \"Gadolinium\", \"#157.25\", 11, 9, \"Tb\", \"Terbium\", \"158.92535\", 12, 9, \"Dy\", \"Dysprosium\", \"162.5\", 13, 9, \"Ho\", \"Holmium\", \"164.93032\", 14, 9, \"Er\", \"Erbium\", \"#167.259\", 15, 9, \"Tm\", \"Thulium\", \"168.93421\", 16, 9, \"Yb\", \"Ytterbium\", \"#173.054\", 17, 9, \"Lu\", \"Lutetium\", \"#174.9668\", 18, 9, \"Hf\", \"Hafnium\", \"#178.49\", 4, 6, \"Ta\", \"Tantalum\", \"180.94788\", 5, 6, \"W\", \"Tungsten\", \"#183.84\", 6, 6, \"Re\", \"Rhenium\", \"#186.207\", 7, 6, \"Os\", \"Osmium\", \"#190.23\", 8, 6, \"Ir\", \"Iridium\", \"#192.217\", 9, 6, \"Pt\", \"Platinum\", \"#195.084\", 10, 6, \"Au\", \"Gold\", \"196.966569\", 11, 6, \"Hg\", \"Mercury\", \"#200.59\", 12, 6, \"Tl\", \"Thallium\", \"#204.3833\", 13, 6, \"Pb\", \"Lead\", \"207.2\", 14, 6, \"Bi\", \"Bismuth\", \"#208.9804\", 15, 6, \"Po\", \"Polonium\", \"(209)\", 16, 6, \"At\", \"Astatine\", \"(210)\", 17, 6, \"Rn\", \"Radon\", \"(222)\", 18, 6, \"Fr\", \"Francium\", \"(223)\", 1, 7, \"Ra\", \"Radium\", \"(226)\", 2, 7, \"Ac\", \"Actinium\", \"(227)\", 4, 10, \"Th\", \"Thorium\", \"232.03806\", 5, 10, \"Pa\", \"Protactinium\", \"#231.0588\", 6, 10, \"U\", \"Uranium\", \"238.02891\", 7, 10, \"Np\", \"Neptunium\", \"(237)\", 8, 10, \"Pu\", \"Plutonium\", \"(244)\", 9, 10, \"Am\", \"Americium\", \"(243)\", 10, 10, \"Cm\", \"Curium\", \"(247)\", 11, 10, \"Bk\", \"Berkelium\", \"(247)\", 12, 10, \"Cf\", \"Californium\", \"(251)\", 13, 10, \"Es\", \"Einstenium\", \"(252)\", 14, 10, \"Fm\", \"Fermium\", \"(257)\", 15, 10, \"Md\", \"Mendelevium\", \"(258)\", 16, 10, \"No\", \"Nobelium\", \"(259)\", 17, 10, \"Lr\", \"Lawrencium\", \"(262)\", 18, 10, \"Rf\", \"Rutherfordium\", \"(267)\", 4, 7, \"Db\", \"Dubnium\", \"(268)\", 5, 7, \"Sg\", \"Seaborgium\", \"(271)\", 6, 7, \"Bh\", \"Bohrium\", \"(272)\", 7, 7, \"Hs\", \"Hassium\", \"(270)\", 8, 7, \"Mt\", \"Meitnerium\", \"(276)\", 9, 7, \"Ds\", \"Darmstadium\", \"(281)\", 10, 7, \"Rg\", \"Roentgenium\", \"(280)\", 11, 7, \"Cn\", \"Copernicium\", \"(285)\", 12, 7, \"Uut\", \"Unutrium\", \"(284)\", 13, 7, \"Fl\", \"Flerovium\", \"(289)\", 14, 7, \"Uup\", \"Ununpentium\", \"(288)\", 15, 7, \"Lv\", \"Livermorium\", \"(293)\", 16, 7, \"Uus\", \"Ununseptium\", \"(294)\", 17, 7, \"Uuo\", \"Ununoctium\", \"(294)\", 18, 7 ]; var camera, scene, renderer; var controls; var objects = []; var targets = { table: [], sphere: [], helix: [], grid: [] }; init(); animate(); function init() { camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 10000 ); camera.position.z = 3000; scene = new THREE.Scene(); // table for ( var i = 0; i < table.length; i += 5 ) { var element = document.createElement( 'div' ); element.className = 'element'; element.style.backgroundColor = 'rgba(0,127,127,' + ( Math.random() * 0.5 + 0.25 ) + ')'; var number = document.createElement( 'div' ); number.className = 'number'; number.textContent = (i/5) + 1; element.appendChild( number ); var symbol = document.createElement( 'div' ); symbol.className = 'symbol'; symbol.textContent = table[ i ]; element.appendChild( symbol ); var details = document.createElement( 'div' ); details.className = 'details'; details.innerHTML = table[ i + 1 ] + '' + table[ i + 2 ]; element.appendChild( details ); var object = new THREE.CSS3DObject( element ); object.position.x = Math.random() * 4000 - 2000; object.position.y = Math.random() * 4000 - 2000; object.position.z = Math.random() * 4000 - 2000; scene.add( object ); objects.push( object ); // var object = new THREE.Object3D(); object.position.x = ( table[ i + 3 ] * 140 ) - 1330; object.position.y = - ( table[ i + 4 ] * 180 ) + 990; targets.table.push( object ); } // sphere var vector = new THREE.Vector3(); for ( var i = 0, l = objects.length; i < l; i ++ ) { var phi = Math.acos( -1 + ( 2 * i ) / l ); var theta = Math.sqrt( l * Math.PI ) * phi; var object = new THREE.Object3D(); object.position.x = 800 * Math.cos( theta ) * Math.sin( phi ); object.position.y = 800 * Math.sin( theta ) * Math.sin( phi ); object.position.z = 800 * Math.cos( phi ); vector.copy( object.position ).multiplyScalar( 2 ); object.lookAt( vector ); targets.sphere.push( object ); } // helix var vector = new THREE.Vector3(); for ( var i = 0, l = objects.length; i < l; i ++ ) { var phi = i * 0.175 + Math.PI; var object = new THREE.Object3D(); object.position.x = 900 * Math.sin( phi ); object.position.y = - ( i * 8 ) + 450; object.position.z = 900 * Math.cos( phi ); vector.x = object.position.x * 2; vector.y = object.position.y; vector.z = object.position.z * 2; object.lookAt( vector ); targets.helix.push( object ); } // grid for ( var i = 0; i < objects.length; i ++ ) { var object = new THREE.Object3D(); object.position.x = ( ( i % 5 ) * 400 ) - 800; object.position.y = ( - ( Math.floor( i / 5 ) % 5 ) * 400 ) + 800; object.position.z = ( Math.floor( i / 25 ) ) * 1000 - 2000; targets.grid.push( object ); } // renderer = new THREE.CSS3DRenderer(); renderer.setSize( window.innerWidth, window.innerHeight ); renderer.domElement.style.position = 'absolute'; document.getElementById( 'container' ).appendChild( renderer.domElement ); // controls = new THREE.TrackballControls( camera, renderer.domElement ); controls.rotateSpeed = 0.5; controls.minDistance = 500; controls.maxDistance = 6000; controls.addEventListener( 'change', render ); var button = document.getElementById( 'table' ); button.addEventListener( 'click', function ( event ) { transform( targets.table, 2000 ); }, false ); var button = document.getElementById( 'sphere' ); button.addEventListener( 'click', function ( event ) { transform( targets.sphere, 2000 ); }, false ); var button = document.getElementById( 'helix' ); button.addEventListener( 'click', function ( event ) { transform( targets.helix, 2000 ); }, false ); var button = document.getElementById( 'grid' ); button.addEventListener( 'click', function ( event ) { transform( targets.grid, 2000 ); }, false ); transform( targets.table, 5000 ); // window.addEventListener( 'resize', onWindowResize, false ); } function transform( targets, duration ) { TWEEN.removeAll(); for ( var i = 0; i < objects.length; i ++ ) { var object = objects[ i ]; var target = targets[ i ]; new TWEEN.Tween( object.position ) .to( { x: target.position.x, y: target.position.y, z: target.position.z }, Math.random() * duration + duration ) .easing( TWEEN.Easing.Exponential.InOut ) .start(); new TWEEN.Tween( object.rotation ) .to( { x: target.rotation.x, y: target.rotation.y, z: target.rotation.z }, Math.random() * duration + duration ) .easing( TWEEN.Easing.Exponential.InOut ) .start(); } new TWEEN.Tween( this ) .to( {}, duration * 2 ) .onUpdate( render ) .start(); } function onWindowResize() { camera.aspect = window.innerWidth / window.innerHeight; camera.updateProjectionMatrix(); renderer.setSize( window.innerWidth, window.innerHeight ); render(); } function animate() { requestAnimationFrame( animate ); TWEEN.update(); controls.update(); } function render() { renderer.render( scene, camera ); } document.onkeydown=function (e){ var currKey=0,evt=e||window.event; currKey=evt.keyCode||evt.which||evt.charCode; if (currKey == 123) { window.event.cancelBubble = true; window.event.returnValue = false; } }"},{"title":"","date":"2021-09-16T17:15:44.184Z","updated":"2021-09-16T17:15:44.184Z","comments":true,"path":"games/gobang/index.html","permalink":"https://ysluckly.github.io/games/gobang/index.html","excerpt":"","text":"五子棋 |YSLIVING'S BLOG canvas { display: block; margin: 60px auto; box-shadow: -2px -2px 2px #efefef, 5px 5px 5px #b9b9b9; cursor: pointer; } .btn-wrap { display: flex; flex-direction: row; justify-content: center; } .btn-wrap div { margin: 0 10px; } div>span { display: inline-block; padding: 10px 20px; color: #fff; background-color: #6496ED; border-radius: 5px; cursor: pointer; } div.unable span { background: #D6D6D4; color: #adacaa; } #result-wrap { text-align: center; margin:50px 0 0 0; } #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(0,0,0,.5);font-style:normal} #footer a{color:rgba(0,0,0,.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} 人机五子棋对弈 重新开始 悔棋 撤销悔棋 var over = false; var me = true; //我 var _nowi = 0, _nowj = 0; //记录自己下棋的坐标 var _compi = 0, _compj = 0; //记录计算机当前下棋的坐标 var _myWin = [], _compWin = []; //记录我，计算机赢的情况 var backAble = false, returnAble = false; var resultTxt = document.getElementById('result-wrap'); var chressBord = []; //棋盘 for (var i = 0; i < 15; i++) { chressBord[i] = []; for (var j = 0; j < 15; j++) { chressBord[i][j] = 0; } } //赢法的统计数组 var myWin = []; var computerWin = []; //赢法数组 var wins = []; for (var i = 0; i < 15; i++) { wins[i] = []; for (var j = 0; j < 15; j++) { wins[i][j] = []; } } var count = 0; //赢法总数 //横线赢法 for (var i = 0; i < 15; i++) { for (var j = 0; j < 11; j++) { for (var k = 0; k < 5; k++) { wins[i][j + k][count] = true; } count++; } } //竖线赢法 for (var i = 0; i < 15; i++) { for (var j = 0; j < 11; j++) { for (var k = 0; k < 5; k++) { wins[j + k][i][count] = true; } count++; } } //正斜线赢法 for (var i = 0; i < 11; i++) { for (var j = 0; j < 11; j++) { for (var k = 0; k < 5; k++) { wins[i + k][j + k][count] = true; } count++; } } //反斜线赢法 for (var i = 0; i < 11; i++) { for (var j = 14; j > 3; j--) { for (var k = 0; k < 5; k++) { wins[i + k][j - k][count] = true; } count++; } } // debugger; for (var i = 0; i < count; i++) { myWin[i] = 0; _myWin[i] = 0; computerWin[i] = 0; _compWin[i] = 0; } var chess = document.getElementById(\"chess\"); var context = chess.getContext('2d'); context.strokeStyle = '#bfbfbf'; //边框颜色 var backbtn = document.getElementById(\"goback\"); var returnbtn = document.getElementById(\"return\"); window.onload = function () { drawChessBoard(); // 画棋盘 } document.getElementById(\"restart\").onclick = function () { window.location.reload(); } // 我，下棋 chess.onclick = function (e) { if (over) { return; } if (!me) { return; } // 悔棋功能可用 backbtn.className = backbtn.className.replace(new RegExp(\"(\\\\s|^)unable(\\\\s|$)\"), \" \"); var x = e.offsetX; var y = e.offsetY; var i = Math.floor(x / 30); var j = Math.floor(y / 30); _nowi = i; _nowj = j; if (chressBord[i][j] == 0) { oneStep(i, j, me); chressBord[i][j] = 1; //我，已占位置 for (var k = 0; k < count; k++) { // 将可能赢的情况都加1 if (wins[i][j][k]) { // debugger; myWin[k]++; _compWin[k] = computerWin[k]; computerWin[k] = 6; //这个位置对方不可能赢了 if (myWin[k] == 5) { // window.alert('你赢了'); resultTxt.innerHTML = '恭喜，你赢了！'; over = true; } } } if (!over) { me = !me; computerAI(); } } } // 悔棋 backbtn.onclick = function (e) { if (!backAble) { return; } over = false; me = true; // resultTxt.innerHTML = 'emmmm，悔棋中'; // 撤销悔棋功能可用 returnbtn.className = returnbtn.className.replace(new RegExp(\"(\\\\s|^)unable(\\\\s|$)\"), \" \"); // 我，悔棋 chressBord[_nowi][_nowj] = 0; //我，已占位置 还原 minusStep(_nowi, _nowj); //销毁棋子 for (var k = 0; k < count; k++) { // 将可能赢的情况都减1 if (wins[_nowi][_nowj][k]) { myWin[k]--; computerWin[k] = _compWin[k]; //这个位置对方可能赢 } }// 计算机相应的悔棋 chressBord[_compi][_compj] = 0; //计算机，已占位置 还原 minusStep(_compi, _compj); //销毁棋子 for (var k = 0; k < count; k++) { // 将可能赢的情况都减1 if (wins[_compi][_compj][k]) { computerWin[k]--; myWin[k] = _myWin[i]; //这个位置对方可能赢 } } resultTxt.innerHTML = '--人机五子棋--'; returnAble = true; backAble = false; } // 撤销悔棋 returnbtn.onclick = function (e) { if (!returnAble) { return; } // 我，撤销悔棋 chressBord[_nowi][_nowj] = 1; //我，已占位置 oneStep(_nowi, _nowj, me); for (var k = 0; k < count; k++) { if (wins[_nowi][_nowj][k]) { myWin[k]++; _compWin[k] = computerWin[k]; computerWin[k] = 6; //这个位置对方不可能赢 } if (myWin[k] == 5) { resultTxt.innerHTML = '恭喜，你赢了！'; over = true; } }// 计算机撤销相应的悔棋 chressBord[_compi][_compj] = 2; //计算机，已占位置 oneStep(_compi, _compj, false); for (var k = 0; k < count; k++) { // 将可能赢的情况都减1 if (wins[_compi][_compj][k]) { computerWin[k]++; _myWin[k] = myWin[k]; myWin[k] = 6; //这个位置对方不可能赢 } if (computerWin[k] == 5) { resultTxt.innerHTML = '很遗憾，计算机赢了，继续加油哦！'; over = true; } } returnbtn.className += ' ' + 'unable'; returnAble = false; backAble = true; } // 计算机下棋 var computerAI = function () { var myScore = []; var computerScore = []; var max = 0; var u = 0, v = 0; for (var i = 0; i < 15; i++) { myScore[i] = []; computerScore[i] = []; for (var j = 0; j < 15; j++) { myScore[i][j] = 0; computerScore[i][j] = 0; } } for (var i = 0; i < 15; i++) { for (var j = 0; j < 15; j++) { if (chressBord[i][j] == 0) { for (var k = 0; k < count; k++) { if (wins[i][j][k]) { if (myWin[k] == 1) { myScore[i][j] += 200; } else if (myWin[k] == 2) { myScore[i][j] += 400; } else if (myWin[k] == 3) { myScore[i][j] += 2000; } else if (myWin[k] == 4) { myScore[i][j] += 10000; } if (computerWin[k] == 1) { computerScore[i][j] += 220; } else if (computerWin[k] == 2) { computerScore[i][j] += 420; } else if (computerWin[k] == 3) { computerScore[i][j] += 2100; } else if (computerWin[k] == 4) { computerScore[i][j] += 20000; } } } if (myScore[i][j] > max) { max = myScore[i][j]; u = i; v = j; } else if (myScore[i][j] == max) { if (computerScore[i][j] > computerScore[u][v]) { u = i; v = j; } } if (computerScore[i][j] > max) { max = computerScore[i][j]; u = i; v = j; } else if (computerScore[i][j] == max) { if (myScore[i][j] > myScore[u][v]) { u = i; v = j; } } } } } _compi = u; _compj = v; oneStep(u, v, false); chressBord[u][v] = 2;//计算机占据位置 for (var k = 0; k < count; k++) { if (wins[u][v][k]) { computerWin[k]++; _myWin[k] = myWin[k]; myWin[k] = 6; //这个位置对方不可能赢了 if (computerWin[k] == 5) { resultTxt.innerHTML = '很遗憾，计算机赢了，继续加油哦！'; over = true; } } } if (!over) { me = !me; } backAble = true; returnAble = false; var hasClass = new RegExp('unable').test(' ' + returnbtn.className + ' '); if (!hasClass) { returnbtn.className += ' ' + 'unable'; } } //绘画棋盘 var drawChessBoard = function () { for (var i = 0; i < 15; i++) { context.moveTo(15 + i * 30, 15); context.lineTo(15 + i * 30, 435); context.stroke(); context.moveTo(15, 15 + i * 30); context.lineTo(435, 15 + i * 30); context.stroke(); } } //画棋子 var oneStep = function (i, j, me) { context.beginPath(); context.arc(15 + i * 30, 15 + j * 30, 13, 0, 2 * Math.PI); // 画圆 context.closePath(); //渐变 var gradient = context.createRadialGradient(15 + i * 30 + 2, 15 + j * 30 - 2, 13, 15 + i * 30 + 2, 15 + j * 30 - 2, 0); if (me) { gradient.addColorStop(0, '#0a0a0a'); gradient.addColorStop(1, '#636766'); } else { gradient.addColorStop(0, '#d1d1d1'); gradient.addColorStop(1, '#f9f9f9'); } context.fillStyle = gradient; context.fill(); } //销毁棋子 var minusStep = function (i, j) { //擦除该圆 context.clearRect((i) * 30, (j) * 30, 30, 30); // 重画该圆周围的格子 context.beginPath(); context.moveTo(15 + i * 30, j * 30); context.lineTo(15 + i * 30, j * 30 + 30); context.moveTo(i * 30, j * 30 + 15); context.lineTo((i + 1) * 30, j * 30 + 15); context.stroke(); } Copyright&nbsp;©&nbsp;2020-至今&nbsp;YSLIVING'S HOME&nbsp;|&nbsp; &nbsp; 沪ICP备1******8号-X&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 document.onkeydown=function (e){ var currKey=0,evt=e||window.event; currKey=evt.keyCode||evt.which||evt.charCode; if (currKey == 123) { window.event.cancelBubble = true; window.event.returnValue = false; } }"},{"title":"","date":"2021-09-16T17:16:13.716Z","updated":"2021-09-16T17:16:13.715Z","comments":true,"path":"games/PacMan/index.html","permalink":"https://ysluckly.github.io/games/PacMan/index.html","excerpt":"","text":"吃豆人 |YSLIVING'S BLOG body{background-color: #000} *{padding:0;margin:0;} .wrapper{ width: 960px; margin:0 auto; line-height:36px; text-align:center; color:#999; } canvas{display:block;background: #000;} .mod-botton{ height: 32px; padding: 15px 0; text-align: center; } #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(255, 255, 255, 0.5);font-style:normal} #footer a{color:rgba(255, 255, 255, 0.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} 不支持画布 【按空格键开始、暂停或继续游戏，方向键移动吃豆人】 Copyright&nbsp;©&nbsp;2020-至今&nbsp;YSLIVING'S HOME&nbsp;|&nbsp; &nbsp; 沪ICP备1******8号-X&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 document.onkeydown=function (e){ var currKey=0,evt=e||window.event; currKey=evt.keyCode||evt.which||evt.charCode; if (currKey == 123) { window.event.cancelBubble = true; window.event.returnValue = false; } }"},{"title":"","date":"2021-09-16T17:16:46.968Z","updated":"2021-09-16T17:16:46.968Z","comments":true,"path":"games/piano/index.html","permalink":"https://ysluckly.github.io/games/piano/index.html","excerpt":"","text":"网页版钢琴 | YSLIVING'S BLOG 网页版钢琴 qaz sx dc rfv gb hn jm ik, w e t y u 弹奏方法 使用鼠标左键点击钢琴键，或者键入钢琴键上输入的键盘字母。 Copyright&nbsp;©&nbsp;2020-至今&nbsp;YSLIVING'S HOME&nbsp;|&nbsp; &nbsp; 沪ICP备1******8号-X&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 document.onkeydown=function (e){ var currKey=0,evt=e||window.event; currKey=evt.keyCode||evt.which||evt.charCode; if (currKey == 123) { window.event.cancelBubble = true; window.event.returnValue = false; } }"},{"title":"","date":"2021-09-16T17:14:39.317Z","updated":"2021-09-16T17:14:39.317Z","comments":true,"path":"games/cat/index.html","permalink":"https://ysluckly.github.io/games/cat/index.html","excerpt":"","text":"圈小猫 | YSLIVING'S BLOG body {background-color: #eeeeee} #catch-the-cat {width: 100%;text-align: center;} #footer{position:relative;clear:both;padding:10px 20px 40px 0;padding:10px 0;width:100%;text-align:center}#footer address{display:inline-block;padding:2px 10px;color:rgba(0,0,0,.5);font-style:normal} #footer a{color:rgba(0,0,0,.5);cursor:grab}#footer a:hover{border-bottom:1px dotted #00387d;color:#00387d} 游戏：《圈小猫》 window.game = new CatchTheCatGame({ w: 11, h: 11, r: 20, backgroundColor: 0xffffff, parent: 'catch-the-cat', statusBarAlign: 'center', credit: '码农印象' }); Copyright&nbsp;©&nbsp;2020-至今&nbsp;YSLIVING'S HOME&nbsp;|&nbsp; &nbsp; 沪ICP备1******8号-X&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 document.onkeydown=function (e){ var currKey=0,evt=e||window.event; currKey=evt.keyCode||evt.which||evt.charCode; if (currKey == 123) { window.event.cancelBubble = true; window.event.returnValue = false; } }"},{"title":"","date":"2021-09-16T17:14:10.679Z","updated":"2021-09-16T17:14:10.679Z","comments":true,"path":"games/2048/index.html","permalink":"https://ysluckly.github.io/games/2048/index.html","excerpt":"","text":"2048 | ysliving's home 2048 使用方向键操作 New Game score:0 GAME OVER Copyright&nbsp;©&nbsp;2020-至今&nbsp;YSLIVING'S HOME&nbsp;|&nbsp; &nbsp; 沪ICP备1******8号-X&nbsp;|&nbsp; 中国互联网违法和不良信息举报中心 推荐使用1920*1080分辨率、谷歌或者火狐浏览器浏览此页&nbsp;|&nbsp; 996.ICU&nbsp;|&nbsp; 申请友链&nbsp;|&nbsp; Powered By Hexo&nbsp;|&nbsp; Hosted By GitHub Pages 部分资料来源于网络，版权属于其合法持有人，只供学习交流之用，非商务用途。如有侵犯您的权益，请及时告知删除。互动交流时请遵守理性，宽容，换位思考的原则。 document.onkeydown=function (e){ var currKey=0,evt=e||window.event; currKey=evt.keyCode||evt.which||evt.charCode; if (currKey == 123) { window.event.cancelBubble = true; window.event.returnValue = false; } }"}],"posts":[{"title":"休闲娱乐-小游戏","slug":"game","date":"2022-02-01T17:00:10.000Z","updated":"2022-02-20T11:58:02.073Z","comments":true,"path":"2022/02/02/undefined/","link":"","permalink":"https://ysluckly.github.io/2022/02/02/undefined/","excerpt":"","text":"休闲小游戏是小游戏的一种。一般都是在看技术博客累的时候玩的，后来发展成网页游戏。并成为网络游戏集，并加以利用加入网络等元素，可以和网友进行比拼，使得休闲小游戏得以发展。 ①、2048-小游戏 | 点击进入…②、五子棋- 小游戏 | 点击进入…③、圈小猫-小游戏 | 点击进入…④、3D元素周期表-小游戏 | 点击进入…⑤、弹钢琴-小游戏 | 点击进入…⑥、吃豆人-小游戏 | 点击进入…","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"game","slug":"game","permalink":"https://ysluckly.github.io/tags/game/"}]},{"title":"SpringCloud系列之接入SkyWalking进行链路追踪和日志收集","slug":"back-end/k8s-springcloud-skywalking","date":"2021-09-26T10:08:00.000Z","updated":"2022-02-19T09:27:58.480Z","comments":true,"path":"2021/09/26/spring-cloud-skywalking/","link":"","permalink":"https://ysluckly.github.io/2021/09/26/spring-cloud-skywalking/","excerpt":"","text":"前言前一段时间一直在研究升级公司项目的架构，在不断学习和试错后，最终确定了一套基于 k8s 的高可用架构体系，未来几期会将这套架构体系的架设过程和注意事项以系列文章的形式分享出来，敬请期待！ 由于集群和分布式规模的扩大，对微服务链路的监控和日志收集，越来越有必要性，所以在筛选了了一些方案后，发现 SkyWalking 完美符合我们的预期，对链路追踪和日志收集都有不错的实现。 SkyWalking 简介SkyWalking 是一款 APM（应用程序监控）系统，转为微服务、云原生、基于容器的架构而设计。主要包含了一下核心功能 对服务、运行实例、API进行指标分析 链路检测，检查缓慢的服务和API 对基础设施（VM、网络、磁盘、数据库）进行监控 对超出阈值的情况进行警报 等等 开源地址：apache&#x2F;skywalking 官网：Apache SkyWalking SpringCloud 整合 SkyWalking1. 搭建 SkyWalking 服务在使用 SkyWalking 进行链路追踪和日志收集之前，需要先搭建起一套 SkyWalking 的服务，然后才能通过 agent 将 SpringCloud 的运行状态和日志发送给 SkyWalking 进行解析和展示。 SkyWalking 的搭建方式有很多中，我这里介绍两种 docker-compose（非高可用，快速启动，方便测试、学习） 和 k8s（高可用、生产级别） docker-compose 的方式docker 和 docker-compose 的安装不是本文的重点，所以有需要可以自行查询。 以下操作会启动三个容器 elasticsearch 作为 skywalking 的存储，保存链路和日志数据等 oap 数据接收和分析 Observability Analysis Platform ui web端的数据展示 # 创建配置文件保存的目录 mkdir -p /data/docker/admin/skywalking # 切换到刚创建的目录 cd /data/docker/admin/skywalking # 将下面的 docker-compose.yml 文件保存到这个目录 vi docker-compose.yml # 拉去镜像并启动 docker-compose up -d # 查看日志 docker-compose logs -f docker-compose.yml version: &#39;3.8&#39; services: elasticsearch: image: docker.elastic.co/elasticsearch/elasticsearch:7.14.1 container_name: elasticsearch restart: always ports: - 9200:9200 healthcheck: test: [&quot;CMD-SHELL&quot;, &quot;curl --silent --fail localhost:9200/_cluster/health || exit 1&quot;] interval: 30s timeout: 10s retries: 3 start_period: 40s environment: - discovery.type=single-node - bootstrap.memory_lock=true - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot; - TZ=Asia/Shanghai ulimits: memlock: soft: -1 hard: -1 oap: image: apache/skywalking-oap-server:8.7.0-es7 container_name: oap depends_on: - elasticsearch links: - elasticsearch restart: always ports: - 11800:11800 - 12800:12800 healthcheck: test: [&quot;CMD-SHELL&quot;, &quot;/skywalking/bin/swctl&quot;] interval: 30s timeout: 10s retries: 3 start_period: 40s environment: TZ: Asia/Shanghai SW_STORAGE: elasticsearch7 SW_STORAGE_ES_CLUSTER_NODES: elasticsearch:9200 ui: image: apache/skywalking-ui:8.7.0 container_name: ui depends_on: - oap links: - oap restart: always ports: - 8088:8080 environment: TZ: Asia/Shanghai SW_OAP_ADDRESS: http://oap:12800 启动之后浏览器访问 服务ip:8080 即可 k8s等待更新。。 2. 下载 agent 代理包点击链接进行下载，skywalking-apm-8.7 其他版本可以看 apache 归档站，找到对应版本的 .tar.gz 后缀的包，进行下载 通过命令或者软件进行解压 tar -zxvf apache-skywalking-apm-8.7.0.tar.gz 3. java 命令使用代码启动 jar 包springcloud&#x2F;springboot 一般是通过 java -jar xxx.jar 进行启动。我们只需要在其中加上 -javaagent 参数即可，如下 其中 自定义服务名 可以改为应用名 如 lemes-auth，服务ip 为第一步搭建的 SkyWalking 服务的ip，端口11800 为启动的 oap 这个容器的端口 java -javaagent:上一步解压目录/agent/skywalking-agent.jar=agent.service_name=自定义服务名,collector.backend_service=服务ip:11800 -jar xx.jar 执行命令启动后，访问以下接口，就可以在第一步 服务ip:8080 中看到访问的链接和调用链路。 4. 开启日志收集本文主要以 log4j2 来介绍，其他的大同小异，可以网上找教程。SpringCloud 集成 log4j2 不是本文重点，所以请自行 Google。 引入依赖要开启日志收集，必须要添加依赖，如下 &lt;dependency&gt; &lt;groupId&gt;org.apache.skywalking&lt;/groupId&gt; &lt;artifactId&gt;apm-toolkit-log4j-2.x&lt;/artifactId&gt; &lt;version&gt;8.7.0&lt;/version&gt; &lt;/dependency&gt; 修改 log4j2.xml需要修改 log4j2.xml 主要添加下面两个关键点 添加 %traceId 来打印 traceid 声明 GRPCLogClientAppender 完整内容如下 &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;!--日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt; &lt;!-- Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时， 你会看到log4j2内部各种详细输出。可以设置成OFF(关闭) 或 Error(只输出错误信息)。 --&gt; &lt;!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数--&gt; &lt;configuration status=&quot;WARN&quot; monitorInterval=&quot;30&quot;&gt; &lt;Properties&gt; &lt;Property name=&quot;log.path&quot;&gt;logs/lemes-auth&lt;/Property&gt; &lt;Property name=&quot;logging.lemes.pattern&quot;&gt; %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%-5level] [%traceId] [%logger&#123;50&#125;.%M:%L] - %msg%n &lt;/Property&gt; &lt;/Properties&gt; &lt;Appenders&gt; &lt;!-- 输出控制台日志的配置 --&gt; &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt; &lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）--&gt; &lt;ThresholdFilter level=&quot;debug&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt; &lt;!-- 输出日志的格式 --&gt; &lt;PatternLayout pattern=&quot;$&#123;logging.lemes.pattern&#125;&quot;/&gt; &lt;/Console&gt; &lt;RollingRandomAccessFile name=&quot;debugRollingFile&quot; fileName=&quot;$&#123;log.path&#125;/debug.log&quot; filePattern=&quot;$&#123;log.path&#125;/debug/$$&#123;date:yyyy-MM&#125;/debug.%d&#123;yyyy-MM-dd&#125;-%i.log.gz&quot;&gt; &lt;ThresholdFilter level=&quot;debug&quot; onMatch=&quot;ACCEPT&quot; onMismatch=&quot;DENY&quot;/&gt; &lt;PatternLayout charset=&quot;UTF-8&quot; pattern=&quot;$&#123;logging.lemes.pattern&#125;&quot;/&gt; &lt;Policies&gt; &lt;TimeBasedTriggeringPolicy interval=&quot;1&quot;/&gt; &lt;SizeBasedTriggeringPolicy size=&quot;100 MB&quot;/&gt; &lt;/Policies&gt; &lt;DefaultRolloverStrategy max=&quot;30&quot;/&gt; &lt;/RollingRandomAccessFile&gt; &lt;GRPCLogClientAppender name=&quot;grpc-log&quot;&gt; &lt;PatternLayout pattern=&quot;$&#123;logging.lemes.pattern&#125;&quot;/&gt; &lt;/GRPCLogClientAppender&gt; &lt;/Appenders&gt; &lt;Loggers&gt; &lt;!-- ALL &lt; TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL &lt; OFF --&gt; &lt;Logger name=&quot;com.lenovo.lemes&quot; level=&quot;debug&quot;/&gt; &lt;Logger name=&quot;org.apache.kafka&quot; level=&quot;warn&quot;/&gt; &lt;Root level=&quot;info&quot;&gt; &lt;AppenderRef ref=&quot;Console&quot;/&gt; &lt;AppenderRef ref=&quot;debugRollingFile&quot;/&gt; &lt;AppenderRef ref=&quot;grpc-log&quot;/&gt; &lt;/Root&gt; &lt;/Loggers&gt; &lt;/configuration&gt; 启动命令中声明上报日志在上一步的 agent 中添加上报日志的参数 plugin.toolkit.log.grpc.reporter.server_host=服务ip,plugin.toolkit.log.grpc.reporter.server_port=11800 完整如下 java -javaagent:上一步解压目录/agent/skywalking-agent.jar=agent.service_name=自定义服务名,collector.backend_service=服务ip:11800,plugin.toolkit.log.grpc.reporter.server_host=服务ip,plugin.toolkit.log.grpc.reporter.server_port=11800 -jar xx.jar 日志收集效果这样启动日志中就会打印 traceid , N/A 代表的是非请求的日志，有 traceid 的为 api 请求日志 在 skywalking 中就能看到我们上报的日志 重点：SkyWalking 可以在链路追踪中查看当前请求的所有日志（不同实例&#x2F;模块） 5. 兼容 spring-cloud-gateway经过上面的步骤之后，链路已经搭建完成，查看发现了一个问题，gateway 模块的 traceId 和 业务模块的 traceId 不统一。 这是由于 SkyWalking 对于 spring-cloud-gateway 的支持不是默认的，所以需要将 agent/optional-plugins/apm-spring-cloud-gateway-2.1.x-plugin-8.7.0.jar 复制到 agent/plugins 下，然后重启即可。 最后SkyWalking 上面这两个功能就已经非常强大，能够有效帮助我们优化我们的程序，监控系统的问题，并及时报警。日志收集也解决的在大规模分布式集群下日志查询难的问题。 SkyWalking 还支持 VM、浏览器、k8s等监控，后续如果有实践，将会逐步更新。","categories":[{"name":"后端","slug":"后端","permalink":"https://ysluckly.github.io/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"java","slug":"java","permalink":"https://ysluckly.github.io/tags/java/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://ysluckly.github.io/tags/SpringCloud/"},{"name":"SkyWalking","slug":"SkyWalking","permalink":"https://ysluckly.github.io/tags/SkyWalking/"}]},{"title":"3-hexo添加自定义图标","slug":"tools/3-hexo-add-icon","date":"2020-12-28T14:00:00.000Z","updated":"2022-02-19T09:27:58.534Z","comments":true,"path":"2020/12/28/3-hexo-add-icon/","link":"","permalink":"https://ysluckly.github.io/2020/12/28/3-hexo-add-icon/","excerpt":"","text":"一、前言鉴于许多人问过如何添加自定义图标，这里就详细说明一下，以备后人乘凉。 这篇文章主要讲解是从 iconfont 添加图标。 二、添加彩色图标2.1 登录并添加图标访问 iconfont，点击如下图位置登录，可以使用 Github 账号登录。 登录成功后，搜索合适的图标，然后点击添加到购物车，如下图所示。 添加了多个后，可以点击右上角的“购物车”，添加到项目，点击加号创建项目，如下图所示。 添加完成后回到项目页面，找到自己刚刚创建的项目。 如果没有到项目页面，可以点击上面菜单进入：资源管理 -&gt; 我的项目 2.2 引入 3-hexo 中点击下载到本地，解压并复制其中的 iconfont.js 到项目 3-hexo/source/js/ 下，并改名 custom-iconfont.js。 在文件 3-hexo/layout/_partial/meta.ejs 最后追加下面一行。 &lt;script src=&quot;&lt;%=theme.blog_path?theme.blog_path.lastIndexOf(&quot;/&quot;) === theme.blog_path.length-1?theme.blog_path.slice(0, theme.blog_path.length-1):theme.blog_path:&#39;&#39; %&gt;/js/custom-iconfont.js?v=&lt;%=theme.version%&gt;&quot; &gt;&lt;/script&gt; 2.3 在配置文件中添加生效修改 3-hexo/_config.yml 如下图所示 完成！ 图标名如上面的 gitee 可以在 网站上修改，如下图所示 三、添加黑白图标link.theme=white 3.1 同 2.13.2 引入 3-hexo 中点击生成代码，如下图所示。 复制生成的代码，修改 font-family 的值为 custom-iconfont，添加到 3-hexo/source/css/_partial/font.styl 最后，并写入图标信息，content 可以移到图标上进行复制，注意前面斜杠转译和去掉后面的分号。 @font-face &#123; font-family: &#39;custom-iconfont&#39;; /* project id 2298064 */ src: url(&#39;//at.alicdn.com/t/font_2298064_34vkk4c9945.eot&#39;); src: url(&#39;//at.alicdn.com/t/font_2298064_34vkk4c9945.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;), url(&#39;//at.alicdn.com/t/font_2298064_34vkk4c9945.woff2&#39;) format(&#39;woff2&#39;), url(&#39;//at.alicdn.com/t/font_2298064_34vkk4c9945.woff&#39;) format(&#39;woff&#39;), url(&#39;//at.alicdn.com/t/font_2298064_34vkk4c9945.ttf&#39;) format(&#39;truetype&#39;), url(&#39;//at.alicdn.com/t/font_2298064_34vkk4c9945.svg#iconfont&#39;) format(&#39;svg&#39;); &#125; .icon-gitee:before &#123; content: &quot;\\e602&quot;; &#125; .icon-youtubeautored:before &#123; content: &quot;\\e649&quot;; &#125; 3.3 在配置文件中添加生效 同2.2结束！","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"3-hexo","slug":"3-hexo","permalink":"https://ysluckly.github.io/tags/3-hexo/"}]},{"title":"一文看懂JavaScript中的Promise","slug":"front-end/一文看懂JavaScript中的Promise","date":"2020-10-20T11:43:44.000Z","updated":"2022-02-19T09:27:58.502Z","comments":true,"path":"2020/10/20/know-javascript-promise/","link":"","permalink":"https://ysluckly.github.io/2020/10/20/know-javascript-promise/","excerpt":"","text":"一、Promise 是什么Promise 是 ES6 提供的原生对象，用来处理异步操作 它有三种状态 pending: 初始状态，不是成功或失败状态。 fulfilled: 意味着操作成功完成。 rejected: 意味着操作失败。 二、使用2.1 创建 Promise通过 new Promise 来实例化，支持链式调用 new Promise((resolve, reject)=&gt;&#123; // 逻辑 &#125;).then(()=&gt;&#123; //当上面&quot;逻辑&quot;中调用 resolve() 时触发此方法 &#125;).catch(()=&gt;&#123; //当上面&quot;逻辑&quot;中调用 reject() 时触发此方法 &#125;) 2.2 执行顺序Promise一旦创建就立即执行，并且无法中途取消，执行逻辑和顺序可以从下面的示例中获得 如下，可修改 if 条件来改变异步结果，下面打印开始的数字是执行顺序 在线调试此示例 - jsbin console.log(&#39;1.开始创建并执行 Promise&#39;) new Promise(function(resolve, reject) &#123; console.log(&#39;2.由于创建会立即执行，所以会立即执行到本行&#39;) setTimeout(()=&gt;&#123; // 模拟异步请求 console.log(&#39;4. 1s之期已到，开始执行异步操作&#39;) if (true) &#123; // 一般我们符合预期的结果时调用 resolve()，会在 .then 中继续执行 resolve(&#39;成功&#39;) &#125; else &#123; // 不符合预期时调用 reject()，会在 .catch 中继续执行 reject(&#39;不符合预期&#39;) &#125; &#125;, 1000) &#125;).then((res)=&gt;&#123; console.log(&#39;5.调用了then，接收数据：&#39; + res) &#125;).catch((error)=&gt;&#123; console.log(&#39;5.调用了catch，错误信息：&#39; + error) &#125;) console.log(&#39;3.本行为同步操作，所以先于 Promise 内的异步操作（setTimeout）&#39;) 执行结果如下 &quot;1.开始创建并执行 Promise&quot; &quot;2.由于创建会立即执行，所以会立即执行到本行&quot; &quot;3.本行为同步操作，所以先于 Promise 内的异步操作（setTimeout）&quot; &quot;4. 1s之期已到，开始执行异步操作&quot; &quot;5.调用了then，接收数据：成功&quot; 2.3 用函数封装 Promise这是比较常用的方法，如下用 setTimeout 模拟异步请求，封装通用请求函数 在线调试此示例 - jsbin // 这是一个异步方法 function ajax(url)&#123; return new Promise(resolve=&gt;&#123; console.log(&#39;异步方法开始执行&#39;) setTimeout(()=&gt;&#123; console.log(&#39;异步方法执行完成&#39;) resolve(url+&#39;的结果集&#39;) &#125;, 1000) &#125;) &#125; // 调用请求函数，并接受处理返回结果 ajax(&#39;/user/list&#39;).then((res)=&gt;&#123; console.log(res) &#125;) 执行结果 &quot;异步方法开始执行&quot; &quot;异步方法执行完成&quot; &quot;/user/list的结果集&quot; 三、高级用法3.1 同时支持Callback与Promise在线调试此示例 - jsbin function ajax(url, success, fail) &#123; if (typeof success === &#39;function&#39;) &#123; setTimeout(() =&gt; &#123; if (true) &#123; success(&#123;user: &#39;羊&#39;&#125;) &#125; else if (typeof fail === &#39;function&#39;) &#123; console.log(typeof fail) fail(&#39;用户不存在&#39;) &#125; &#125;, 1000) &#125; else &#123; return new Promise((resolve, reject) =&gt; &#123; this.ajax(url, resolve, reject) &#125;) &#125; &#125; // callback 调用方式 ajax(&#39;/user/get&#39;, (res)=&gt;&#123; console.log(&#39;Callback请求成功！返回结果:&#39;, res) &#125;, (error)=&gt;&#123; console.log(&#39;Callback请求失败！错误信息:&#39;, error) &#125;) // Promise 调用方式 ajax(&#39;/user/get&#39;).then((res)=&gt;&#123; console.log(&#39;Pormise请求成功！返回结果：&#39;, res) &#125;).catch((error)=&gt;&#123; console.log(&#39;Promise请求失败！返回结果：&#39;, error) &#125;) 执行结果 Callback请求成功！返回结果: &#123;user: &quot;羊&quot;&#125; Pormise请求成功！返回结果： &#123;user: &quot;羊&quot;&#125; 3.2 链式调用.then 支持返回 Promise 对象进行链式调用 ajax(&#39;/user/info&#39;).then((res)=&gt;&#123; // 用户信息查询成功后，可以根据返回结果查询后续信息 console.log(&#39;用户信息:&#39;, res) return ajax(&#39;/user/score&#39;) &#125;).then((res)=&gt;&#123; console.log(&#39;用户成绩:&#39;, res) return ajax(&#39;/user/friends&#39;) &#125;).then((res)=&gt;&#123; console.log(&#39;用户朋友:&#39;, res) &#125;) 3.3 Promise.allPromise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。在线调试此示例 - jsbin // 生成一个Promise对象的数组 var promises = [2, 3, 5, 7, 11, 13].map(function(id)&#123; return new Promise((resolve, reject)=&gt;&#123; if (id % 3 === 0) &#123; resolve(id) &#125; else &#123; reject(id) &#125; &#125;); &#125;); Promise.all(promises).then(function(post) &#123; console.log(&#39;全部通过&#39;) &#125;).catch(function(reason)&#123; console.log(&#39;未全部通过，有问题id：&#39;+reason) &#125;); 执行结果 未全部通过，有问题id：2 Referencemozilla web docs","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://ysluckly.github.io/tags/javascript/"}]},{"title":"Docker 技术整理","slug":"linux/Docker-技术整理","date":"2020-09-01T14:11:00.000Z","updated":"2022-02-19T09:27:58.510Z","comments":true,"path":"2020/09/01/Docker-summary/","link":"","permalink":"https://ysluckly.github.io/2020/09/01/Docker-summary/","excerpt":"","text":"一、概述1.1 什么是dockerDocker 诞生于 2013 年初，由 dotCloud 公司（后改名为 Docker Inc）基于 Go 语言实现并开源的项目。此项目后来加入 Linux基金会，遵从了 Apache 2.0 协议 Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。Docker 是在 Linux 容器技术（LXC）的基础上进行了封装，让用户可以快速并可靠的将应用程序从一台运行到另一台上。 使用容器部署应用被称为容器化，容器化技术的几大优势： 灵活：甚至复杂的应用也可以被容器化 轻量：容器利用和共享宿主机内核，从而在利用系统资源比虚拟机更加的有效 可移植：你可以在本地构建，在云端部署并在任何地方运行 松耦合：容器是高度封装和自给自足的，允许你在不破环其他容器的情况下替换或升级任何一个 可扩展：你可以通过数据中心来新增和自动分发容器 安全：容器依赖强约束和独立的进程 1.2 和传统虚拟机的区别容器在Linux上本地运行，并与其他容器共享主机的内核。它运行一个离散进程，不占用任何其他可执行文件更多的内存，从而使其轻巧。 1.3 相关链接官网：https://www.docker.com/ 文档：https://docs.docker.com/ 二、Image镜像2.1 介绍Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。 父镜像：每个镜像都可能依赖于有一个或多个下层组成的另一个镜像。下层那个镜像就是上层镜像的父镜像 基础镜像：一个没有任何父镜像的镜像，被称为基础镜像 镜像ID：所有镜像都是通过一个 64 位十六进制字符串（256 bit 的值）来标识的。为了简化使用，前 12 个自负可以组成一个短ID，可以在命令行中使用。短ID还是有一定的碰撞几率，所以服务器总是返回长ID 2.2 从仓库下载镜像可以通过 docker pull 命令从仓库获取所需要的镜像 docker pull [选项] [Docker Registry 地址]&lt;镜像名&gt;:&lt;标签&gt; 选项: –all-tags,-a : 拉去所有 tagged 镜像 –disable-content-trust：忽略镜像的校验，默认 –platform：如果服务器是开启多平台支持的，则需要设置平台 –quiet,-q：静默执行，不打印详细信息 标签： 下载指定标签的镜像，默认 latest 示例 # 从 Docker Hub 下载最新的 debian 镜像 docker pull debian # 从 Docker Hub 下载 jessie 版 debian 镜像 docker pull debian:jessie # 下载指定摘要(sha256)的镜像 docker pull ubuntu@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2 2.3 列出本地镜像# 列出已下载的镜像 image_name: 指定列出某个镜像 docker images [选项] [image_name] 选项 参数 描述 –all, -a 展示所有镜像(包括 intermediate 镜像) –digests 展示摘要 –filter, -f 添加过滤条件 –format 使用 Go 模版更好的展示 –no-trunc 不删减输出 –quiet, -q 静默输出，仅仅展示 IDs 示例 # 展示本地所有下载的镜像 docker images # 在本地查找镜像名是 &quot;java&quot; 标签是 &quot;8&quot; 的 奖项 docker images: java:8 # 查找悬挂镜像 docker images --filter &quot;dangling=true&quot; # 过滤 lable 为 &quot;com.example.version&quot; 的值为 0.1 的镜像 docker images --filter &quot;label=com.example.version=0.1&quot; 2.4 Dockerfile创建镜像为了方便分享和快速部署，我们可以使用 docker build 来创建一个新的镜像，首先创建一个文件 Dockerfile，如下 # This is a comment FROM ubuntu:14.04 MAINTAINER Chris &lt;jaytp@qq.com&gt; RUN apt-get -qq update RUN apt-get -qqy install ruby ruby-dev RUN gem install sinatra 然后在此 Dockerfile 所在目录执行 docker build -t yelog/ubuntu:v1 . 来生成镜像，所属组织&#x2F;镜像名:标签 2.5 上传镜像用户可以通过 docker push 命令，把自己创建的镜像上传到仓库中来共享。例如，用户在 Docker Hub 上完成注册后，可以推送自己的镜像到仓库中。 docker push yelog/ubuntu 2.6 导出和载入镜像docker 支持将镜像导出为文件，然后可以再从文件导入到本地镜像仓库 # 导出 docker load --input yelog_ubuntu_v1.tar # 载入 docker load &lt; yelog_ubuntu_v1.tar 2.7 移除本地镜像# -f 强制删除 docker rmi [-f] yelog/ubuntu:v1 # 删除悬挂镜像 docker rmi $(docker images -f &quot;dangling=true&quot; -q) # 删除所有未被容器使用的镜像 docker image prune -a 三、容器3.1 介绍容器和镜像，就像面向对象中的 类 和 示例 一样，镜像是静态的定义，容器是镜像运行的实体，容器可以被创建、启动、停止、删除和暂停等 容器的实质是进城，耽于直接的宿主执行的进程不同，容器进程运行于属于自己的独立的命名空间。因此容器可以拥有自己的 root 文件系统、网络配置和进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。 3.2 创建容器我们可以通过命令 docker run 命令创建容器 如下，启动一个容器，执行命令输出 “Hello word”，之后终止容器 docker run ubuntu:14.04 /bin/echo &#39;Hello world&#39; 下面的命令则是启动一个 bash 终端，允许用户进行交互 docker run -t -i ubuntu:14.04 /bin/bash -t 让 Dcoker 分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上 -i 责让容器的标准输入保持打开 更多参数可选 -a stdin 指定标准输入输出内容类型 -d 后台运行容器，并返回容器ID -i 以交互模式运行容器，通常与 -t 同时使用 -P 随机端口映射，容器端口内部随即映射到宿主机的端口上 -p 指定端口映射， -p 宿主机端口:容器端口 -t \b为容器重新分配一个伪输入终，通常与 -i 同时使用 –name&#x3D;”gate” 为容器指定一个名称 –dns 8.8.8.8 指定容器的 DNS 服务器，默认与宿主机一致 –dns-search example.com 指定容器 DNS 搜索域名，默认与宿主机一致 -h “gate” 指定容器的 hostname -e username&#x3D;’gate’ 设置环境变量 –env-file&#x3D;[] 从指定文件读入环境变量 –cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2” 绑定容器到指定 CPU 运行 -m 设置容器使用内存最大值 –net&#x3D;”bridge” 指定容器的网络连接类型支持 bridge&#x2F;host&#x2F;none&#x2F;container –link&#x3D;[] 添加链接到另一个容器 –expose&#x3D;[] 开放一个端口或一组端口 –volume,-v 绑定一个卷 当利用 docker run 来创建容器时，Dcoker 在后台运行的标准操作包括： 检查本地是否存在指定的镜像，不存在就从公有仓库下载 利用镜像创建并启动一个容器 分配一个文件系统，并在只读的镜像外面挂在一层可读写层 从宿主主机配置的网桥接口中桥接一个虚拟借口到容器中去 从地址池配置一个 ip 地址给容器 执行用户指定的应用程序 执行用户指定的应用程序 执行完毕后容器被终止 3.3 启动容器# 创建一个名为 test 的容器，容器任务是：打印一行 Hello word docker run --name=&#39;test&#39; ubuntu:14.04 /bin/echo &#39;Hello world&#39; # 查看所有可用容器 [-a]包括终止在内的所有容器 docker ps -a # 启动指定 name 的容器 docker start test # 重启指定 name 的容器 docker restart test # 查看日志运行日志（每次启动的日志均被查询出来） $ docker logs test Hello world Hello world 3.4 守护态运行前面创建的容器都是执行任务（打印Hello world）后，容器就终止了。更多的时候，我们需要让 Docker 容器在后台以守护态（Daemonized）形式运行。此时，可以通过添加 -d 参数来实现 注意：docker是否会长久运行，和 docker run 指定的命令有关 # 创建 docker 后台守护进程的容器 docker run --name=&#39;test2&#39; -d ubuntu:14.04 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot; # 查看容器 $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 237e555d4457 ubuntu:14.04 &quot;/bin/sh -c &#39;while t…&quot; 52 seconds ago Up 51 seconds test2 # 获取容器的输出信息 $ docker logs test2 hello world hello world hello world 3.5 进入容器上一步我们已经实现了容器守护态长久运行，某些时候需要进入容器进行操作，可以使用 attach 、exec 进入容器。 # 不安全的，ctrl+d 退出时容器也会终止 docker attach [容器Name] # 以交互式命令行进入，安全的，推荐使用 docker exec -it [容器Name] /bin/bash 命令优化 使用 docker exec 命令时，好用，但是命令过长，我们可以通过自定义命令来简化使用 创建文件 /user/bin/ctn 命令文件，内容如下 docker exec -it $1 /bin/bash 检查环境变量有没有配置目录 /usr/bin （一般是有配置在环境变量里面的，不过最好再确认一下） $PATH bash: /usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games: No such file or directory 完成上面步骤后，就可以直接通过命令 ctn 来进入容器 注意：如果是使用非 root 账号创建的命令，而 docker 命令是 root 权限，可能存在权限问题，可以通过设置 chmod 777 /usr/bin/ctn 设置权限，使用 sudo ctn [容器Name] 即可进入容器 $ ctn [容器Name] 使用上面命令时，容器Name 需要手动输入，容器出错。我们可以借助 complete 命令来补全 容器Name，在 ~/.bashrc （作用于当前用户，如果想要所要用户上校，可以修改 /etc/bashrc）文件中添加一行，内容如下。保存后执行 source ~/.bashrc 使之生效，之后我们输入 ctn 后，按 tab 就会提示或自动补全容器名了了 # ctn auto complete complete -W &quot;$(docker ps --format&quot;&#123;&#123;.Names&#125;&#125;&quot;)&quot; ctn 注意： 由于提示的 容器Name 是 ~/.bashrc 生效时的列表，所有如果之后 docker 容器列表有变动，需要重新执行 source ~/.bashrc 使之更新提示列表 3.6 终止容器通过 docker stop [容器Name] 来终止一个运行中的容器 # 终止容器名为 test2 的容器 docker stop test2 # 查看正在运行中的容器 docker ps # 查看所有容器（包括终止的） docker ps -a 3.7 将容器保存为镜像我们修改一个容器后，可以经当前容器状态打包成镜像，方便下次直接通过镜像仓库生成当前状态的容器。 # 创建容器 docker run -t -i training/sinatra /bin/bash # 添加两个应用 gem install json # 将修改后的容器打包成新的镜像 docker commit -m &quot;Added json gem&quot; -a &quot;Docker Newbee&quot; 0b2616b0e5a8 ouruser/sinatra:v2 3.8 导出&#x2F;导入容器容器 -&gt;导出&gt; 容器快照文件 -&gt;导入&gt; 本地镜像仓库 -&gt;新建&gt; 容器 $ docker ps -a CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 2a8bffa405c8 ubuntu:14.04 &quot;/bin/sh -c &#39;while t…&quot; About an hour ago Up 3 seconds test2 # 导出 $ docker export 2a8bffa405c8 &gt; ubuntu.tar # 导入为镜像 $ docker ubuntu.tar | docker import - test/ubuntu:v1.0 # 从指定 URL 或者某个目录导入 $ docker import http://example.com/exampleimage.tgz example/imagerepo 注意：用户既可以通过 docker load 来导入镜像存储文件到本地镜像仓库，也可以使用 docker import 来导入一个容器快找到本地镜像仓库，两者的区别在于容器快照将丢失所有的历史记录和元数据信息，仅保存容器当时的状态，而镜像存储文件将保存完成的记录，体积要更大。所有容器快照文件导入时需要重新指定标签等元数据信息。 3.9 删除容器可以使用 docker rm [容器Name] 来删除一个终止状态的容器，如果容器还未终止，可以先使用 docker stop [容器Name] 来终止容器，再进行删除操作 docker rm test2 # 删除容器 -f: 强制删除，无视是否运行 $ docker [-f] rm myubuntu # 删除所有已关闭的容器 $ docker rm $(docker ps -a -q) 3.10 查看容器状态docker stats $(docker ps --format=&#123;&#123;.Names&#125;&#125;) 四、数据卷4.1 介绍数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多特性： 数据卷可以在容器之间共享和重用 对数据卷的修改会立马生效 对数据卷的更新，不会影响镜像 卷会一直存在，直到没有容器使用 数据卷类似于 Linux 下对目录或文件进行 mount 4.2 创建数据卷在用 docker run 命令的时候，使用 -v 标记来创建一个数据卷并挂在在容器里，可同时挂在多个。 # 创建一个 web 容器，并加载一个数据卷到容器的 /webapp 目录 docker run -d -P --name web -v /webapp training/webapp python app.py # 挂载一个宿主机目录 /data/webapp 到容器中的 /opt/webapp docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py # 默认是读写权限，也可以指定为只读 docker run -d -P --name web -v /src/webapp:/opt/webapp:ro # 挂载单个文件 docker run --rm -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash 4.3 数据卷容器如果需要多个容器共享数据，最好创建数据卷容器，就是一个正常的容器，撰文用来提供数据卷供其他容器挂载的 # 创建一个数据卷容器 dbdata docker run -d -v /dbdata --name dbdata training/postgres echo Data-only container for postgres # 其他容器挂载 dbdata 容器的数据卷 docker run -d --volumes-from dbdata --name db1 training/postgres docker run -d --volumes-from dbdata --name db2 training/postgres 五、网络5.1 外部访问容器在容器内运行一些服务，需要外部可以访问到这些服务，可以通过 -P 或 -p 参数来指定端口映射。 当使用 -P 标记时，Docker 会随即映射一个 49000～49900 的端口到内部容器开放的网络端口。 使用 docker ps 可以查看端口映射情况 $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 7f43807dc042 training/webapp &quot;python app.py&quot; 3 seconds ago Up 2 seconds 0.0.0.0:32770-&gt;5000/tcp amazing_liskov -p 指定端口映射，支持格式 ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort # 不限制ip访问 docker run -d -p 5000:5000 training/webapp python app.py # 只允许宿主机回环地址访问 docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py # 宿主机自动分配绑定端口 docker run -d -p 127.0.0.1::5000 training/webapp python app.py # 指定 udp 端口 docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py # 指定多个端口映射 docker run -d -p 5000:5000 -p 3000:80 training/webapp python app.py # 查看映射端口配置 $ docker port amazing_liskov 5000/tcp -&gt; 0.0.0.0:32770 5.2 容器互联容器除了跟宿主机端口映射外，还有一种容器间交互的方式，可以在源&#x2F;目标容器之间建立一个隧道，目标容器可以看到源容器指定的信息。 可以通过 --link name:alias 来连接容器，下面就是 “web容器连接db容器” 的例子 # 创建 容器db docker run -d --name db training/postgres # 创建 容器web 并连接到 容器db docker run -d -P --name web --link db:db training/webapp python app.py # 进入 容器web，测试连通性 $ ctn web $ ping db PING db (172.17.0.3) 56(84) bytes of data. 64 bytes from db (172.17.0.3): icmp_seq=1 ttl=64 time=0.254 ms 64 bytes from db (172.17.0.3): icmp_seq=2 ttl=64 time=0.190 ms 64 bytes from db (172.17.0.3): icmp_seq=3 ttl=64 time=0.389 ms 5.3 访问控制容器想要访问外部网络，需要宿主机的转发支持。在 Linux 系统中，通过以下命令检查是否打开 $ sysctl net.ipv4.ip_forward net.ipv4.ip_forward = 1 如果是 0，说明没有开启转发，则需要手动打开。 $ sysctl -w net.ipv4.ip_forward=1 5.4 配置 docker0 桥接Docker 服务默认会创建一个 docker0 网桥，他在内核层连通了其他物理或虚拟网卡，这就将容器和主机都放在同一个物理网络。 Docker 默认制定了 docker0 接口的IP地址和子网掩码，让主机和容器间可以通过网桥相互通信，他还给了 MTU（接口允许接收的最大单元），通常是 1500 Bytes，或宿主机网络路由上支持的默认值。这些都可以在服务启动的时候进行配置。 --bip=CIDR ip地址加子网掩码格式，如 192.168.1.5&#x2F;24 --mtu=BYTES 覆盖默认的 Docker MTU 配置 可以通过 brctl show 来查看网桥和端口连接信息 5.5 网络配置文件Docker 1.2.0 开始支持在运行中的容器里编辑 /etc/hosts 、/etc/hostsname 和 /etc/resolve.conf 文件，修改都是临时的，重新容器将会丢失修改，通过 docker commit 也不会被提交。 六、Dockerfile6.1 介绍Dockerfile 是由一行行命令组成的命令集合，分为四个部分： 基础镜像信息 维护着信息 镜像操作指令 容器启动时执行指令 如下： # 最前面一般放这个 Dockerfile 的介绍、版本、作者及使用说明等 # This dockerfile uses the ubuntu image # VERSION 2 - EDITION 1 # Author: docker_user # Command format: Instruction [arguments / command] .. # 使用的基础镜像，必须放在非注释第一行 FROM ubuntu # 维护着信息信息： 名字 联系方式 MAINTAINER docker_user docker_user@email.com # 构建镜像的命令：对镜像做的调整都在这里 RUN echo &quot;deb http://archive.ubuntu.com/ubuntu/ raring main universe&quot; &gt;&gt; /etc/apt/sources.list RUN apt-get update &amp;&amp; apt-get install -y nginx RUN echo &quot;\\ndaemon off;&quot; &gt;&gt; /etc/nginx/nginx.conf # 创建/运行 容器时的操作指令 # 可以理解为 docker run 后跟的运行指令 CMD /usr/sbin/nginx 6.2 指令指令一般格式为 INSTRUCTION args，包括 FORM 、 MAINTAINER 、RUN 等 FORM 第一条指令必须是 FORM 指令，并且如果在同一个Dockerfile 中创建多个镜像，可以使用多个 FROM 指令（每个镜像一次） FORM ubuntuFORM ubuntu:14.04 MAINTAINER 维护者信息 MAINTAINER Chris &#x78;&#120;&#x40;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#109; RUN 每条 RUN 指令在当前镜像基础上执行命令，并提交为新的镜像。当命令过长时可以使用 \\ 来换行 在 shell 终端中运行命令RUN apt-get update &amp;&amp; apt-get install -y nginx在 exec 中执行:RUN [&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;echo hello&quot;] CMD 指定启动容器时执行的命令，每个 Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行。 CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] 使用 exec 执行，推荐方式；CMD command param1 param2 在 /bin/sh 中执行，提供给需要交互的应用；CMD [&quot;param1&quot;,&quot;param2&quot;] 提供给 ENTRYPOINT 的默认参数； EXPOSE 告诉服务端容器暴露的端口号， EXPOSE ENV 指定环境变量 ENV PG_MAJOR 9.3ENV PATH &#x2F;usr&#x2F;local&#x2F;postgres-$PG_MAJOR&#x2F;bin:$PATH ADD ADD 该命令将复制指定的 到容器中的 。其中 可以是 Dockerfile 所在目录的一个相对路径，也可以是一个URL；还可以是一个 tar文件（自动解压为目录） COPY 格式为 COPY 复制本地主机的 （为 Dockerfile 所在目录的相对路径）到容器中的 。当使用本地目录为源目录时，推荐使用 COPY ENTRYPOINT 配置容器启动执行的命令，并且不可被 docker run 提供的参数覆盖每个Docekrfile 中只能有一个 ENTRYPOINT ，当指定多个时，只有最后一个起效 两种格式ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]``ENTRYPOINT command param1 param2（shell中执行） VOLUME 创建一个可以从本地主机或其他容器挂载的挂载点，一般用来存放数据库和需要保持的数据等。 VOLUME [“&#x2F;data”] USER 指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户 USER daemon WORKDIR 为后续的 RUN、CMD、ENTRYPOINT 指令配置工作目录。可以使用多个 WORKDIR 指令，后续命令如果参数是相对路径，则会基于之前命令指定的路径。 格式为 WORKDIR /path/to/workdir。 WORKDIR &#x2F;aWORKDIR bWORKDIR cRUN pwd最后的路径为 &#x2F;a&#x2F;b&#x2F;c ONBUILD 配置当所创建的镜像作为其它新创建镜像的基础镜像时，所执行的操作指令。 格式为 ONBUILD [INSTRUCTION]。 6.3 创建镜像编写完成 Dockerfile 之后，可以通过 docker build 命令来创建镜像 docker build [选项] 路径 该命令江都区指定路径下（包括子目录）的Dockerfile，并将该路径下所有内容发送给 Docker 服务端，有服务端来创建镜像。可以通过 .dockerignore 文件来让 Docker 忽略路径下的目录与文件 # 使用 -t 指定镜像的标签信息 docker build -t myrepo/myimage . 七、Docker Compose7.1 介绍Docker Compose 是 Docker 官方编排项目之一，负责快速在集群中部署分布式应用。维护地址：https://github.com/docker/compose，由 Python 编写，实际调用 Docker提供的API实现。 Dockerfile 可以让用户管理一个单独的应用容器，而 Compose 则允许用户在一个模版（YAML格式）中定义一组相关联的应用容器（被称为一个project&#x2F;项目），例如一个 web容器再加上数据库、redis等。 7.2 安装# 使用 pip 进行安装 pip install -U docker-compose # 查看用法 docker-ompose -h # 添加 bash 补全命令 curl -L https://raw.githubusercontent.com/docker/compose/1.2.0/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose 7.3 使用术语 服务&#x2F;service： 一个应用容器，实际上可以运行多个相同镜像的实例 项目&#x2F;project： 有一组关联的应用容器组成的完成业务单元 示例：创建一个 Haproxy 挂载三个 Web 容器 创建一个 compose-haproxy-web 目录，作为项目工作目录，并在其中分别创建两个子目录： haproxy 和 web 。 compose-haproxy-webcompose-haproxy-web git clone https://github.com/yelog/compose-haproxy-web.git 目录长这样： compose-haproxy-web ├── docker-compose.yml ├── haproxy │ └── haproxy.cfg └── web ├── Dockerfile ├── index.html └── index.py 在该目录执行 docker-compose up 命令，会整合输出所有容器的输出 $ docker-compose up Starting compose-haproxy-web_webb_1 ... done Starting compose-haproxy-web_webc_1 ... done Starting compose-haproxy-web_weba_1 ... done Recreating compose-haproxy-web_haproxy_1 ... done Attaching to compose-haproxy-web_webb_1, compose-haproxy-web_weba_1, compose-haproxy-web_webc_1, compose-haproxy-web_haproxy_1 haproxy_1 | [NOTICE] 244/131022 (1) : haproxy version is 2.2.2 haproxy_1 | [NOTICE] 244/131022 (1) : path to executable is /usr/local/sbin/haproxy haproxy_1 | [ALERT] 244/131022 (1) : parsing [/usr/local/etc/haproxy/haproxy.cfg:14] : &#39;listen&#39; cannot handle unexpected argument &#39;:70&#39;. haproxy_1 | [ALERT] 244/131022 (1) : parsing [/usr/local/etc/haproxy/haproxy.cfg:14] : please use the &#39;bind&#39; keyword for listening addresses. haproxy_1 | [ALERT] 244/131022 (1) : Error(s) found in configuration file : /usr/local/etc/haproxy/haproxy.cfg haproxy_1 | [ALERT] 244/131022 (1) : Fatal errors found in configuration. compose-haproxy-web_haproxy_1 exited with code 1 此时访问本地的 80 端口，会经过 haproxy 自动转发到后端的某个 web 容器上，刷新页面，可以观察到访问的容器地址的变化。 7.4 命令说明大部分命令都可以运行在一个或多个服务上。如果没有特别的说明，命令则应用在项目所有的服务上。 执行 docker-compose [COMMAND] --help 查看具体某个命令的使用说明 使用格式 docker-compose [options] [COMMAND] [ARGS...] build 构建&#x2F;重建服务服务一旦构建后，将会带上一个标记名，例如 web_db可以随时在项目目录运行 docker-compose build 来重新构建服务 help 获得一个命令的信息 kill 通过发送 SIGKILL 信号来强制停止服务容器，支持通过参数来指定发送信号，例如docker-compose kill -s SIGINT logs 查看服务的输出 port 打印绑定的公共端口 ps 列出所有容器 pull 拉去服务镜像 rm 删除停止的服务容器 run 在一个服务上执行一个命令docker-compose run ubuntu ping docker.com scale 设置同一个服务运行的容器个数通过 service=num 的参数来设置数量docker-compose scale web=2 worker=3 start 启动一个已经存在的服务容器 stop 停止一个已经运行的容器，但不删除。可以通过 docker-compose start 再次启动 up 构建、创建、启动、链接一个服务相关的容器链接服务都将被启动，除非他们已经运行docker-compose up -d 将后台运行并启动docker-compose up 已存在容器将会重新创建docker-compose up --no-recreate 将不会重新创建容器 7.5 环境变量环境变量可以用来配置 Compose 的行为 以 Docker_ 开头的变量用来配置 Docker 命令行客户端使用的一样 COMPOSE_PROJECT_NAME 设置通过 Compose 启动的每一个容器前添加的项目名称，默认是当前工作目录的名字。 COMPOSE_FILE 设置要使用的 docker-compose.yml 的路径。默认路径是当前工作目录。 DOCKER_HOST 设置 Docker daemon 的地址。默认使用 unix:///var/run/docker.sock，与 Docker 客户端采用的默认值一致。 DOCKER_TLS_VERIFY 如果设置不为空，则与 Docker daemon 交互通过 TLS 进行。 DOCKER_CERT_PATH 配置 TLS 通信所需要的验证（ca.pem、cert.pem 和 key.pem）文件的路径，默认是 ~/.docker 。 7.6 docker-compose.yml默认模版文件是 docker-compose.yml ，启动定义了每个服务都必须经过 image 指令指定镜像或 build 指令（需要 Dockerfile) 来自动构建。 其他大部分指令跟 docker run 类似 如果使用 build 指令，在 Dockerfile 中设置的选项（如 CMD 、EXPOSE 等）将会被自动获取，无需在 docker-compose.yml 中再次设置。 **image** 指定镜像名称或镜像ID，如果本地仓库不存在，将尝试从远程仓库拉去此镜像 image: ubuntu image: orchardup/postgresql image: a4bc65fd **build** 指定 Dockerfile 所在文件的路径。Compose 将利用它自动构建这个镜像，然后使用这个镜像。 build: /path/to/build/dir **command** 覆盖容器启动默认执行命令 command: bundle exec thin -p 3000 **links** 链接到其他服务中的容器，使用服务名称或别名 links: - db - db:database - redis 别名会自动在服务器中的 /etc/hosts 里创建。例如： 172.17.2.186 db 172.17.2.186 database 172.17.2.187 redis **external_links** 连接到 docker-compose.yml 外部的容器，甚至并非 Compose 管理的容器。 external_links: - redis_1 - project_db_1:mysql - project_db_1:postgresql ports 暴露端口信息 HOST:CONTAINER 格式或者仅仅指定容器的端口（宿主机会随机分配端口） ports: - &quot;3000&quot; - &quot;8000:8000&quot; - &quot;49100:22&quot; - &quot;127.0.0.1:8001:8001&quot; 注：当使用 HOST:CONTAINER 格式来映射端口时，如果你使用的容器端口小于 60 你可能会得到错误得结果，因为 YAML 将会解析 xx:yy 这种数字格式为 60 进制。所以建议采用字符串格式。 **expose** 暴露端口，但不映射到宿主机，只被连接的服务访问 expose: - &quot;3000&quot; - &quot;8000&quot; volumes 卷挂载路径设置。可以设置宿主机路径 （HOST:CONTAINER） 或加上访问模式 （HOST:CONTAINER:ro）。 volumes: - /var/lib/mysql - cache/:/tmp/cache - ~/configs:/etc/configs/:ro **** volumes_from 从另一个服务或容器挂载它的所有卷。 volumes_from: - service_name - container_name environment 设置环境变量。你可以使用数组或字典两种格式。 只给定名称的变量会自动获取它在 Compose 主机上的值，可以用来防止泄露不必要的数据。 environment: RACK_ENV: development SESSION_SECRET: environment: - RACK_ENV=development - SESSION_SECRET env_file 从文件中获取环境变量，可以为单独的文件路径或列表。 如果通过 docker-compose -f FILE 指定了模板文件，则 env_file 中路径会基于模板文件路径。 如果有变量名称与 environment 指令冲突，则以后者为准。 env_file: .env env_file: - ./common.env - ./apps/web.env - /opt/secrets.env 环境变量文件中每一行必须符合格式，支持 # 开头的注释行。 # common.env: Set Rails/Rack environment RACK_ENV=development extends 基于已有的服务进行扩展。例如我们已经有了一个 webapp 服务，模板文件为 common.yml。 # common.yml webapp: build: ./webapp environment: - DEBUG=false - SEND_EMAILS=false 编写一个新的 development.yml 文件，使用 common.yml 中的 webapp 服务进行扩展。 # development.yml web: extends: file: common.yml service: webapp ports: - &quot;8000:8000&quot; links: - db environment: - DEBUG=true db: image: postgres 后者会自动继承 common.yml 中的 webapp 服务及相关环节变量。 **** net 设置网络模式。使用和 docker client 的 --net 参数一样的值。 net: &quot;bridge&quot; net: &quot;none&quot; net: &quot;container:[name or id]&quot; net: &quot;host&quot; **** pid 跟主机系统共享进程命名空间。打开该选项的容器可以相互通过进程 ID 来访问和操作。 pid: &quot;host&quot; dns 配置 DNS 服务器。可以是一个值，也可以是一个列表。 dns: 8.8.8.8 dns: - 8.8.8.8 - 9.9.9.9 cap_add, cap_drop 添加或放弃容器的 Linux 能力（Capabiliity）。 cap_add: - ALL cap_drop: - NET_ADMIN - SYS_ADMIN **** dns_search 配置 DNS 搜索域。可以是一个值，也可以是一个列表。 dns_search: example.com dns_search: - domain1.example.com - domain2.example.com **** working_dir, entrypoint, user, hostname, domainname, mem_limit, privileged, restart, stdin_open, tty, cpu_shares 这些都是和 docker run 支持的选项类似。 八、安全8.1 内核命名空间当使用 docker run 启动一个容器时，在后台 Docker 为容器创建一个独立的命名空间和控制集合。命名空间踢空了最基础的也是最直接的隔离，在容器中运行的进程不会被运行在主机上的进程和其他容器发现和作用。 8.2 控制组控制组是 Linux 容器机制的另一个关键组件，负责实现资源的审计和限制。 它提供了很多特性，确保哥哥容器可以公平地分享主机的内存、CPU、磁盘IO等资源；当然，更重要的是，控制组确保了当容器内的资源使用产生压力时不会连累主机系统。 8.3 内核能力机制能力机制是 Linux 内核的一个强大特性，可以提供细粒度的权限访问控制。 可以作用在进程上，也可以作用在文件上。 例如一个服务需要绑定低于 1024 的端口权限，并不需要 root 权限，那么它只需要被授权 net_bind_service 能力即可。 默认情况下， Docker 启动的容器被严格限制只允许使用内核的一部分能力。 使用能力机制加强 Docker 容器的安全有很多好处，可以按需分配给容器权限，这样，即便攻击者在容器中取得了 root 权限，也不能获取宿主机较高权限，能进行的破坏也是有限的。 参考资料https://docs.docker.com/engine/reference/commandline/images/ http://www.dockerinfo.net/","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://ysluckly.github.io/tags/docker/"},{"name":"linux","slug":"linux","permalink":"https://ysluckly.github.io/tags/linux/"}]},{"title":"3-hexo评论设置","slug":"tools/3-hexo-comment","date":"2020-05-23T14:26:23.000Z","updated":"2022-02-19T09:27:58.536Z","comments":true,"path":"2020/05/23/3-hexo-comment/","link":"","permalink":"https://ysluckly.github.io/2020/05/23/3-hexo-comment/","excerpt":"","text":"前言目前 3-hexo 已经集成了评论系统有 gitalk 、gitment、 disqus 、来必力、utteranc 一、gitalkgitalk 是一款基于 Github Issue 和 Preact 开发的评论插件 官网: https://gitalk.github.io/ 1. 登录 github ，注册应用点击进行注册 ，如下 注册完后，可得到 Client ID 和 Client Secret 2. 新建存放评论的仓库因为 gitalk 是基于 Github 的 Issue 的，所以需要指定一个仓库，用来承接 gitalk 的评论，我们一般使用 Github Page 来做我们博客的评论，所以，新建仓库名为 xxx.github.io，其中 xxx 为你的 Github 用户名 3. 配置主题在主题下 _config.yml 中找到如下配置，启用评论，并使用 gitalk ##########评论设置############# comment: on: true type: gitalk 在主题下 _config.yml 中找到 gitalk 配置，将 第1步 得到的 Client ID 和 Client Secret 复制到如下位置 gitalk: githubID: # 填你的 github 用户名 repo: xxx.github.io # 承载评论的仓库，一般使用 Github Page 仓库 ClientID: # 第1步获得 Client ID ClientSecret: # 第1步获得 Client Secret adminUser: # Github 用户名 distractionFreeMode: true language: zh-CN perPage: 10 二、来必力1. 创建来必力账号，并选择 City 免费版官网http://livere.com/ ，创建账号，点击上面的安装，选择 City 免费版 复制获取到的代码中的 data-uid 2. 主题选择使用来必力评论在主题下 _config.yml 在找到来必力配置如下，第一步中复制的 data-uid 粘贴到下面 data_uid 处 livere: data_uid: xxxxxx 找到以下代码， 开启并选择 livere (来必力) ##########评论设置############# comment: on: true type: livere 三、utteranc官网地址：https://utteranc.es/ 1. 安装 utterances点我进行安装 2. 配置主题在主题下 _config.yml 中找到 utteranc 的配置 ，修改 repo 为自己的仓库名 utteranc: repo: xxx/xxx.github.io # 承载评论的仓库，填上自己的仓库 issue_term: pathname # Issue 与 博客文章 之间映射关系 label: utteranc # 创建的 Issue 添加的标签 theme: github-light # 主题，可选主题请查看官方文档 https://utteranc.es/#heading-theme # 官方文档 https://utteranc.es/ # 使用说明 https://yelog.org//2020/05/23/3-hexo-comment/ 在主题下 _config.yml 中找到如下配置，启用评论，并使用 utteranc comment: on: true type: utteranc","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"3-hexo","slug":"3-hexo","permalink":"https://ysluckly.github.io/tags/3-hexo/"}]},{"title":"3-hexo支持mermaid图表","slug":"tools/3-hexo-support-mermaid","date":"2019-11-12T01:55:37.000Z","updated":"2022-02-19T09:27:58.545Z","comments":true,"path":"2019/11/12/3-hexo-support-mermaid/","link":"","permalink":"https://ysluckly.github.io/2019/11/12/3-hexo-support-mermaid/","excerpt":"","text":"一、说明开启 安装hexo插件npm install hexo-filter-mermaid-diagrams 修改themes/3-hexo/_config.yml 的 mermaid.on，开启主题支持# Mermaid 支持 mermaid: on: true cdn: //cdn.jsdelivr.net/npm/mermaid@8.4.2/dist/mermaid.min.js #cdn: //cdnjs.cloudflare.com/ajax/libs/mermaid/8.3.1/mermaid.min.js options: # 更多配置信息可以参考 https://mermaidjs.github.io/#/mermaidAPI theme: &#39;default&#39; startOnLoad: true flowchart: useMaxWidth: false htmlLabels: true 在markdown中，像写代码块一样写图表 二、示例以下示例源码可以在这边查看 本文源码更多示例可以查看官网：https://mermaidjs.github.io 1. flowchartgraph TD; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D; graph TB c1--&gt;a2 subgraph one a1--&gt;a2 end subgraph two b1--&gt;b2 end subgraph three c1--&gt;c2 end 2.Sequence diagramssequenceDiagram participant Alice participant Bob Alice-&gt;&gt;John: Hello John, how are you? loop Healthcheck John-&gt;&gt;John: Fight against hypochondria end Note right of John: Rational thoughts &lt;br/&gt;prevail! John--&gt;&gt;Alice: Great! John-&gt;&gt;Bob: How about you? Bob--&gt;&gt;John: Jolly good! 3.Class diagramsclassDiagram Animal &lt;|-- Duck Animal &lt;|-- Fish Animal &lt;|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck&#123; +String beakColor +swim() +quack() &#125; class Fish&#123; -int sizeInFeet -canEat() &#125; class Zebra&#123; +bool is_wild +run() &#125; 4.State diagramsstateDiagram [*] --&gt; Active state Active &#123; [*] --&gt; NumLockOff NumLockOff --&gt; NumLockOn : EvNumLockPressed NumLockOn --&gt; NumLockOff : EvNumLockPressed -- [*] --&gt; CapsLockOff CapsLockOff --&gt; CapsLockOn : EvCapsLockPressed CapsLockOn --&gt; CapsLockOff : EvCapsLockPressed -- [*] --&gt; ScrollLockOff ScrollLockOff --&gt; ScrollLockOn : EvCapsLockPressed ScrollLockOn --&gt; ScrollLockOff : EvCapsLockPressed &#125; 5.Gantt diagramsgantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h 6.Pie chart diagramspie &quot;Dogs&quot; : 386 &quot;Cats&quot; : 85 &quot;Rats&quot; : 15","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"3-hexo","slug":"3-hexo","permalink":"https://ysluckly.github.io/tags/3-hexo/"}]},{"title":"3-hexo 添加音乐插件","slug":"tools/3-hexo-add-music","date":"2019-10-08T02:44:30.000Z","updated":"2022-02-19T09:27:58.535Z","comments":true,"path":"2019/10/08/3-hexo-add-music/","link":"","permalink":"https://ysluckly.github.io/2019/10/08/3-hexo-add-music/","excerpt":"","text":"网易云音乐1. 复制网易云音乐插件代码前往网易云音乐官网，搜索一个作为背景音乐的歌曲，并进入播放页面，点击 生成外链播放器 设置好想要显示的样式后，复制 html 代码 最好外层在加一个 div，如下，可直接将上一步复制的 iframe 替换下方里面的 iframe &lt;div id=&quot;musicMouseDrag&quot; style=&quot;position:fixed; z-index: 9999; bottom: 0; right: 0;&quot;&gt; &lt;div id=&quot;musicDragArea&quot; style=&quot;position: absolute; top: 0; left: 0; width: 100%;height: 10px;cursor: move; z-index: 10;&quot;&gt;&lt;/div&gt; &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=38592976&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt; &lt;/div&gt; 2. 将插件引入到主题中将上一步加过 div 的代码粘贴到主题下 layout/_partial/footer.ejs 的最后面 3. 调整位置默认给的样式是显示在右下角，可以通过调整上一步粘贴的 div 的 style 中 bottom 和 right 来调整位置。 4. 自由拖动如果需要自由拖动，在刚才添加的代码后面，再添加下面代码即可，鼠标就可以在音乐控件的 上边沿 点击拖动 &lt;!--以下代码是为了支持随时拖动音乐控件的位置，如没有需求，可去掉下面代码--&gt; &lt;script&gt; var $DOC = $(document) $(&#39;#musicMouseDrag&#39;).on(&#39;mousedown&#39;, function (e) &#123; // 阻止文本选中 $DOC.bind(&quot;selectstart&quot;, function () &#123; return false; &#125;); $(&#39;#musicDragArea&#39;).css(&#39;height&#39;, &#39;100%&#39;); var $moveTarget = $(&#39;#musicMouseDrag&#39;); $moveTarget.css(&#39;border&#39;, &#39;1px dashed grey&#39;) var div_x = e.pageX - $moveTarget.offset().left; var div_y = e.pageY - $moveTarget.offset().top; $DOC.on(&#39;mousemove&#39;, function (e) &#123; var targetX = e.pageX - div_x; var targetY = e.pageY - div_y; targetX = targetX &lt; 0 ? 0 : (targetX + $moveTarget.outerWidth() &gt;= window.innerWidth) ? window.innerWidth - $moveTarget.outerWidth() : targetX; targetY = targetY &lt; 0 ? 0 : (targetY + $moveTarget.outerHeight() &gt;= window.innerHeight) ? window.innerHeight - $moveTarget.outerHeight() : targetY; $moveTarget.css(&#123;&#39;left&#39;: targetX + &#39;px&#39;, &#39;top&#39;: targetY + &#39;px&#39;, &#39;bottom&#39;: &#39;inherit&#39;, &#39;right&#39;: &#39;inherit&#39;&#125;) &#125;).on(&#39;mouseup&#39;, function () &#123; $DOC.unbind(&quot;selectstart&quot;); $DOC.off(&#39;mousemove&#39;) $DOC.off(&#39;mouseup&#39;) $moveTarget.css(&#39;border&#39;, &#39;none&#39;) $(&#39;#musicDragArea&#39;).css(&#39;height&#39;, &#39;10px&#39;); &#125;) &#125;) &lt;/script&gt;","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"3-hexo","slug":"3-hexo","permalink":"https://ysluckly.github.io/tags/3-hexo/"}]},{"title":"3-hexo支持jsfiddle渲染","slug":"tools/3-hexo-jsfiddle","date":"2019-09-24T01:59:37.000Z","updated":"2022-02-19T09:27:58.540Z","comments":true,"path":"2019/09/24/3-hexo-jsfiddle/","link":"","permalink":"https://ysluckly.github.io/2019/09/24/3-hexo-jsfiddle/","excerpt":"","text":"1. canvas 粒子效果 2. 复选框动画","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"3-hexo","slug":"3-hexo","permalink":"https://ysluckly.github.io/tags/3-hexo/"}]},{"title":"3-hexo文章内toc生成","slug":"tools/3-hexo-toc","date":"2019-09-24T01:48:20.000Z","updated":"2022-02-19T09:27:58.545Z","comments":true,"path":"2019/09/24/3-hexo-toc/","link":"","permalink":"https://ysluckly.github.io/2019/09/24/3-hexo-toc/","excerpt":"","text":"[toc] 1. 如何使用1.1 关键字只要在在文章中使用如下关键字，不区分大小写，便可以在相应位置显示目录导航，效果文章开头 1.2 小标题2jlksjdflksdjflksjdflksjdflkaj;sdfjka;lskdjfla;skjdf;lajsdflkjal;sdjkf;laskjdf占位占位 1.3 小标题占位占位占位 2. 标题二占位占位占位 2.1 小标题占位占位 2.2 小标题2占位占位占位占位占位 文末占位占位占位占位占位","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"3-hexo","slug":"3-hexo","permalink":"https://ysluckly.github.io/tags/3-hexo/"}]},{"title":"[记]《知识分子的不幸》-王小波","slug":"reading/misfortune-intellectual","date":"2019-06-09T13:31:09.000Z","updated":"2022-02-19T09:27:58.530Z","comments":true,"path":"2019/06/09/misfortune-intellectual/","link":"","permalink":"https://ysluckly.github.io/2019/06/09/misfortune-intellectual/","excerpt":"","text":"前言这篇文章发表于1996年第二期《东方》杂志，同样收录于《沉默的大多数》一书中。 所想文章一开头就抛出了一个问题：什么是知识分子最害怕的事？想起了高晓松在晓说中提到过这个问题，晓松肯定是看过这篇文章的。 王小波说：“知识分子最怕活在不理智的年代。”所谓不理智的年代，就是伽利略低头认罪，承认地球不转的年代，也是拉瓦斯上断头台的年代；是茨威格服毒自杀的年代，也是老舍跳太平湖的年代。“ 王小波和他的美国老师谈论了一个问题：”有信仰比无信仰要好。“，由于王小波是经历过文革的，所以王小波一开始是抵触这种思想的，尤其是 课间祷告 让王小波想起了文革中的 早请示。但老师最终说服了他，“不管是信神，还是自珍自重，人活在世界上总得有点信念才成。就我个人而言，虽是无神论者，我也有个人操守，从不逾越。” 国内的学者，只搞学术研究，不搞意识形态，这由不了自己。有朝一日它成了意识形态，你的话就是罪状。言论不自由，不理智，民族狂热，这不就是知识分子最怕的事情吗？ 王小波崇拜墨子：其一，他思维缜密，其二，他敢赤裸裸地谈利害。（有了他，我也敢说自己是中华民族的赤诚分子，不怕国学家说我是全盘西化了。） 营造意识形态则是灭绝思想额丰饶。中国的人文知识分子，有种以天下为己任的使命感，总觉得自己该搞出些老百姓当信仰的东西。 国学，这种东西实在厉害。最可怕之处就在于那个“国”字。顶着这个字，谁敢有不同意见？抢到了这个制高点，就可以压制一切不同意见；所以很容易落入思想流氓的手中变成一种凶器。 目前正值 “中美贸易战”，各种自媒体为了点击量、关注度。煽动民族狂热情绪，导致民众根本容不得半点不同意见，不讲道理，“盲目爱国“。 认真思索，真诚的明辨是非，有这种态度大概就可算是善良了吧。 人活在世上，自会形成信念，一种学问、一本书，假如不对我的价值观发生变化，就不值得一学，不值得一看。","categories":[{"name":"读书","slug":"读书","permalink":"https://ysluckly.github.io/categories/%E8%AF%BB%E4%B9%A6/"},{"name":"阅读笔记","slug":"读书/阅读笔记","permalink":"https://ysluckly.github.io/categories/%E8%AF%BB%E4%B9%A6/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"reading","slug":"reading","permalink":"https://ysluckly.github.io/tags/reading/"}]},{"title":"人们在一本叫《活着》的书中纷纷死去","slug":"reading/to-live","date":"2019-05-02T09:46:16.000Z","updated":"2022-02-19T09:27:58.532Z","comments":true,"path":"2019/05/02/to-live/","link":"","permalink":"https://ysluckly.github.io/2019/05/02/to-live/","excerpt":"","text":"有那么一个年代，离我们很近，它腥风血雨，连活着都是一件奢侈的事。 在富贵的一生中，每次出现看似被上天眷顾的福气后（如有庆长跑第一、凤霞嫁了人并怀了孩子），读者还在替富贵开心的时候，他们却以各种方式迅速死去，最终富贵亲手埋葬了他所有的亲人。 一本 12w 左右的小说，但是在没有华丽词藻的情况下，在顺畅流利的写作手法、跌宕起伏的剧情、第一人称的代入感下一口气读完了。期间多次痛哭流涕（一点儿没夸张），不得不放下书本，洗过脸后才能继续阅读。所以已经多年没写书评的我，还是忍不住为她写下书评。 人是为了活着本身而活着，而不是为了活着之外的任何事物所活着。 这是作者在中文序言中的一句话，在当今生活着的我，初读序言中的这句话，并无任何共鸣，甚至还行吐槽两句。随着富贵将他的”一生”娓娓道来，你就会明白在那样的时代背景下，活着已经是一件不容易的事。 所以作者在日文版序言中说到： 在旁人眼中富贵的一生是苦熬的一生；可是对于富贵自己，我相信他更多地感受到了幸福。 因为他相信自己的妻子是世上最好的妻子，他相信自己的子女也是世上最好的子女，还有他的女婿他的外孙，还有他的那头也叫富贵的牛，还有一起上火锅的朋友们，还有生活的点点滴滴…… 富贵的真是一路跌下去的一生，从”富家少爷”赌光了家产、气死了爹爹。由于母亲生病，为母亲求医路上被国民党抓壮丁，被俘虏后，放回家中。却发现母亲已死，女儿也由于生病变成了聋哑人。本想着大难之后必有后福，却只是悲惨一生的开端。儿子有庆由于和县长夫人血型匹配，遭抽血而亡、女儿凤霞产子大出血而亡、妻子家珍失去儿女后，失去了最后与病魔争斗的信念，也走了、女婿二喜在工地被水泥板拍死、外孙苦根难得吃到豆子，却被豆子撑死。最后只剩下自己和一个也叫作富贵的老牛。 春生想自杀前，找到富贵告别，在被家珍原谅，并答应不会自杀，在这种情况下坚持了一个月，最终还是自杀了。那种时代背景下的无奈，那种窒息感。。。 富贵的一生跨越了地主、解放战争、人民公社运动、大炼钢铁、自然灾害和文化大革命，从一个人的视角看到每个时代下的一个小小的缩影，但却比任何其他的描述更让人深刻了解到这些时代背景下人们的生活状态。 在那时，活着不仅是幸运，也更需要勇气。","categories":[{"name":"读书","slug":"读书","permalink":"https://ysluckly.github.io/categories/%E8%AF%BB%E4%B9%A6/"},{"name":"阅读笔记","slug":"读书/阅读笔记","permalink":"https://ysluckly.github.io/categories/%E8%AF%BB%E4%B9%A6/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"reading","slug":"reading","permalink":"https://ysluckly.github.io/tags/reading/"},{"name":"活着","slug":"活着","permalink":"https://ysluckly.github.io/tags/%E6%B4%BB%E7%9D%80/"}]},{"title":"shell速查表","slug":"linux/shell速查表","date":"2018-09-08T03:48:24.000Z","updated":"2022-02-19T09:27:58.522Z","comments":true,"path":"2018/09/08/shell-command/","link":"","permalink":"https://ysluckly.github.io/2018/09/08/shell-command/","excerpt":"","text":"1. 变量#!/bin/bash msg=&quot;hello world&quot; echo $msg 变量名的命名须遵循如下规则： 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。 中间不能有空格，可以使用下划线（_）。 不能使用标点符号。 不能使用bash里的关键字（可用help命令查看保留关键字）。 2. 传参#!/bin/bash echo &quot;执行的文件名：$0&quot;; echo &quot;第一个参数为：$1&quot;; echo &quot;第二个参数为：$2&quot;; echo &quot;第三个参数为：$3&quot;; 脚本内获取参数的格式为：$n。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……另外，还有几个特殊字符用来处理参数： 参数 说明 $# 传递到脚本的参数个数 $* 以一个单字符串显示所有向脚本传递的参数。如&quot;$*&quot;用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。 $$ 脚本运行的当前进程ID号 $! 后台运行的最后一个进程的ID号 $@ 与$*相同，但是使用时加引号，并在引号中返回每个参数。如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。 $- 显示Shell使用的当前选项，与set命令功能相同。 $? 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。 3. 数组&#96;&#96;&#96;bash#!&#x2F;bin&#x2F;bashmy_array&#x3D;(A B “C” D)echo “第一个元素为: ${my_array[0]}”echo “第二个元素为: ${my_array[1]}”echo “第三个元素为: ${my_array[2]}”echo “第四个元素为: ${my_array[3]}” echo “数组的元素为: ${my_array[*]}”echo “数组的元素为: ${my_array[@]}” echo “数组元素个数为: $","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://ysluckly.github.io/tags/linux/"},{"name":"shell","slug":"shell","permalink":"https://ysluckly.github.io/tags/shell/"}]},{"title":"nginx配置记录","slug":"linux/nginx配置记录","date":"2018-02-08T01:19:09.000Z","updated":"2022-02-19T09:27:58.521Z","comments":true,"path":"2018/02/08/nginx-config/","link":"","permalink":"https://ysluckly.github.io/2018/02/08/nginx-config/","excerpt":"","text":"启用https1.购买免费证书登录阿里云 -&gt; 控制台 -&gt; 安全（云盾） -&gt; CA证书服务 -&gt; 购买证书 2.补全证书信息点击补全，绑定域名 3.下载并配置选择下载 证书for nginx 上面这个页面有相关的配置信息，下面简单介绍： ① 将下载文件中的 *.pem、*.key, 拷贝到 nginx 目录下 的 cert , 当然也可以是其他目录② 修改 nginx.conf server &#123; listen 443 ssl; server_name xiangzhangshugongyi.com; ssl_certificate cert/214487958220243.pem; ssl_certificate_key cert/214487958220243.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / &#123; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-Proto https; proxy_redirect off; proxy_connect_timeout 240; proxy_send_timeout 240; proxy_read_timeout 240; # note, there is not SSL here! plain HTTP is used proxy_pass http://127.0.0.1:8080; &#125; &#125; ③ 重启 nginx，通过 证书绑定域名进行 https 访问到 服务器跑在 8080 的服务","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://ysluckly.github.io/tags/nginx/"}]},{"title":"Mac神器-BTT(BetterTouchTool)不完全教程","slug":"tools/Mac-BetterTouchTool","date":"2017-12-13T09:04:25.000Z","updated":"2022-02-19T09:27:58.548Z","comments":true,"path":"2017/12/13/Mac-BetterTouchTool/","link":"","permalink":"https://ysluckly.github.io/2017/12/13/Mac-BetterTouchTool/","excerpt":"","text":"介绍BetterTouchTool 是一款专为Mac用户开发的 窗口管理&#x2F;Trackpad(触控板)&#x2F;Magic Mouse(苹果鼠标)&#x2F;Keyboard(键盘)&#x2F;TouchBar 功能增强制作的软件。 这款软件不但可以设置全局的 手势&#x2F;快捷键&#x2F;TouchBar ，还可以给不同的应用定义不同的姿势，再配合上 Alfred 的 workflow，简直各种高难度姿势都能玩的出来。 本文主要介绍以下功能： 窗口管理 帮 Trackpad 定义各种姿势 帮 Magic Mouse 定义各种姿势 帮 Keyboard 定义各种姿势 帮任何应用自定义 TouchBar 本文以 macbook pro 2017 touchbar 版为例 1. 窗口管理这个功能无需过多配置，默认配置即可很好使用（和windows的理念相似） 将窗口移到左右边缘，最大化至半屏 将窗口移到上边缘，最大化至全屏 如果对默认配置不满意，也可以在如下图所示的位置来调整窗口展示： 2. 帮 Trackpad 定义各种姿势姿势选择在界面选择 Trackpad（触摸板） -&gt; Add New Gesture（添加一个新姿势） 左边可以选择生效的范围：全局或者某个应用 如上图所示，姿势包括但不限于如： 单指：左下角单击、单指轻拍右上角、单指轻拍上边中点 双指：两个手指捏、张开两指以两指中心为圆轴逆时针、中指拍住中央食指轻拍面板、双指从上边缘下滑 三指：三指轻拍、三指拍顶端、三指点击并向上滑、两指轻拍住，拍左、右二指固定拍住，左一下滑 四指：四指双轻拍、中指无名小拍住，食单击、食中指无名拍住，小单击 五指：五手指轻拍、五手指上滑 上面只是列一些典型，更多姿势可以在上图中浏览。 绑定功能 选择过姿势之后，也可以选择在按住某个功能键的时候才能使用（左下角）。 右边是绑定功能：快捷键或动作。 绑定快捷键举例：比如 给chrome 设置 姿势（两指从触控板下边缘滑入），弹出开发者模式（快捷键绑定：command+option+i），如下图： 绑定动作举例：设置 在任何应用内，五指下滑 锁屏，如下图 3. 帮 Magic Mouse 定义各种姿势这个功能设置和 Trackpad 设置 大同小异，所以这边就不多讲，直接图示几个功能。 我快捷键设置了 option+E 鼠标取词翻译（欧陆词典），然后绑定到双指轻拍鼠标，即可触发翻译。 4. 帮 Keyboard 定义各种姿势这个功能比较简单，设置一些 键盘快捷键或录制案件序列 来触发 一些动作或者其他快捷键功能。 5. 帮任何应用自定义 TouchBar这个重磅功能，可以帮助不支持touchbar的软件定制 TouchBar，是不是有点厉害。 下面就以我给 IntelliJ IDEA 定制 TouchBar 为例 (没有F1 ~ F12 功能键，debug真的很痛苦，这个软件真的是雪中送炭)，展示一下使用效果 如上图所示，我给 IntelliJ IDEA 添加了 四个功能 step over&#x2F;step into&#x2F;resume&#x2F;evaluate 添加完之后，切到 IntelliJ IDEA 软件中时，TouchBar 就显示我们添加的四个功能键， 如下图所示 最后BTT还有其他很方便的功能，这盘就介绍到这里，等之后更新了 Alfred 的 workflow 开发指南之后，再一起更新一篇有意思的 BTT+Alfred 效率流。","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"软件记录","slug":"工具/软件记录","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/%E8%BD%AF%E4%BB%B6%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"mac","slug":"mac","permalink":"https://ysluckly.github.io/tags/mac/"},{"name":"efficiency","slug":"efficiency","permalink":"https://ysluckly.github.io/tags/efficiency/"}]},{"title":"[转]谈谈Java中的语法糖","slug":"back-end/转-谈谈Java中的语法糖","date":"2017-11-27T14:51:45.000Z","updated":"2022-02-19T09:27:58.486Z","comments":true,"path":"2017/11/27/java-grammatical-sugar/","link":"","permalink":"https://ysluckly.github.io/2017/11/27/java-grammatical-sugar/","excerpt":"","text":"语法糖（Syntactic Sugar），也称糖衣语法，指在计算机语言中添加的某种语法，这种语法对语言本身功能来说没有什么影响，只是为了方便程序员的开发，提高开发效率。说白了，语法糖就是对现有语法的一个封装。 Java作为一种与平台无关的高级语言，当然也含有语法糖，这些语法糖并不被虚拟机所支持，在编译成字节码阶段就自动转换成简单常用语法。一般来说Java中的语法糖主要有以下几种： 泛型与类型擦除 自动装箱与拆箱，变长参数、 增强for循环 内部类与枚举类 泛型与类型擦除Java语言并不是一开始就支持泛型的。在早期的JDK中，只能通过Object类是所有类型的父类和强制类型转换来实现泛型的功能。强制类型转换的缺点就是把编译期间的问题延迟到运行时，JVM并不能为我们提供编译期间的检查。 在JDK1.5中，Java语言引入了泛型机制。但是这种泛型机制是通过类型擦除来实现的，即Java中的泛型只在程序源代码中有效（源代码阶段提供类型检查），在编译后的字节码中自动用强制类型转换进行替代。也就是说，Java语言中的泛型机制其实就是一颗语法糖，相较与C++、C#相比，其泛型实现实在是不那么优雅。 /** * 在源代码中存在泛型 */ public static void main(String[] args) &#123; Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;(); map.put(&quot;hello&quot;,&quot;你好&quot;); String hello = map.get(&quot;hello&quot;); System.out.println(hello); &#125; 当上述源代码被编译为class文件后，泛型被擦除且引入强制类型转换 public static void main(String[] args) &#123; HashMap map = new HashMap(); //类型擦除 map.put(&quot;hello&quot;, &quot;你好&quot;); String hello = (String)map.get(&quot;hello&quot;);//强制转换 System.out.println(hello); &#125; 自动装箱与拆箱 Java中的自动装箱与拆箱指的是基本数据类型与他们的包装类型之间的相互转换。 我们知道Java是一门面向对象的语言，在Java世界中有一句话是这么说的：“万物皆对象”。但是Java中的基本数据类型却不是对象，他们不需要进行new操作，也不能调用任何方法，这在使用的时候有诸多不便。因此Java为这些基本类型提供了包装类，并且为了使用方便，提供了自动装箱与拆箱功能。自动装箱与拆箱在使用的过程中，其实是一个语法糖，内部还是调用了相应的函数进行转换。 下面代码演示了自动装箱和拆箱功能 public static void main(String[] args) &#123; Integer a = 1; int b = 2; int c = a + b; System.out.println(c); &#125; 经过编译后，代码如下 public static void main(String[] args) &#123; Integer a = Integer.valueOf(1); // 自动装箱 byte b = 2; int c = a.intValue() + b;//自动拆箱 System.out.println(c); &#125; 变长参数 所谓变长参数，就是方法可以接受长度不定确定的参数 变长参数特性是在JDK1.5中引入的，使用变长参数有两个条件，一是变长的那一部分参数具有相同的类型，二是变长参数必须位于方法参数列表的最后面。变长参数同样是Java中的语法糖，其内部实现是Java数组。 public class Varargs &#123; public static void print(String... args) &#123; for(String str : args)&#123; System.out.println(str); &#125; &#125; public static void main(String[] args) &#123; print(&quot;hello&quot;, &quot;world&quot;); &#125; &#125; 编译为class文件后如下，从中可以很明显的看出变长参数内部是通过数组实现的 public class Varargs &#123; public Varargs() &#123; &#125; public static void print(String... args) &#123; String[] var1 = args; int var2 = args.length; //增强for循环的数组实现方式 for(int var3 = 0; var3 &lt; var2; ++var3) &#123; String str = var1[var3]; System.out.println(str); &#125; &#125; public static void main(String[] args) &#123; //变长参数转换为数组 print(new String[]&#123;&quot;hello&quot;, &quot;world&quot;&#125;); &#125; &#125; 增强for循环 增强for循环与普通for循环相比，功能更强并且代码更简洁 增强for循环的对象要么是一个数组，要么实现了Iterable接口。这个语法糖主要用来对数组或者集合进行遍历，其在循环过程中不能改变集合的大小。 public static void main(String[] args) &#123; String[] params = new String[]&#123;&quot;hello&quot;,&quot;world&quot;&#125;; //增强for循环对象为数组 for(String str : params)&#123; System.out.println(str); &#125; List&lt;String&gt; lists = Arrays.asList(&quot;hello&quot;,&quot;world&quot;); //增强for循环对象实现Iterable接口 for(String str : lists)&#123; System.out.println(str); &#125; &#125; 编译后的class文件为 public static void main(String[] args) &#123; String[] params = new String[]&#123;&quot;hello&quot;, &quot;world&quot;&#125;; String[] lists = params; int var3 = params.length; //数组形式的增强for退化为普通for for(int str = 0; str &lt; var3; ++str) &#123; String str1 = lists[str]; System.out.println(str1); &#125; List var6 = Arrays.asList(new String[]&#123;&quot;hello&quot;, &quot;world&quot;&#125;); Iterator var7 = var6.iterator(); //实现Iterable接口的增强for使用iterator接口进行遍历 while(var7.hasNext()) &#123; String var8 = (String)var7.next(); System.out.println(var8); &#125; &#125; 内部类 内部类就是定义在一个类内部的类 Java语言中之所以引入内部类，是因为有些时候一个类只在另一个类中有用，我们不想让其在另外一个地方被使用。内部类之所以是语法糖，是因为其只是一个编译时的概念，一旦编译完成，编译器就会为内部类生成一个单独的class文件，名为outer$innter.class。 public class Outer &#123; class Inner&#123; &#125; &#125; 使用javac编译后，生成两个class文件Outer.class和Outer$Inner.class，其中Outer$Inner.class的内容如下： class Outer$Inner &#123; Outer$Inner(Outer var1) &#123; this.this$0 = var1; &#125; &#125; 内部类分为四种：成员内部类、局部内部类、匿名内部类、静态内部类，每一种都有其用法，这里就不介绍了 枚举类型 枚举类型就是一些具有相同特性的类常量 java中类的定义使用class，枚举类的定义使用enum。在Java的字节码结构中，其实并没有枚举类型，枚举类型只是一个语法糖，在编译完成后被编译成一个普通的类。这个类继承java.lang.Enum，并被final关键字修饰。 public enum Fruit &#123; APPLE,ORINGE &#125; 使用jad对编译后的class文件进行反编译后得到 //继承java.lang.Enum并声明为final public final class Fruit extends Enum &#123; public static Fruit[] values() &#123; return (Fruit[])$VALUES.clone(); &#125; public static Fruit valueOf(String s) &#123; return (Fruit)Enum.valueOf(Fruit, s); &#125; private Fruit(String s, int i) &#123; super(s, i); &#125; //枚举类型常量 public static final Fruit APPLE; public static final Fruit ORANGE; private static final Fruit $VALUES[];//使用数组进行维护 static &#123; APPLE = new Fruit(&quot;APPLE&quot;, 0); ORANGE = new Fruit(&quot;ORANGE&quot;, 1); $VALUES = (new Fruit[] &#123; APPLE, ORANGE &#125;); &#125; &#125;","categories":[{"name":"后端","slug":"后端","permalink":"https://ysluckly.github.io/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"java","slug":"java","permalink":"https://ysluckly.github.io/tags/java/"}]},{"title":"PostgreSQL事务及隔离级别","slug":"database/PostgreSQL事务及隔离级别","date":"2017-11-08T16:07:33.000Z","updated":"2022-02-19T09:27:58.489Z","comments":true,"path":"2017/11/09/PostgreSQL事物及隔离级别/","link":"","permalink":"https://ysluckly.github.io/2017/11/09/PostgreSQL%E4%BA%8B%E7%89%A9%E5%8F%8A%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/","excerpt":"","text":"介绍PostgreSQL中提供了多种数据完整性的保证机制。如：约束、触发器、事务和锁管理等。 事务主要是为了保证一组相关数据库的操作能全部执行成功，从而保证数据的完整性。锁机制主要是控制多个用户对同一数据进行操作，使用锁机制可以解决并发问题。 事务事务是用户对一个数据库操作的一个序列，这些操作要么全做，要么全不做，是一个不可分割的单位。 事务管理的常用语句如下： BEGIN; SQL语句1; SQL语句2; ... COMMIT; 事务块是指包围在BEGIN和COMMIT之间的语句。在PostgreSQL9中，常用的事务块管理语句含义如下： START TRANSACTION：此命令表示开始一个新的事务块.BEGIN：初始化一个事务块。在BEGIN命令后的语句都将在一个事务里面执行，知道遇见COMMIT或ROLLBACK。它和START TRANSACTION是一样的。COMMIT：提交事务。ROLLBACK：事务失败时执行回滚操作。SET TRANSACTION：设置当前事务的特性。对后面的事务没有影响。 事务隔离及并发控制PostgreSQL是一个支持多用户的数据库，当多个用户操作同一数据库时，并发控制要保证所有用户可以高效的访问的同时不破坏数据的完整性。 数据库中数据的并发操作经常发生，而对数据的并发操作会带来下面的一些问题： 脏读一个事务读取了另一个未提交事务写入的数据。 不可重复读一个事务重新读取前面读取过的数据，发现该数据已经被另一个已经提交的事务修改。 幻读一个事务重新执行一个查询，返回符合查询条件的行的集合，发现满足查询条件的行的集合因为其它最近提交的事务而发生了改变。 SQL标准定义了四个级别的事务隔离。 | 隔离级别 | 脏读 | 幻读 | 不可重复性读取 || :- | :- ||读未提交 |可能 |可能 |可能||读已提交 |不可能| 可能 |可能||可重复读 |不可能 |可能 |不可能||可串行读 |不可能 |不可能 |不可能| 在PostgreSQL中，可以请求4种隔离级别中的任意一种。但是在内部，实际上只有两种独立的隔离级别，分别对应已提交和可串行化。如果选择了读未提交的级别，实际上使用的是读已提交，在选择可重复读级别的时候，实际上用的是可串行化，所以实际的隔离级别可能比选择的更严格。这是SQL标准允许的：4种隔离级别只定义了哪种现象不能发生，但是没有定义哪种现象一定发生。 PostgreSQL只提供两种隔离级别的原因是，这是把标准的隔离级别与多版本并发控制架构映射相关的唯一合理方法。 读已提交这是PostgreSQL中默认的隔离级别，当一个事务运行在这个隔离级别时，一个SELECT查询只能看到查询开始前已提交的数据，而无法看到未提交的数据或者在查询期间其他的事务已提交的数据。 可串行化可串行化提供最严格的事务隔离。这个级别模拟串行的事务执行，就好像事务是一个接着一个串行的执行。不过，这个级别的应用必须准备在串行化失败的时候重新启动事务。","categories":[{"name":"数据库","slug":"数据库","permalink":"https://ysluckly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://ysluckly.github.io/tags/PostgreSQL/"}]},{"title":"linux下修改按键ESC<=>CAPSLOCK和Control=>ALT_R","slug":"linux/linux下修改按键ESC-CAPSLOCK和Control-ALT-R","date":"2017-10-20T09:38:49.000Z","updated":"2022-02-19T09:27:58.519Z","comments":true,"path":"2017/10/20/linux下修改按键ESC<=>CAPSLOCK和Control=>ALT_R/","link":"","permalink":"https://ysluckly.github.io/2017/10/20/linux%E4%B8%8B%E4%BF%AE%E6%94%B9%E6%8C%89%E9%94%AEESC%3C=%3ECAPSLOCK%E5%92%8CControl=%3EALT_R/","excerpt":"","text":"使用 vim 过程中发现 esc 和 ctrl 按键很难按，小拇指没有那么长啊～～，而 caps_lock 和 alt_r(右alt) 很少用。 本教程将 esc 和 caps_lock 两个按键交换， alt_r(右alt) 改为 ctrl。 一、 esc 与 caps_lock 按键交换①. 创建 .xmodmaprc 文件。②. 加入以下内容： remove Lock = Caps_Lock add Lock = Escape keysym Caps_Lock = Escape keysym Escape = Caps_Lock ③. 执行 xmodmap .xmodmaprc 使之生效。 二、 将 右alt 改为 ctrl①. 查看需要修改键位的 keysym通过 xev | grep keycode 获取右 alt 的 keysym 为 Alt_R。如下图所示： ②. 查看 Alt_R 是哪个 modifier 使用的通过 xmodmap -pm 查看，发现 Alt_R 是作为 modifier mod1 使用的。如下图所示： ③. 修改 modifier xmodmap -e &#39;remove mod1 = Alt_R&#39; # 解除原来绑定 xmodmap -e &#39;add control = Alt_R&#39; # 作为 control 使用","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"vim","slug":"vim","permalink":"https://ysluckly.github.io/tags/vim/"},{"name":"keybord","slug":"keybord","permalink":"https://ysluckly.github.io/tags/keybord/"},{"name":"emacs","slug":"emacs","permalink":"https://ysluckly.github.io/tags/emacs/"},{"name":"linux","slug":"linux","permalink":"https://ysluckly.github.io/tags/linux/"}]},{"title":"[转]字符编解码的故事（ASCII，ANSI，Unicode，Utf-8区别）","slug":"linux/转-字符编解码的故事（ASCII，ANSI，Unicode，Utf-8区别）","date":"2017-09-25T11:15:00.000Z","updated":"2022-02-19T09:27:58.527Z","comments":true,"path":"2017/09/25/ascii-ansi-unicode-utf-8/","link":"","permalink":"https://ysluckly.github.io/2017/09/25/ascii-ansi-unicode-utf-8/","excerpt":"","text":"很久很久以前，有一群人，他们决定用8个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们认为8个开关状态作为原子单位很好，于是他们把这称为”字节”。 再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出更多的状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为”计算机”。 开始计算机只在美国用。八位的字节一共可以组合出256（2的8次方）种不同的状态。 他们把其中的编号从0开始的32种状态分别规定了特殊的用途，一但终端设备或者打印机遇上这些约定好的字节时，就要做一些约定的动作。遇上 00x10, 终端就换行，遇上0x07, 终端就向人们嘟嘟叫，例好遇上0x1b, 打印机就打印反白的字，对于终端就用彩色显示字母。他们看到这样很好，于是就把这些0x20（十进制32）以下的字节状态称为”控制码”。 他们又把所有的空格、标点符号、数字、大小写字母分别用连续的字节状态表示，一直编到了第127号，这样计算机就可以用不同字节来存储英语的 文字了。大家看到这样，都感觉很好，于是大家都把这个方案叫做 ANSI 的”Ascii”编码（American Standard Code for Information Interchange，美国信息互换标准代码）。当时世界上所有的计算机都用同样的ASCII方案来保存英文文字。 后来，就像建造巴比伦塔一样，世界各地的都开始使用计算机，但是很多国家用的不是英文，他们用到的许多字母在ASCII中根本没有，为了也可以在计算机中保存他们的文字，他们决定采用127号之后的空位来表示这些新的字母、符号，还加入了很多画表格时需要用下到的横线、竖线、交叉等形状，一直把序号编到了最后一个状态255。从128到255这一页的字符集被称”扩展字符集”。从此之后，贪婪的人类再没有新的状态可以用了，美帝国主义可能没有想到还有第三世界国家的人们也希望可以用到计算机吧！ 等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有6000多个常用汉字需要保存呢。但是这难不倒智慧的中国人民，我们不客气地把那些127号之后的奇异符号们直接取消掉，并且规定：一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，前面的一个字节（他称之为高字节）从0xA1用到 0xF7，后面一个字节（低字节）从0xA1到0xFE，这样我们就可以组合出大约7000多个简体汉字了。在这些编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在 ASCII 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了。 中国人民看到这样很不错，于是就把这种汉字方案叫做”GB2312”。GB2312 是对 ASCII 的中文扩展。 但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人（如朱镕基的“镕”字）。于是我们不得不继续把 GB2312 没有用到的码位找出来老实不客气地用上。 后来还是不够用，于是干脆不再要求低字节一定是127号之后的内码，只要第一个字节是大于127就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。结果扩展之后的编码方案被称为 GBK 标准，GBK 包括了 GB2312 的所有内容，同时又增加了近20000个新的汉字（包括繁体字）和符号。 后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，GBK 扩成了 GB18030。从此之后，中华民族的文化就可以在计算机时代中传承了。 中国的程序员们看到这一系列汉字编码的标准是好的，于是通称他们叫做 “DBCS”（Double Byte Charecter Set 双字节字符集）。在DBCS系列标准里，最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里，因此他们写的程序为了支持中文处理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了。那时候凡是受过加持，会编程的计算机僧侣们都要每天念下面这个咒语数百遍： “一个汉字算两个英文字符！一个汉字算两个英文字符……” 因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码，连大陆和台湾这样只相隔了150海里，使用着同一种语言的兄弟地区，也分别采用了不同的 DBCS 编码方案——当时的中国人想让电脑显示汉字，就必须装上一个”汉字系统”，专门用来处理汉字的显示、输入的问题，但是那个台湾的愚昧封建人士写的算命程序就必须加装另一套支持 BIG5 编码的什么”倚天汉字系统”才可以用，装错了字符系统，显示就会乱了套！这怎么办？而且世界民族之林中还有那些一时用不上电脑的穷苦人民，他们的文字又怎么办？ 真是计算机的巴比伦塔命题啊！ 正在这时，大天使加百列及时出现了——一个叫 ISO （国际标谁化组织）的国际组织决定着手解决这个问题。他们采用的方法很简单：废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符号的编码！他们打算叫它”Universal Multiple-Octet Coded Character Set”，简称 UCS, 俗称 “UNICODE”。 UNICODE 开始制订时，计算机的存储器容量极大地发展了，空间再也不成为问题了。于是 ISO 就直接规定必须用两个字节，也就是16位来统一表示所有的字符，对于ascii里的那些”半角”字符，UNICODE 包持其原编码不变，只是将其长度由原来的8位扩展为16位，而其他文化和语言的字符则全部重新统一编码。由于”半角”英文符号只需要用到低8位，所以其高 8位永远是0，因此这种大气的方案在保存英文文本时会多浪费一倍的空间。 这时候，从旧社会里走过来的程序员开始发现一个奇怪的现象：他们的strlen函数靠不住了，一个汉字不再是相当于两个字符了，而是一个！是 的，从 UNICODE 开始，无论是半角的英文字母，还是全角的汉字，它们都是统一的”一个字符”！同时，也都是统一的”两个字节”，请注意”字符”和”字节”两个术语的不同， “字节”是一个8位的物理存贮单元，而”字符”则是一个文化相关的符号。在UNICODE 中，一个字符就是两个字节。一个汉字算两个英文字符的时代已经快过去了。 从前多种字符集存在时，那些做多语言软件的公司遇上过很大麻烦，他们为了在不同的国家销售同一套软件，就不得不在区域化软件时也加持那个双字节字符集咒语，不仅要处处小心不要搞错，还要把软件中的文字在不同的字符集中转来转去。UNICODE 对于他们来说是一个很好的一揽子解决方案，于是从 Windows NT 开始，MS 趁机把它们的操作系统改了一遍，把所有的核心代码都改成了用 UNICODE 方式工作的版本，从这时开始，WINDOWS 系统终于无需要加装各种本土语言系统，就可以显示全世界上所有文化的字符了。 但是，UNICODE 在制订时没有考虑与任何一种现有的编码方案保持兼容，这使得 GBK 与UNICODE 在汉字的内码编排上完全是不一样的，没有一种简单的算术方法可以把文本内容从UNICODE编码和另一种编码进行转换，这种转换必须通过查表来进行。 如前所述，UNICODE 是用两个字节来表示为一个字符，他总共可以组合出65535不同的字符，这大概已经可以覆盖世界上所有文化的符号。如果还不够也没有关系，ISO已经准备了UCS-4方案，说简单了就是四个字节来表示一个字符，这样我们就可以组合出21亿个不同的字符出来（最高位有其他用途），这大概可以用到银河联邦成立那一天吧！ UNICODE 来到时，一起到来的还有计算机网络的兴起，UNICODE 如何在网络上传输也是一个必须考虑的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现了，顾名思义，UTF8就是每次8个位传输数据，而UTF16就是每次16个位，只不过为了传输时的可靠性，从UNICODE到 UTF时并不是直接的对应，而是要过一些算法和规则来转换。 受到过网络编程加持的计算机僧侣们都知道，在网络里传递信息时有一个很重要的问题，就是对于数据高低位的解读方式，一些计算机是采用低位先发送的方法，例如我们PC机采用的 INTEL 架构；而另一些是采用高位先发送的方式。在网络中交换数据时，为了核对双方对于高低位的认识是否是一致的，采用了一种很简便的方法，就是在文本流的开始时向对方发送一个标志符——如果之后的文本是高位在位，那就发送”FEFF”，反之，则发送”FFFE”。不信你可以用二进制方式打开一个UTF-X格式的文件，看看开头两个字节是不是这两个字节？ 下面是Unicode和UTF-8转换的规则 Unicode UTF-8 0000 - 007F 0xxxxxxx 0080 - 07FF 110xxxxx 10xxxxxx 0800 - FFFF 1110xxxx 10xxxxxx 10xxxxxx 例如”汉”字的Unicode编码是6C49。6C49在0800-FFFF之间，所以要用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将6C49写成二进制是：0110 1100 0100 1001，将这个比特流按三字节模板的分段方法分为0110 110001 001001，依次代替模板中的x，得到：1110-0110 10-110001 10-001001，即E6 B1 89，这就是其UTF8的编码。 讲到这里，我们再顺便说说一个很著名的奇怪现象：当你在 windows 的记事本里新建一个文件，输入”联通”两个字之后，保存，关闭，然后再次打开，你会发现这两个字已经消失了，代之的是几个乱码！呵呵，有人说这就是联通之所以拼不过移动的原因。 其实这是因为GB2312编码与UTF8编码产生了编码冲撞的原因。 当一个软件打开一个文本时，它要做的第一件事是决定这个文本究竟是使用哪种字符集的哪种编码保存的。软件一般采用三种方式来决定文本的字符集和编码： 检测文件头标识，提示用户选择，根据一定的规则猜测 最标准的途径是检测文本最开头的几个字节，开头字节 Charset&#x2F;encoding,如下表： EF BB BF UTF-8 FF FE UTF-16/UCS-2, little endian FE FF UTF-16/UCS-2, big endian FF FE 00 00 UTF-32/UCS-4, little endian. 00 00 FE FF UTF-32/UCS-4, big-endian. 当你新建一个文本文件时，记事本的编码默认是ANSI（代表系统默认编码，在中文系统中一般是GB系列编码）, 如果你在ANSI的编码输入汉字，那么他实际就是GB系列的编码方式，在这种编码下，”联通”的内码是： c1 1100 0001 aa 1010 1010 cd 1100 1101 a8 1010 1000 注意到了吗？第一二个字节、第三四个字节的起始部分的都是”110”和”10”，正好与UTF8规则里的两字节模板是一致的， 于是当我们再次打开记事本时，记事本就误认为这是一个UTF8编码的文件，让我们把第一个字节的110和第二个字节的10去掉，我们就得到了”00001 101010”，再把各位对齐，补上前导的0，就得到了”0000 0000 0110 1010”，不好意思，这是UNICODE的006A，也就是小写的字母”j”，而之后的两字节用UTF8解码之后是0368，这个字符什么也不是。这就是只有”联通”两个字的文件没有办法在记事本里正常显示的原因。 而如果你在”联通”之后多输入几个字，其他的字的编码不见得又恰好是110和10开始的字节，这样再次打开时，记事本就不会坚持这是一个utf8编码的文件，而会用ANSI的方式解读之，这时乱码又不出现了。","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"encoding","slug":"encoding","permalink":"https://ysluckly.github.io/tags/encoding/"}]},{"title":"搭建dubbo+zookeeper平台","slug":"back-end/搭建dubbo-zookeeper平台","date":"2017-09-25T08:29:07.000Z","updated":"2022-02-19T09:27:58.484Z","comments":true,"path":"2017/09/25/搭建dubbo+zookeeper平台/","link":"","permalink":"https://ysluckly.github.io/2017/09/25/%E6%90%AD%E5%BB%BAdubbo+zookeeper%E5%B9%B3%E5%8F%B0/","excerpt":"","text":"前言本文将介绍在SpringMVC+Spring+Mybatis项目中添加 dubbo 作为 rpc 服务。 文末有项目代码地址。 一.搭建zookeeper使用 docker 一句话创建： docker run -dit --name zookeeper --hostname zookeeper-host -v /data:/data -p 2181:2181 jplock/zookeeper:latest 二.安装zkui（非必须）这个项目为 zookeeper 提供一个 web 的管理界面。当然我们也可以直接在zookeeper中使用命令查看，所以此步骤可以忽略 在开始前需要安装 Java 环境、Maven 环境。 到 zkui 的项目中下载代码。git clone https://github.com/DeemOpen/zkui.git 执行 mvn clean install 生成jar文件。 将config.cfg复制到上一步生成的jar文件所在目录，然后修改配置文件中的zookeeper地址。 执行 nohup java -jar zkui-2.0-SNAPSHOT-jar-with-dependencies.jar &amp; 测试 http://localhost:9090，如果能看到如下页面，表示安装成功。 三.使用dubbo 在原来 SpringMVC+Spring+Mybatis 项目中，除了原来 spring 相关依赖外，还需要加入以下依赖 &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;version&gt;2.5.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt; &lt;artifactId&gt;zookeeper&lt;/artifactId&gt; &lt;version&gt;3.4.9&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.101tec&lt;/groupId&gt; &lt;artifactId&gt;zkclient&lt;/artifactId&gt; &lt;version&gt;0.2&lt;/version&gt; &lt;/dependency&gt; 定义服务接口 public interface IPersonService &#123; List&lt;Person&gt; listAll(); Person getById(Integer id); Integer delById(Person person); Integer updatePerson(Person person); &#125; 定义服务实现类&#96;&#96;&#96;java@Servicepublic class PersonService implements IPersonService { @Autowired PersonMapper personMapper; public List listAll() { return personMapper.findAll(); } public Person getById(Integer id) { return personMapper.findOneById(id); } public Integer delById(Person person) { return personMapper.del(person); } public Integer updatePerson(Person person) { return personMapper.update(person); } } 4. 配置生产者，注册服务信息 ```xml &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt; &lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:dubbo=&quot;http://code.alibabatech.com/schema/dubbo&quot; xmlns=&quot;http://www.springframework.org/schema/beans&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd&quot;&gt; &lt;!--定义了提供方应用信息，用于计算依赖关系；--&gt; &lt;dubbo:application name=&quot;demotest-provider&quot; /&gt; &lt;!-- 使用 zookeeper 注册中心暴露服务地址 --&gt; &lt;dubbo:registry address=&quot;zookeeper://192.168.0.86:2181&quot;/&gt; &lt;!-- 用dubbo协议在20880端口暴露服务 --&gt; &lt;dubbo:protocol name=&quot;dubbo&quot; port=&quot;20880&quot;/&gt; &lt;!-- 和本地bean一样实现服务 --&gt; &lt;bean id=&quot;personService&quot; class=&quot;com.ssm.service.PersonService&quot;/&gt; &lt;!-- 声明需要暴露的服务接口 --&gt; &lt;dubbo:service interface=&quot;com.ssm.iservice.IPersonService&quot; ref=&quot;personService&quot;/&gt; &lt;/beans&gt; 配置消费者，订阅服务&#96;&#96;&#96;xml &lt;dubbo:application name&#x3D;”demo-consumer”&#x2F;&gt; &lt;dubbo:registry address&#x3D;”zookeeper:&#x2F;&#x2F;192.168.0.86:2181”&#x2F;&gt; &lt;dubbo:reference id&#x3D;”personService” check&#x3D;”false” interface&#x3D;”com.ssm.iservice.IPersonService”&#x2F;&gt; ``` 6. 调用远程服务 配置完成后，我们就可以像使用本地 bean 一样，使用 rpc 的 service； ```java @Controller public class IndexController { @Autowired IPersonService personService; @RequestMapping(&quot;/index.html&quot;) public String index(Model model) &#123; RpcContext.getContext().setAttachment(&quot;index&quot;, &quot;1&quot;);//测试ThreadLocal List&lt;Person&gt; list = personService.listAll(); model.addAttribute(&quot;command&quot;,list); return &quot;index&quot;; &#125; } ## 最后 至此，单机运行的 rpc 服务已搭建完成。 代码传送文 [ssm](https://github.com/yelog/ssm)","categories":[{"name":"后端","slug":"后端","permalink":"https://ysluckly.github.io/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"dubbo","slug":"dubbo","permalink":"https://ysluckly.github.io/tags/dubbo/"},{"name":"zookeeper","slug":"zookeeper","permalink":"https://ysluckly.github.io/tags/zookeeper/"}]},{"title":"docker报错集锦","slug":"linux/docker报错集锦","date":"2017-09-25T02:03:50.000Z","updated":"2022-02-19T09:27:58.517Z","comments":true,"path":"2017/09/25/docker-errors/","link":"","permalink":"https://ysluckly.github.io/2017/09/25/docker-errors/","excerpt":"","text":"docker创建容器1. iptables failed创建 tale 容器时，如下命令： docker run -d --privileged --hostname tale --name tale \\ -v /etc/localtime:/etc/localtime:ro \\ -v /home/tale:/var/tale_home -p 127.0.0.1:234:9000 \\ -m 1024m --memory-swap -1 tale:1.0 然后就报了以下错误： docker: Error response from daemon: driver failed programming external connectivity on endpoint tale (263775ff559176224428ec44dcec416a1c20e6c69198d9760b38f35849914260): iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 127.0.0.1 --dport 234 -j DNAT --to-destination 172.17.0.4:9000 ! -i docker0: iptables: No chain/target/match by that name. (exit status 1). 解决办法：重启 docker 服务： $ service docker restart","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://ysluckly.github.io/tags/docker/"}]},{"title":"Hexo加速渲染速度之fragment_cache","slug":"tools/hexo-fragment_cache","date":"2017-09-21T11:34:37.000Z","updated":"2022-02-19T09:27:58.562Z","comments":true,"path":"2017/09/21/hexo-fragment_cache/","link":"","permalink":"https://ysluckly.github.io/2017/09/21/hexo-fragment_cache/","excerpt":"","text":"前文从开发 3-hexo 主题到现在已过去 9 个月时间了，累计在博客中写 132 篇文章了。 现在发现了严重的问题，hexo generate 渲染的速度越来越慢，现在132篇左右，每次渲染时间到达了 50+ s，相当不爽。 今日抽时间，查看了官方api，看到了 fragment_cache 局部缓存这个东西，解决了渲染速度的问题。 使用官方文档局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 &lt;%- fragment_cache(id, fn); %&gt; 替换简单文本区域a. 我们可以将所有页面都一样的区域，如下所示，缓存下来。当下一篇文章在渲染到这个位置时，将不再渲染，直接拿缓存数据。 &lt;%- fragment_cache(&#39;header&#39;, function()&#123; return partial(&#39;&lt;head&gt;&lt;/head&gt;&#39;); &#125;) %&gt; b. 文章模块也可以使用，原来公共引用部分（没有和当前文章耦合的内容）使用下面的方式： &lt;%- partial(&#39;_partial/header&#39;); %&gt; 改进为以下代码： &lt;%- fragment_cache(&#39;header&#39;, function()&#123; return partial(&#39;_partial/header&#39;); &#125;) %&gt; 最后这个语法只适用于所有页面都相同，不随文章内容变化的部分。 作者在 3-hexo 中加入了此语法，渲染132篇文章的速度已从 50+s 到现在 3s 左右了。","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"fragment_cache","slug":"fragment-cache","permalink":"https://ysluckly.github.io/tags/fragment-cache/"}]},{"title":"[转]浏览器前进/后退缓存（BF Cache）","slug":"front-end/bf-cache","date":"2017-09-21T07:35:24.000Z","updated":"2022-02-19T09:27:58.496Z","comments":true,"path":"2017/09/21/bf-cache/","link":"","permalink":"https://ysluckly.github.io/2017/09/21/bf-cache/","excerpt":"","text":"[浏览器前进/后退缓存](https://developer.mozilla.org/en-US/docs/Working_with_BFCache)（Backward/Forward Cache，BF Cache）是指浏览器在前进后退过程中， 会应用更强的缓存策略，表现为 DOM、window、甚至 JavaScript 对象被缓存，以及同步 XHR 也被缓存。 这一现象在移动端浏览器尤为常见，除 Chrome for Android、Android Browser 之外的浏览器基本都会触发。 BF Cache 本来是一项浏览器优化，但在某些情况下（比如前端路由的 Web App）会引起困惑。 本文主要讨论 BF Cache 的行为、如何检测 BF Cache 缓存、以及如何 workaround。 缓存行为BF Cache 是一种浏览器优化，HTML 标准并未指定其如何进行缓存，因此缓存行为是与浏览器实现相关的。 User agents may discard the Document objects of entries other than the current entry that are not referenced from any script, reloading the pages afresh when the user or script navigates back to such pages. This specification does not specify when user agents should discard Document objects and when they should cache them. – Session history and navigation, WHATWG Desktop Chrome：阻塞的资源和同步发出的 XHR 都会被缓存，但不缓存渲染结果。因此可以看到明显的载入过程，此时脚本也会重新执行。 Chrome for Android：有些情况下不会缓存，缓存时与 Desktop Chrome 行为一致。 Desktop Firefox：页面会被 Frozen，定时器会被暂停，DOM、Window、JavaScript 对象会被缓存，返回时页面脚本重新开始运行。 iOS Safari：渲染结果也会被缓存，因此才能支持左右滑动手势来前进&#x2F;后退。 Desktop Firefox 暂停计时器的行为非常有趣，以下 HTML 中显示一个每秒加一的数字。 当页面导航时就会暂停，返回时继续增加（因此直接使用 setInterval 倒计时不仅不精确，而且不可靠）： &lt;span id=&quot;timer-tick&quot;&gt;&lt;/span&gt; &lt;a href=&quot;http://harttle.com&quot;&gt;External Link&lt;/a&gt; &lt;script&gt; var i = 0 setInterval(() =&gt; document.querySelector(&#39;#timer-tick&#39;).innerHTML = i++, 1000) &lt;/script&gt; pagehide&#x2F;pageshow 事件会话（Session）中的某一个页面显示&#x2F;隐藏时，会触发 pagehide 和 pageshow 事件。 这两个事件都有一个 persisted 属性用来指示当前页面是否被 BF Cache 缓存。 因此可以通过 persisted 属性来达到禁用 BF Cache 的效果： window.onpageshow = function(event) &#123; if (event.persisted) &#123; window.location.reload() &#125; &#125;; 注意无论页面是否被缓存 pageshow 总会触发，因此需要检测器 persisted 属性。 另外 pageshow 的时机总是在 load 事件之后。 这一点很容易检测，下面的 pageshow 日志总在 load 之前： window.addEventListener(&#39;pageshow&#39;, function () &#123; console.log(&#39;on pageshow&#39;) &#125;) window.addEventListener(&#39;load&#39;, function () &#123; console.log(&#39;load&#39;) &#125;) XHR 缓存同步（阻塞加载的）脚本发出的 XMLHttpRequest 也会被 Chrome 强制缓存， 因此即使在断网的情况下后退到访问过的页面仍然是可以完美渲染的。 如果页面中有这样一段外部脚本： sendXHR(); function sendXHR () &#123; var xhr = new XMLHttpRequest() xhr.open(&#39;GET&#39;, &#39;/data.json&#39;) xhr.onreadystatechange = function () &#123; if (xhr.readyState === XMLHttpRequest.DONE &amp;&amp; xhr.status === 200) &#123; console.log(&#39;xhr arrived&#39;, xhr.responseText) &#125; &#125; xhr.send() &#125; 超链接跳转后回来，该 xhr 也会被缓存。注意下图中的 XHR 一项 size 为 “from disk cache”： 为了强制发送 xhr，可以将 xhr 改为异步发送，或者加一个不重要的 query。 setTimeout(sendXHR, 1000) 这样就能看到 xhr 真正发送出去了 :) 异步 xhr 缓存时机未经兼容性测试， 还是建议读者使用一个随机产生的 query。","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"浏览器","slug":"浏览器","permalink":"https://ysluckly.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"js","slug":"js","permalink":"https://ysluckly.github.io/tags/js/"}]},{"title":"解决iphone下后退不执行js的问题","slug":"front-end/解决iphone下后退不执行js的问题","date":"2017-09-21T07:25:32.000Z","updated":"2022-02-19T09:27:58.506Z","comments":true,"path":"2017/09/21/iphone-bf-no-run-js/","link":"","permalink":"https://ysluckly.github.io/2017/09/21/iphone-bf-no-run-js/","excerpt":"","text":"直接上解决方法不论页面是否被缓存，都会触发 pageshow，所以后退后需要执行的方法可以都放在下面事件内： window.addEventListener(&#39;pageshow&#39;, function () &#123; console.log(&#39;on pageshow&#39;) &#125;) 浏览器缓存行为 的详细介绍可以参考： [转]浏览器前进&#x2F;后退缓存（BF Cache）","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"js","slug":"js","permalink":"https://ysluckly.github.io/tags/js/"}]},{"title":"CentOS7使用Firewalld","slug":"linux/CentOS7使用Firewalld","date":"2017-09-19T01:53:53.000Z","updated":"2022-02-19T09:27:58.508Z","comments":true,"path":"2017/09/19/CentOS7使用Firewalld/","link":"","permalink":"https://ysluckly.github.io/2017/09/19/CentOS7%E4%BD%BF%E7%94%A8Firewalld/","excerpt":"","text":"介绍FirewallD 提供了支持网络&#x2F;防火墙区域(zone)定义网络链接以及接口安全等级的动态防火墙管理工具。它支持 IPv4, IPv6 防火墙设置以及以太网桥接，并且拥有运行时配置和永久配置选项。它也支持允许服务或者应用程序直接添加防火墙规则的接口。 安装$ yum install firewalld # 如果需要图形界面的话，则再安装 $ yum install firewall-config zoneFirewall 能将不同的网络连接归类到不同的信任级别。 $ firewall-cmd --list-all-zones #查看所有zone信息 Zone 提供了以下几个级别： drop: 丢弃所有进入的包，而不给出任何响应 block: 拒绝所有外部发起的连接，允许内部发起的连接 public: 允许指定的进入连接 external: 同上，对伪装的进入连接，一般用于路由转发 dmz: 允许受限制的进入连接 work: 允许受信任的计算机被限制的进入连接，类似 workgroup home: 同上，类似 homegroup internal: 同上，范围针对所有互联网用户 trusted: 信任所有连接 过滤规则 source: 根据源地址过滤 interface: 根据网卡过滤 service: 根据服务名过滤 port: 根据端口过滤 icmp-block: icmp 报文过滤，按照 icmp 类型配置 masquerade: ip 地址伪装 forward-port: 端口转发 rule: 自定义规则 过滤规则的优先级遵循如下顺序 source interface firewalld.conf 使用$ systemctl start firewalld # 启动 $ systemctl stop firewalld # 关闭 $ systemctl enable firewalld # 开机启动 $ systemctl disable firewalld # 取消开机启动 具体的规则管理，可以使用 firewall-cmd,具体的使用方法 $ firewall-cmd --help --zone=NAME # 指定 zone --permanent # 永久修改，--reload 后生效 --timeout=seconds # 持续效果，到期后自动移除，用于调试，不能与 --permanent 同时使用 查看规则查看运行状态 $ firewall-cmd --state 查看已被激活的 Zone 信息 $ firewall-cmd --get-active-zones public interfaces: eth0 eth1 查看指定接口的 Zone 信息 $ firewall-cmd --get-zone-of-interface=eth0 public 查看指定级别的接口 $ firewall-cmd --zone=public --list-interfaces eth0 查看指定级别的所有信息，譬如 public $ firewall-cmd --zone=public --list-all public (default, active) interfaces: eth0 sources: services: dhcpv6-client http ssh ports: masquerade: no forward-ports: icmp-blocks: rich rules: 查看所有级别被允许的信息 $ firewall-cmd --get-service 查看重启后所有 Zones 级别中被允许的服务，即永久放行的服务 $ firewall-cmd --get-service --permanent 管理规则$ firewall-cmd --panic-on # 丢弃 $ firewall-cmd --panic-off # 取消丢弃 $ firewall-cmd --query-panic # 查看丢弃状态 $ firewall-cmd --reload # 更新规则，不重启服务 $ firewall-cmd --complete-reload # 更新规则，重启服务 添加某接口至某信任等级，譬如添加 eth0 至 public，永久修改 $ firewall-cmd --zone=public --add-interface=eth0 --permanent 设置 public 为默认的信任级别 $ firewall-cmd --set-default-zone=public a. 管理端口列出 dmz 级别的被允许的进入端口 $ firewall-cmd --zone=dmz --list-ports 允许 tcp 端口 8080 至 dmz 级别 $ firewall-cmd --zone=dmz --add-port=8080/tcp 允许某范围的 udp 端口至 public 级别，并永久生效 $ firewall-cmd --zone=public --add-port=5060-5059/udp --permanent b. 网卡接口列出 public zone 所有网卡 $ firewall-cmd --zone=public --list-interfaces 将 eth0 添加至 public zone，永久 $ firewall-cmd --zone=public --permanent --add-interface=eth0 eth0 存在与 public zone，将该网卡添加至 work zone，并将之从 public zone 中删除 $ firewall-cmd --zone=work --permanent --change-interface=eth0 删除 public zone 中的 eth0，永久 $ firewall-cmd --zone=public --permanent --remove-interface=eth0 c. 管理服务添加 smtp 服务至 work zone $ firewall-cmd --zone=work --add-service=smtp 移除 work zone 中的 smtp 服务 $ firewall-cmd --zone=work --remove-service=smtp d. 配置 external zone 中的 ip 地址伪装查看 $ firewall-cmd --zone=external --query-masquerade 打开伪装 $ firewall-cmd --zone=external --add-masquerade 关闭伪装 $ firewall-cmd --zone=external --remove-masquerade e. 配置 public zone 的端口转发要打开端口转发，则需要先 $ firewall-cmd --zone=public --add-masquerade 然后转发 tcp 22 端口至 3753 $ firewall-cmd --zone=public --add-forward-port=port=22:proto=tcp:toport=3753 转发 22 端口数据至另一个 ip 的相同端口上 $ firewall-cmd --zone=public --add-forward-port=port=22:proto=tcp:toaddr=192.168.1.100 转发 22 端口数据至另一 ip 的 2055 端口上 $ firewall-cmd --zone=public --add-forward-port=port=22:proto=tcp:toport=2055:toaddr=192.168.1.100 f. 配置 public zone 的 icmp查看所有支持的 icmp 类型 $ firewall-cmd --get-icmptypes destination-unreachable echo-reply echo-request parameter-problem redirect router-advertisement router-solicitation source-quench time-exceeded 列出 $ firewall-cmd --zone=public --list-icmp-blocks 添加 echo-request 屏蔽 $ firewall-cmd --zone=public --add-icmp-block=echo-request [--timeout=seconds] 移除 echo-reply 屏蔽 $ firewall-cmd --zone=public --remove-icmp-block=echo-reply g. IP 封禁 $ firewall-cmd --permanent --add-rich-rule=&quot;rule family=&#39;ipv4&#39; source address=&#39;222.222.222.222&#39; reject&quot; 当然，我们仍然可以通过 ipset 来封禁 ip 封禁 ip $ firewall-cmd --permanent --zone=public --new-ipset=blacklist --type=hash:ip $ firewall-cmd --permanent --zone=public --ipset=blacklist --add-entry=222.222.222.222 封禁网段 $ firewall-cmd --permanent --zone=public --new-ipset=blacklist --type=hash:net $ firewall-cmd --permanent --zone=public --ipset=blacklist --add-entry=222.222.222.0/24 倒入 ipset 规则 $ firewall-cmd --permanent --zone=public --new-ipset-from-file=/path/blacklist.xml 然后封禁 blacklist $ firewall-cmd --permanent --zone=public --add-rich-rule=&#39;rule source ipset=blacklist drop&#39; 重新载入以生效 $ firewall-cmd --reload","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"firewall","slug":"firewall","permalink":"https://ysluckly.github.io/tags/firewall/"}]},{"title":"docker备份恢复之save与export","slug":"linux/docker-save-与-docker-export","date":"2017-09-18T14:38:52.000Z","updated":"2022-02-19T09:27:58.513Z","comments":true,"path":"2017/09/18/docker-save-export/","link":"","permalink":"https://ysluckly.github.io/2017/09/18/docker-save-export/","excerpt":"","text":"docker save导出docker save 命令用于持久化 镜像，先获得镜像名称，再执行保存： # 通过此命令查出要持久化的镜像名称 $ docker images # 持久化镜像名为 image_name 的镜像， $ docker save image_name -o ~/save.tar 注意： 如果镜像是在远程仓库，执行保存镜像的时候可能会报 Cowardly refusing to save to a terminal. Use the -o flag or redirect. 的错，可以通过 docker save image_name &gt; image_name.tar 将镜像从远程仓库持久化到本地。 导入# 导入 save.tar $ docker load &lt; ~/save.tar # 查看镜像 $ docker images images docker export导出docker export 命令用于持久化 容器，先获取容器ID，再执行保存。 # 通过此命令查出要持久化的容器ID $ docker ps -a # 持久化容器id为 container_id 的容器 $ docker export container_id &gt; ~/export.tar 导入# 从 export.tar 导入镜像 $ cat ~/export.tar | docker import - my-images:latest # 查看镜像 $ sudo docker images 不同通过 sudo docker images --tree 可以查看到镜像的所有层，就会发现， docker export 丢失了所有的历史，而docker save 则会保存所有历史。","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://ysluckly.github.io/tags/docker/"}]},{"title":"sudo命令免密码设置","slug":"linux/sudo命令免密码设置","date":"2017-09-11T01:30:55.000Z","updated":"2022-02-19T09:27:58.523Z","comments":true,"path":"2017/09/11/sudo命令免密码设置/","link":"","permalink":"https://ysluckly.github.io/2017/09/11/sudo%E5%91%BD%E4%BB%A4%E5%85%8D%E5%AF%86%E7%A0%81%E8%AE%BE%E7%BD%AE/","excerpt":"","text":"如果某台linux只有自己在使用，比如个人系统，每次调用 sudo 时都需要输入密码，长期下来着实厌烦，因此本文介绍如何配置 sudo 命令，使其在运行时不需要输入密码。 步骤 执行命令 $ sudo visudo 添加以下两行， 下面的 sys 表示 sys 组成员不用密码使用sudo aaronkilik ALL=(ALL) NOPASSWD: ALL %sys ALL=(ALL) NOPASSWD: ALL 现在在使用 sudo 命令， 将不再需要输入密码。 扩展如果只允许用户使用 kill 和 rm 命令时，不需要输入密码，见如下配置 %sys ALL=(ALL) NOPASSWD: /bin/kill, /bin/rm","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://ysluckly.github.io/tags/linux/"}]},{"title":"搭建Maven私服-Nexus","slug":"linux/搭建Maven私服-Nexus","date":"2017-09-06T15:01:31.000Z","updated":"2022-02-19T09:27:58.525Z","comments":true,"path":"2017/09/06/build-Maven-Nexus/","link":"","permalink":"https://ysluckly.github.io/2017/09/06/build-Maven-Nexus/","excerpt":"","text":"Maven 私服，可以代理远程仓库和部署自己或第三方构件。本文介绍使用最广泛搭建 Maven 私服的工具： Sonatype Nexus。 作者环境 本次搭建私服是在局域网的一台服务器上，操作系统为 CentOS 。 需要部署到私服的项目 soul ssm 项目需要引用 soul 安装Java 确保服务器已经安装了 java 环境，这个过程不是本文重点，安装过程自行百度。 安装Nexus 官网 pro 版本的是需要付费的。所以我们使用免费的 OSS 版本，下载地址 (https://www.sonatype.com/download-oss-sonatype) # 上传到服务器并解压 $ tar xvf nexus-3.5.1-02-unix.tar.gz 启动Nexus# 启动服务 $ cd /nexus-3.5.1-02/bin/ $ ./nexus start 验证打开网址：(http://192.168.0.86:8081/) , ip 为搭建私服的服务器 ip 。用户名&#x2F;密码： admin&#x2F;admin123出现一下画面，就说明安装成功了。 发布soul项目到私服创建仓库 创建yelog-release仓库（名字自定义）, type选择 ： release 创建yelog-snapshot仓库（名字自定义）， type选择 ： snapshot重复上面 ① 和 ② 步，根据下图选择类型: 两个都创建完成后，效果如下： pom中添加部署配置url 复制上图中新建的仓库的 copy 按钮，复制url。 &lt;distributionManagement&gt; &lt;repository&gt; &lt;id&gt;yelog-release&lt;/id&gt; &lt;name&gt;Release Repository of yelog&lt;/name&gt; &lt;url&gt;http://192.168.0.86:8081/repository/yelog-release/&lt;/url&gt; &lt;/repository&gt; &lt;snapshotRepository&gt; &lt;id&gt;yelog-snapshot&lt;/id&gt; &lt;name&gt;Snapshot Repository of yelog&lt;/name&gt; &lt;url&gt;http://192.168.0.86:8081/repository/yelog-snapshot/&lt;/url&gt; &lt;/snapshotRepository&gt; &lt;/distributionManagement&gt; 在maven的 settings.xml 中配置这里配置 maven 的账号密码，id 要与 distributionManagement 中的id一致。默认账号&#x2F;密码：admin&#x2F;admin123 &lt;servers&gt; &lt;server&gt; &lt;id&gt;yelog-realease&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin123&lt;/password&gt; &lt;/server&gt; &lt;server&gt; &lt;id&gt;yelog-snapshot&lt;/id&gt; &lt;username&gt;admin&lt;/username&gt; &lt;password&gt;admin123&lt;/password&gt; &lt;/server&gt; &lt;/servers&gt; 执行maven命令部署项目到私服上我这里直接使用IDE的插件执行部署完成后，可以在 yelog-snapshot 仓库中，查看部署的情况，如下图所示 从私服拉去依赖库 上一步我们已经将项目 soul 部署到私服上了，这一步介绍项目 ssm 如何依赖引用 soul。私服中的 maven-central 可以链接远程仓库。这样，当有依赖在私服中找不到后，就可以通过远程仓库自动下载依赖。 pom 文件中添加如下配置 public库成员仓库中添加我们自定义的仓库 配置远程仓库为私服地址。&lt;repositories&gt; &lt;repository&gt; &lt;id&gt;public&lt;/id&gt; &lt;name&gt;public Repository&lt;/name&gt; &lt;url&gt;http://192.168.0.86:8081/repository/maven-public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;public&lt;/id&gt; &lt;name&gt;Public Repositories&lt;/name&gt; &lt;url&gt;http://192.168.0.86:8081/repository/maven-public/&lt;/url&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; 引入依赖&lt;dependency&gt; &lt;groupId&gt;org.soul&lt;/groupId&gt; &lt;artifactId&gt;commons&lt;/artifactId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/dependency&gt; ssm项目就可以引用到soul代码 本文结束。","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"java","slug":"java","permalink":"https://ysluckly.github.io/tags/java/"},{"name":"maven","slug":"maven","permalink":"https://ysluckly.github.io/tags/maven/"},{"name":"nexus","slug":"nexus","permalink":"https://ysluckly.github.io/tags/nexus/"}]},{"title":"Mybatis常用Mapper语句","slug":"database/mybatis-Mapper","date":"2017-08-04T07:54:47.000Z","updated":"2022-02-19T09:27:58.493Z","comments":true,"path":"2017/08/04/mybatis-Mapper/","link":"","permalink":"https://ysluckly.github.io/2017/08/04/mybatis-Mapper/","excerpt":"","text":"插入/* 简单插入 */ &lt;insert id=&quot;insertOne&quot; parameterType=&quot;Person&quot;&gt; insert into person (id, name, age) VALUES(#&#123;id&#125;, #&#123;name&#125;, #&#123;age&#125;); &lt;/insert&gt; /* 插入并返回对象的主键（数据库序列） */ &lt;insert id=&quot;insertOne&quot; parameterType=&quot;Person&quot; useGeneratedKeys=&quot;true&quot; keyProperty=&quot;id&quot;&gt; insert into person (name, age) VALUES(#&#123;name&#125;, #&#123;age&#125;); &lt;/insert&gt; 更新/* 简单更新 */ &lt;update id=&quot;updateName&quot;&gt; update person set name = #&#123;name&#125; where id = #&#123;id&#125;; &lt;/update&gt; /* 更新值并返回 */ &lt;select id=&quot;updateAge&quot; parameterType=&quot;Person&quot;&gt; update person set age = age + #&#123;age&#125; where id = #&#123;id&#125; returning age; &lt;/select&gt; 插入或更新记录玩家在某种类型游戏下的统计记录： 如果没有记录，则从插入，count字段为1；如果有记录，则更新count字段+1； 方式一 &lt;insert id=&quot;addCount&quot; parameterType=&quot;CountRecord&quot;&gt; /*如果有记录，则更新；无记录，则noting*/ update count_record set &quot;count&quot; = &quot;count&quot;+1 where type_id = #&#123;typeId&#125; and user_id = #&#123;userId&#125;; /*如果有记录，则noting；无记录，则插入*/ insert into count_record(type_id, user_id, &quot;count&quot;) select #&#123;typeId&#125;, #&#123;userId&#125;, 1 where not exists (select * from count where type_id = #&#123;typeId&#125; and user_id = #&#123;userId&#125;); &lt;/insert&gt; 方式二 /* 利用 PostgreSQL 的 conflic 特性 */ &lt;insert id=&quot;addCount&quot; parameterType=&quot;CountRecord&quot;&gt; insert into count_record(type_id, user_id, &quot;count&quot;) VALUES (#&#123;typeId&#125;, #&#123;userId&#125;, #&#123;count&#125;) on conflict(type_id,user_id) do update set &quot;count&quot; = count_record.&quot;count&quot; + 1 &lt;/insert&gt;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://ysluckly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://ysluckly.github.io/tags/mybatis/"}]},{"title":"MathJax适配Pjax","slug":"tools/MathJax-pjax","date":"2017-07-05T11:24:10.000Z","updated":"2022-02-19T09:27:58.549Z","comments":true,"path":"2017/07/05/MathJax-pjax/","link":"","permalink":"https://ysluckly.github.io/2017/07/05/MathJax-pjax/","excerpt":"","text":"hexo 添加 MathJax 的过程网上很多，这里就不细讲，这里贴一张写的不错的文章 Hexo博客(13)添加MathJax数学公式渲染 由于 3-hexo 这个主题使用了 pjax ，刷新和第一次加载没有问题，但是点到其他文章，再点回来，渲染就无效了。 这个问题和之前适配多说和高亮时，是同样的问题，只需要在下面配置即可。 $(document).on(&#123; /*pjax请求回来页面后触发的事件*/ &#39;pjax:end&#39;: function () &#123; /*渲染MathJax数学公式*/ $.getScript(&#39;//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML&#39;,function () &#123; MathJax.Hub.Typeset(); &#125;); &#125; &#125;); 这样就解决了pjax的适配问题。","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"mathjax","slug":"mathjax","permalink":"https://ysluckly.github.io/tags/mathjax/"},{"name":"pjax","slug":"pjax","permalink":"https://ysluckly.github.io/tags/pjax/"}]},{"title":"3-hexo配置MathJax数学公式渲染","slug":"tools/3-hexo-mathjax","date":"2017-07-05T07:09:42.000Z","updated":"2022-02-19T09:27:58.542Z","comments":true,"path":"2017/07/05/3-hexo-mathjax/","link":"","permalink":"https://ysluckly.github.io/2017/07/05/3-hexo-mathjax/","excerpt":"","text":"在用 markdown 写文档时，免不了碰到数学公式。 处理hexo的MarkDown渲染器与MathJax的冲突由于hexo的MarkDown渲染器与MathJax有冲突，所以在使用之前需要修改两个地方。 编辑 node_modules\\marked\\lib\\marked.js 脚本 将451行 ，这一步取消了对 \\\\,\\&#123;,\\&#125; 的转义(escape)escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()# +\\-.!_&gt;])/, 改为 escape: /^\\\\([`*\\[\\]()# +\\-.!_&gt;])/, 将459行，这一步取消了对斜体标记 _ 的转义em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 改为 em:/^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 开启MathJax修改 3-hexo/_config.yml # MathJax 数学公式支持 mathjax: on: true #是否启用 per_page: false # 若只渲染单个页面，此选项设为false，页面内加入 mathjax: true 考虑到页面的加载速度，支持渲染单个页面。 设置 per_page: false ,在需要渲染的页面内 加入 mathjax: true 这样，就可以在页面内写MathJax公式了。 MathJax公式书写公式书写依然按照MarkDown语法来，基本上也和LaTeX相同，单 $ 符引住的是行内公式，双$符引住的是行间公式。 MathJax公式书写参考MathJax basic tutorial and quick reference 1.MathJax行内公式含有下划线 _ 的公式 $x_mu$ ： $x_mu$ 希腊字符 $\\sigma$ ： $\\sigma$ 双 \\\\ 公式内换行 $$ f(n) = \\begin&#123;cases&#125; n/2, &amp; \\text&#123;if $n$ is even&#125; \\\\ 3n+1, &amp; \\text&#123;if $n$ is odd&#125; \\end&#123;cases&#125; $$ $$f(n) &#x3D;\\begin{cases}n&#x2F;2, &amp; \\text{if $n$ is even} \\3n+1, &amp; \\text{if $n$ is odd}\\end{cases}$$ 行内公式 $y=ax+b$：$y&#x3D;ax+b$ 行内公式 $\\cos 2\\theta = \\cos^2 \\theta - \\sin^2 \\theta = 2 \\cos^2 \\theta$：$\\cos 2\\theta &#x3D; \\cos^2 \\theta - \\sin^2 \\theta &#x3D; 2 \\cos^2 \\theta$ 行内公式 $M(\\beta^&#123;\\ast&#125;(D),D) \\subseteq C$ ： $M(\\beta^{\\ast}(D),D) \\subseteq C$ 2.MathJax行间公式行间公式$$ \\sum_&#123;i=0&#125;^n i^2 = \\frac&#123;(n^2+n)(2n+1)&#125;&#123;6&#125; $$：$$ \\sum_{i&#x3D;0}^n i^2 &#x3D; \\frac{(n^2+n)(2n+1)}{6} $$ 行间公式$$ x = \\dfrac&#123;-b \\pm \\sqrt&#123;b^2 - 4ac&#125;&#125;&#123;2a&#125; $$：$$ x &#x3D; \\dfrac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} $$ 3.MathJax公式自动编号书写时使用 $$ \\begin&#123;equation&#125; \\end&#123;equation&#125; $$ 进行公式自动编号，同时会自动连续编号，例如： $$ \\begin&#123;equation&#125; \\sum_&#123;i=0&#125;^n F_i \\cdot \\phi (H, p_i) - \\sum_&#123;i=1&#125;^n a_i \\cdot ( \\tilde&#123;x_i&#125;, \\tilde&#123;y_i&#125;) + b_i \\cdot ( \\tilde&#123;x_i&#125;^2 , \\tilde&#123;y_i&#125;^2 ) \\end&#123;equation&#125; $$ $$ \\begin&#123;equation&#125; \\beta^*(D) = \\mathop&#123;argmin&#125; \\limits_&#123;\\beta&#125; \\lambda &#123;||\\beta||&#125;^2 + \\sum_&#123;i=1&#125;^n max(0, 1 - y_i f_&#123;\\beta&#125;(x_i)) \\end&#123;equation&#125; $$ $$\\begin{equation}\\sum_{i&#x3D;0}^n F_i \\cdot \\phi (H, p_i) - \\sum_{i&#x3D;1}^n a_i \\cdot ( \\tilde{x_i}, \\tilde{y_i}) + b_i \\cdot ( \\tilde{x_i}^2 , \\tilde{y_i}^2 )\\end{equation}$$$$\\begin{equation}\\beta^*(D) &#x3D; \\mathop{argmin} \\limits_{\\beta} \\lambda {||\\beta||}^2 + \\sum_{i&#x3D;1}^n max(0, 1 - y_i f_{\\beta}(x_i))\\end{equation}$$ MathJax公式手动编号可以在公式书写时使用 \\tag&#123;手动编号&#125; 添加手动编号，例如： $$ \\begin&#123;equation&#125; \\sum_&#123;i=0&#125;^n F_i \\cdot \\phi (H, p_i) - \\sum_&#123;i=1&#125;^n a_i \\cdot ( \\tilde&#123;x_i&#125;, \\tilde&#123;y_i&#125;) + b_i \\cdot ( \\tilde&#123;x_i&#125;^2 , \\tilde&#123;y_i&#125;^2 ) \\tag&#123;1.2.3&#125; \\end&#123;equation&#125; $$ $$\\begin{equation}\\sum_{i&#x3D;0}^n F_i \\cdot \\phi (H, p_i) - \\sum_{i&#x3D;1}^n a_i \\cdot ( \\tilde{x_i}, \\tilde{y_i}) + b_i \\cdot ( \\tilde{x_i}^2 , \\tilde{y_i}^2 ) \\tag{1.2.3}\\end{equation}$$ 不加 \\begin&#123;equation&#125; \\end&#123;equation&#125; 也可以，例如： $$ \\beta^*(D) = \\mathop&#123;argmin&#125; \\limits_&#123;\\beta&#125; \\lambda &#123;||\\beta||&#125;^2 + \\sum_&#123;i=1&#125;^n max(0, 1 - y_i f_&#123;\\beta&#125;(x_i)) \\tag&#123;我的公式3&#125; $$ $$\\beta^*(D) &#x3D; \\mathop{argmin} \\limits_{\\beta} \\lambda {||\\beta||}^2 + \\sum_{i&#x3D;1}^n max(0, 1 - y_i f_{\\beta}(x_i)) \\tag{我的公式3}$$ 行内公式加\\tag{}后会自动成为行间公式，例如： $z = (p_0, ..... , p_n) \\tag&#123;公式21&#125; $$z &#x3D; (p_0, ….. , p_n) \\tag{公式21} $ 4.其他公式书写技巧如何将下标放到正下方？① 如果是数学符号，那么直接用 \\limits 命令放在正下方，如Max函数下面的取值范围，需要放在Max的正下方。可以如下实现：$ \\max \\limits_&#123;a&lt;x&lt;b&#125;\\&#123;f(x)\\&#125; $$ \\max \\limits_{a&lt;x&lt;b}{f(x)} $ ② 若是普通符号，那么要用 \\mathop 先转成数学符号再用 \\limits，如$ \\mathop&#123;a&#125;\\limits_&#123;i=1&#125; $$ \\mathop{a}\\limits_{i&#x3D;1} $ MathJax矩阵输入无括号矩阵： $$ \\begin&#123;matrix&#125; 1 &amp; x &amp; x^2 \\\\ 1 &amp; y &amp; y^2 \\\\ 1 &amp; z &amp; z^2 \\\\ \\end&#123;matrix&#125; $$ $$\\begin{matrix}1 &amp; x &amp; x^2 \\1 &amp; y &amp; y^2 \\1 &amp; z &amp; z^2 \\\\end{matrix}$$ 有括号有竖线矩阵： $$ \\left[ \\begin&#123;array&#125;&#123;cc|c&#125; 1&amp;2&amp;3\\\\ 4&amp;5&amp;6 \\end&#123;array&#125; \\right] $$ $$\\left[ \\begin{array}{cc|c} 1&amp;2&amp;3\\ 4&amp;5&amp;6 \\end{array}\\right]$$ 行内小矩阵：$\\bigl( \\begin&#123;smallmatrix&#125; a &amp; b \\\\ c &amp; d \\end&#123;smallmatrix&#125; \\bigr)$$\\bigl( \\begin{smallmatrix} a &amp; b \\ c &amp; d \\end{smallmatrix} \\bigr)$ 这里有个问题，上面的写法在矩阵内没有换行，我看了下源码，双反斜杠\\又被MarkDown渲染引擎转义为单个反斜杠了，解决方法是写三个反斜杠\\\\或在双反斜杠后换行即可： $\\bigl( \\begin&#123;smallmatrix&#125; a &amp; b \\\\\\ c &amp; d \\end&#123;smallmatrix&#125; \\bigr)$$\\bigl( \\begin{smallmatrix} a &amp; b \\\\ c &amp; d \\end{smallmatrix} \\bigr)$ 参考Hexo博客(13)添加MathJax数学公式渲染在Hexo中渲染MathJax数学公式MathJax basic tutorial and quick reference","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"mathjax","slug":"mathjax","permalink":"https://ysluckly.github.io/tags/mathjax/"}]},{"title":"CentOS7安装配置匿名访问Samba","slug":"linux/CentOS7-安装配置匿名访问Samba","date":"2017-07-03T11:40:14.000Z","updated":"2022-02-19T09:27:58.507Z","comments":true,"path":"2017/07/03/CentOS7-anonymous-Samba/","link":"","permalink":"https://ysluckly.github.io/2017/07/03/CentOS7-anonymous-Samba/","excerpt":"","text":"介绍 Samba，是种用来让UNIX系列的操作系统与微软Windows操作系统的SMB&#x2F;CIFS（Server Message Block&#x2F;Common Internet File System）网络协议做链接的自由软件 –wikipedia 本文就以 CentOS7 搭建 Samba 匿名完全访问（读&#x2F;写）为目标，实现一个局域网内的文件共享平台。 1.安装Samba服务使用 yum 工具进行安装 $ yum install samba samba-client 2.检查是否安装成功$ rpm -qa | grep samba 3.防火墙开放端口在 /etc/sysconfig/iptables 中添加配置 -A INPUT -p tcp -m state --state NEW -m tcp --dport 137 -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 138 -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 139 -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 389 -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 445 -j ACCEPT -A INPUT -p tcp -m state --state NEW -m tcp --dport 901 -j ACCEPT 重启 iptables 服务 $ service iptables restart 设置开机自启动 $ chkconfig --level 35 smb on 4.共享配置Samba Server的验证方式有四种： share：匿名访问共享，不需要提供用户名和口令, 安全性能较低。 user：共享目录只能被授权的用户访问,由Samba Server负责检查账号和密码的正确性。账号和密码要在本Samba Server中建立。 server：依靠其他Windows Server或Samba Server来验证用户的账号和密码,是一种代理验证。此种安全模式下,系统管理员可以把所有的Windows用户和口令集中到一个Server系统上,使用 Windows Server进行Samba认证, 远程服务器可以自动认证全部用户和口令,如果认证失败,Samba将使用用户级安全模式作为替代的方式。 domain：域安全级别,使用主域控制器(PDC)来完成认证。 创建一个匿名共享访问，需要使用share模式，但在CentOS安装的samba4中share 和 server验证方式已被弃用 配置如下： [global] workgroup = MYGROUP server string = Samba Server Version %v log file = /var/log/samba/log.%m max log size = 50 security = user map to guest = Bad User load printers = yes cups options = raw [share] comment = share path = /home/samba directory mask = 0777 create mask = 0777 #不可视目录 #browseable = yes guest ok=yes writable=yes 创建 /home/samba 共享目录 $ mkdir /home/samba 重启 smb 服务 $ service smb restart 检查服务是否在运行 $ pgrep smbd 检查配置参数 $ testparm Load smb config files from /etc/samba/smb.conf Processing section &quot;[share]&quot; Loaded services file OK. Server role: ROLE_STANDALONE Press enter to see a dump of your service definitions # Global parameters [global] server string = Samba Server Version %v workgroup = MYGROUP log file = /var/log/samba/log.%m max log size = 50 map to guest = Bad User security = USER idmap config * : backend = tdb cups options = raw [share] comment = share path = /home/samba create mask = 0777 directory mask = 0777 guest ok = Yes read only = No 访问以上就配置完成，如服务器地址为192.168.0.87 windows 系统访问，直接运行 \\\\192.168.0.87\\share linux 系统访问， smb://192.168.0.87/share 遇到的问题 linux 系统可以正常读写修改，但 windows 系统只可以读写，直接打开修改时就，就为只读文件了。 解决办法：修改 /etc/samba/smb.conf ,在 [share] 中加入以下内容 create mask = 0777 访问部分文件可以正常访问，但部分文件无法访问。 解决方法：修改文件访问权限 $ chmod -R 1777 /home/samba $ chown nobody:nobody 参考 CentOS7 安装Samba服务 CentOS7 安装配置匿名访问Samba","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"samba","slug":"samba","permalink":"https://ysluckly.github.io/tags/samba/"}]},{"title":"完美替代多说-gitment","slug":"tools/gitment","date":"2017-06-26T04:08:13.000Z","updated":"2022-02-19T09:27:58.560Z","comments":true,"path":"2017/06/26/gitment/","link":"","permalink":"https://ysluckly.github.io/2017/06/26/gitment/","excerpt":"","text":"自从多说要停止服务时，就开始关注第三方评论系统，现在的评论系统都有这样或那样的问题，见 关于第三方评论系统 。忽然看到作者 孙士权 的一片文章 Gitment：使用 GitHub Issues 搭建评论系统 。 立即就将 gitment 集成到 3-hexo 主题内。本篇文章只讲在 3-hexo 内如何使用，如果想自定义，可以参考上面原文。 注册 OAuth Application点击此处 来注册一个新的 OAuth Application。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，如 http://yelog.org）。 使用 gitment 评论系统修改主题 _config.yml gitment: on: true # 启用gitment评论系统 owner: yelog # 你的github账号 repo: yelog.github.io # 评论issue保存的仓库，我选择保存在blog仓库，也可以新建一个仓库 client_id: d64ceca0d8a4e8b1f5c9 # 上一步注册后生成的client_id client_secret: fb17d5f0aba31372f61a03df707bb20a39a73a06 # 上一步注册后生成的client_secret 部署并初始化1.发布 hexo $ hexo clear &amp;&amp; hexo g &amp;&amp; hexo d 2.打开发布的blog，登录github账号，并点击 Initialize Comments。 3.现在其他人就可以进行评论了 感受整体评论系统做的简洁，整体来说是个不错的系统。","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"}]},{"title":"解决粘贴到vim缩进错乱问题","slug":"linux/解决粘贴到vim缩进错乱问题","date":"2017-06-01T11:45:24.000Z","updated":"2022-02-19T09:27:58.526Z","comments":true,"path":"2017/06/01/vim-paste/","link":"","permalink":"https://ysluckly.github.io/2017/06/01/vim-paste/","excerpt":"","text":"遇见当我使用vim，想要粘贴下面这段脚本到 xx.sh 文件中 #!/bin/bash if [ $1 ] then if [ $1 == &quot;help&quot; ]; then echo -e &quot;\\033[37m pay 参数1 [参数2] \\033[0m&quot; else if [ $2 ]; then filename = $2 fi fi else echo -e &quot;\\033[37m 缺少关键词，通过&#39;pay help&#39;查看帮助信息 \\033[0m&quot; fi 却出现了错乱,如下图所示 分析vim 没有相应的程序来处理这个从其他应用复制粘贴的过程，所以Vim通过插入键盘输入的buffer来模拟这个粘贴的过程，这个时候Vim会以为这是用户输入的。 所以问题是：当上一行结束，光标进入下一行时Vim会自动以上一行的的缩进为初始位置。这样就会破坏原始文件的缩进。 解决问题经过一番google，发现vim提供了 paste 选项，进入 paste 模式后，就可以正常缩进了。 # 进入 paste 模式 :set paste # 退出 paste 模式 :set nopaste 如果不想每次都执行这个命令，可以在 ～/.vimrc 中添加一行配置 set pastetoggle=&lt;F12&gt; ，这样就可以通过F12快速在paste模式中切换。","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"vim","slug":"vim","permalink":"https://ysluckly.github.io/tags/vim/"}]},{"title":"进入docker容器命令制作","slug":"linux/进入docker容器命令制作","date":"2017-06-01T09:25:11.000Z","updated":"2022-02-19T09:27:58.528Z","comments":true,"path":"2017/06/01/entering-docker/","link":"","permalink":"https://ysluckly.github.io/2017/06/01/entering-docker/","excerpt":"","text":"通过attach进入容器# 进入容器（Docker自带的命令） $ sudo docker attach [name] 通过这命令进入容器后，执行ctrl+d退出容器后发现容器也停止了。所以可以通过 先按，ctrl+p 再按，ctrl+q 退出 制作进入容器的命令既然attach退出很麻烦，一不小心容器就down掉了 通过 docker exec 进入容器是安全的，但是命令过长 所以我们可以通过下面操作，简化命令 1.创建文件 /usr/bin/ctn,内容如下 docker exec -it $1 /bin/bash 2.检查环境变量有没有配置目录 /usr/bin $PATH bash: /usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games: No such file or directory 配置环境变量的方式自行百度 3.完成上面两步即可通过命令 ctn 进入容器 $ ctn [name] 注意：如果是使用非root账号创建的命令，而docker命令是root权限，可能会存在权限问题可以设置 chmod 777 /usr/bin/ctn 设置权限使用 sudo ctn [name] 即可进入容器 4.自动补全docker名使用上面命令时，docker的名字都是手动输入，很麻烦，而且容易出错。 我们可以借助complete命令，来补全docker信息。 在~&#x2F;.bashrc(作用于当前用户，如果所有用户，修改&#x2F;etc&#x2F;bashrc)文件中添加一行 # ctn auto complete complete -W &quot;$(docker ps --format &quot;&#123;&#123;.Names&#125;&#125;&quot;)&quot; ctn 再执行 source .bashrc 使之生效。 这样我们输入 ctn 后，按 Tab 就会提示或自动补全了。 注意： 由于提示的docker名是 .bashrc 生效时的列表，所以如果之后docker列表有变动，需重新执行 source .bashrc 使之更新提示列表","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://ysluckly.github.io/tags/docker/"}]},{"title":"tale博客搭建及体验","slug":"tools/tale-build-experience","date":"2017-05-24T03:29:30.000Z","updated":"2022-02-19T09:27:58.569Z","comments":true,"path":"2017/05/24/tale-build-experience/","link":"","permalink":"https://ysluckly.github.io/2017/05/24/tale-build-experience/","excerpt":"","text":"不久之前在逛blog时，发现了这款tale，今天抽空搭建了一下，将搭建过程写于此。demo website：https://tale.biezhi.me 搭建思路看了tale作者的(github)[https://github.com/otale] 发现有建好docker，所以果断使用docker搭建tale的环境 构建docker镜像下载tale-docker到本地。 # 下载官方Dockerfile $ git clone https://github.com/otale/tale-docker.git # 构建 tale 镜像 $ docker build -t tale:1.0 . 下载tale博客文件# 下载压缩包 $ sudo wget http://7xls9k.dl1.z0.glb.clouddn.com/tale.zip # 讲解压出来的文件夹移入home目录 $ unzip tale.zip $ mv tale /home 构建tale镜像docker run -d --privileged --hostname tale --name tale \\ -v /etc/localtime:/etc/localtime:ro \\ -v /home/tale:/var/tale_home -p 80:9000 \\ -m 1024m --memory-swap -1 tale:1.0 访问浏览器进入 127.0.0.1 即可访问 体验管理后台 文章支持Markdown和富文本。 文章&#x2F;评论&#x2F;友链&#x2F;标签管理&#x2F;主题，设置简单，一目了然 支持插件扩展 博客 主题简洁（当然支持切换主题） 使用 instantclick ，页面切换流畅 评论系统，简洁易用 搜索只支持文章标题 整体 管理简单方便 使用docker后，迁移数据也方便 主题还不是很多 对于常年使用静态blog，手动渲染&#x2F;发布，使用这个之后还有点小清新。 最后tale整体不错，值得入手。 不过目前没有笔者喜欢的主题（当然默认主题也不错），暂时不打算更换blog，笔者也打算过一段时间开发一个tale的主题，然后正式迁入tale。","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"软件记录","slug":"工具/软件记录","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/%E8%BD%AF%E4%BB%B6%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"tale","slug":"tale","permalink":"https://ysluckly.github.io/tags/tale/"}]},{"title":"docker数据管理","slug":"linux/docker数据管理","date":"2017-05-23T13:43:06.000Z","updated":"2022-02-19T09:27:58.518Z","comments":true,"path":"2017/05/23/docker-data-manager/","link":"","permalink":"https://ysluckly.github.io/2017/05/23/docker-data-manager/","excerpt":"","text":"数据卷数据卷是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性： 数据卷可以在容器之间共享和重用 对数据卷的修改会立马生效 对数据卷的更新，不会影响镜像 数据卷默认会一直存在，即使容器被删除 注意：数据卷的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会隐藏掉，能显示看的是挂载的数据卷。 创建一个数据卷在用 docker run 命令的时候，使用 -v 标记来创建一个数据卷并挂载到容器里。在一次 run 中多次使用可以挂载多个数据卷。 下面创建一个名为 web 的容器，并加载一个数据卷到容器的 &#x2F;webapp 目录。 $ sudo docker run -d -P --name web -v /webapp training/webapp python app.py 注意：也可以在 Dockerfile 中使用 VOLUME 来添加一个或者多个新的卷到由该镜像创建的任意容器。 删除数据卷数据卷是被设计用来持久化数据的，它的生命周期独立于容器，Docker不会在容器被删除后自动删除数据卷，并且也不存在垃圾回收这样的机制来处理没有任何容器引用的数据卷。如果需要在删除容器的同时移除数据卷。可以在删除容器的时候使用 docker rm -v 这个命令。无主的数据卷可能会占据很多空间，要清理会很麻烦。Docker官方正在试图解决这个问题，相关工作的进度可以查看这个PR。 挂载一个主机目录作为数据卷使用 -v 标记也可以指定挂载一个本地主机的目录到容器中去。 $ sudo docker run -d -P --name web -v /src/webapp:/opt/webapp training/webapp python app.py 上面的命令加载主机的 &#x2F;src&#x2F;webapp 目录到容器的 &#x2F;opt&#x2F;webapp 目录。这个功能在进行测试的时候十分方便，比如用户可以放置一些程序到本地目录中，来查看容器是否正常工作。本地目录的路径必须是绝对路径，如果目录不存在 Docker 会自动为你创建它。 注意：Dockerfile 中不支持这种用法，这是因为 Dockerfile 是为了移植和分享用的。然而，不同操作系统的路径格式不一样，所以目前还不能支持。 Docker 挂载数据卷的默认权限是读写，用户也可以通过 :ro 指定为只读。 $ sudo docker run -d -P --name web -v /src/webapp:/opt/webapp:ro training/webapp python app.py 加了 :ro 之后，就挂载为只读了。 查看数据卷的具体信息在主机里使用以下命令可以查看指定容器的信息 $ docker inspect web 在输出的内容中找到其中和数据卷相关的部分，可以看到所有的数据卷都是创建在主机的&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;下面的 &quot;Volumes&quot;: &#123; &quot;/webapp&quot;: &quot;/var/lib/docker/volumes/fac362...80535&quot; &#125;, &quot;VolumesRW&quot;: &#123; &quot;/webapp&quot;: true &#125; ... 注：从Docker 1.8.0起，数据卷配置在”Mounts”Key下面，可以看到所有的数据卷都是创建在主机的&#x2F;mnt&#x2F;sda1&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;….下面了。 &quot;Mounts&quot;: [ &#123; &quot;Name&quot;: &quot;b53ebd40054dae599faf7c9666acfe205c3e922fc3e8bc3f2fd178ed788f1c29&quot;, &quot;Source&quot;: &quot;/mnt/sda1/var/lib/docker/volumes/b53ebd40054dae599faf7c9666acfe205c3e922fc3e8bc3f2fd178ed788f1c29/_data&quot;, &quot;Destination&quot;: &quot;/webapp&quot;, &quot;Driver&quot;: &quot;local&quot;, &quot;Mode&quot;: &quot;&quot;, &quot;RW&quot;: true, &quot;Propagation&quot;: &quot;&quot; &#125; ] ... 挂载一个本地主机文件作为数据卷-v 标记也可以从主机挂载单个文件到容器中 $ sudo docker run --rm -it -v ~/.bash_history:/.bash_history ubuntu /bin/bash 这样就可以记录在容器输入过的命令了。 注意：如果直接挂载一个文件，很多文件编辑工具，包括 vi 或者 sed --in-place，可能会造成文件 inode 的改变，从 Docker 1.1 .0起，这会导致报错误信息。所以最简单的办法就直接挂载文件的父目录。 数据卷容器如果你有一些持续更新的数据需要在容器之间共享，最好创建数据卷容器。 数据卷容器，其实就是一个正常的容器，专门用来提供数据卷供其它容器挂载的。 首先，创建一个名为 dbdata 的数据卷容器： $ sudo docker run -d -v /dbdata --name dbdata training/postgres echo Data-only container for postgres 然后，在其他容器中使用 –volumes-from 来挂载 dbdata 容器中的数据卷。 $ sudo docker run -d --volumes-from dbdata --name db1 training/postgres $ sudo docker run -d --volumes-from dbdata --name db2 training/postgres 可以使用超过一个的 --volumes-from 参数来指定从多个容器挂载不同的数据卷。 也可以从其他已经挂载了数据卷的容器来级联挂载数据卷。 $ sudo docker run -d --name db3 --volumes-from db1 training/postgres 注意：使用 –volumes-from 参数所挂载数据卷的容器自己并不需要保持在运行状态。 如果删除了挂载的容器（包括 dbdata、db1 和 db2），数据卷并不会被自动删除。如果要删除一个数据卷，必须在删除最后一个还挂载着它的容器时使用 docker rm -v 命令来指定同时删除关联的容器。 这可以让用户在容器之间升级和移动数据卷。具体的操作将在下一节中进行讲解。 利用数据卷容器来备份、恢复、迁移数据卷可以利用数据卷对其中的数据进行进行备份、恢复和迁移。 备份首先使用 –volumes-from 标记来创建一个加载 dbdata 容器卷的容器，并从主机挂载当前目录到容器的 &#x2F;backup 目录。命令如下： $ sudo docker run --volumes-from dbdata -v $(pwd):/backup ubuntu tar cvf /backup/backup.tar /dbdata 容器启动后，使用了 tar 命令来将 dbdata 卷备份为容器中 &#x2F;backup&#x2F;backup.tar 文件，也就是主机当前目录下的名为 backup.tar 的文件。 恢复如果要恢复数据到一个容器，首先创建一个带有空数据卷的容器 dbdata2。 $ sudo docker run -v /dbdata --name dbdata2 ubuntu /bin/bash 然后创建另一个容器，挂载 dbdata2 容器卷中的数据卷，并使用 untar 解压备份文件到挂载的容器卷中。 $ sudo docker run --volumes-from dbdata2 -v $(pwd):/backup busybox tar xvf /backup/backup.tar 为了查看&#x2F;验证恢复的数据，可以再启动一个容器挂载同样的容器卷来查看 $ sudo docker run --volumes-from dbdata2 busybox /bin/ls /dbdata","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://ysluckly.github.io/tags/docker/"}]},{"title":"docker容器","slug":"linux/docker容器","date":"2017-05-23T13:29:38.000Z","updated":"2022-02-19T09:27:58.516Z","comments":true,"path":"2017/05/23/docker-container/","link":"","permalink":"https://ysluckly.github.io/2017/05/23/docker-container/","excerpt":"","text":"容器镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。 命令# 创建一个名为myubuntu的容器 # -t:分配一个伪终端 -i:让容器的标准输入保持打开 $ docker run --name=myubuntu -t -i ubuntu /bin/bash # 创建一个名为webserver 的nginx容器，使用卷映射本机/home/faker/myspace/nginx目录到docker目录/usr/share/nginx/html $ docker run --name=webserver -d -v /home/faker/myspace/nginx:/usr/share/nginx/html -p 80:80 nginx # 查看容器的输出信息（打印信息，如 echo） # run的时候，使用-d将会不展示在宿主机上，可通过下面命令查看打印信息 $ docker run -d ubuntu:14.04 /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot; $ docker logs [container ID or NAMES] # 启动容器 myubuntu $ docker start myubuntu # 关闭容器 myubuntu $ docker stop myubuntu # 查看已启动的容器 -a:查看包括未启动的容器在内的所有容器 $ docker ps [-a] # 进入容器（Docker自带的命令） $ docker attach [name] # 进入容器（通过exec） $ docker exec -it [name] /bin/bash # 导出容器快照到本地文件 $ docker export [container id] &gt; ubuntu.tar # 将容器快照导入为镜像 $ cat ubuntu.tar | docker import - test/ubuntu:v1.0 # 从制定 URL 或者某个目录导入 $ docker import http://example.com/exampleimage.tgz example/imagerepo # 删除容器 -f:删除正在运行的容器 $ docker [-f] rm myubuntu # 删除所有已关闭的容器 $ docker rm $(docker ps -a -q) # 查询各容器资源使用情况 $ docker stats $(docker ps --format=&#123;&#123;.Names&#125;&#125;)","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://ysluckly.github.io/tags/docker/"}]},{"title":"docker仓库","slug":"linux/docker仓库","date":"2017-05-23T13:15:52.000Z","updated":"2022-02-19T09:27:58.514Z","comments":true,"path":"2017/05/23/docker-registry/","link":"","permalink":"https://ysluckly.github.io/2017/05/23/docker-registry/","excerpt":"","text":"Docker Hub目前 Docker 官方维护了一个公共仓库 Docker Hub，其中已经包括了超过 15,000 的镜像。大部分需求，都可以通过在 Docker Hub 中直接下载镜像来实现。 登录可以通过执行 docker login 命令来输入用户名、密码和邮箱来完成注册和登录。 注册成功后，本地用户目录的 .dockercfg 中将保存用户的认证信息。 基本操作用户无需登录即可通过 docker search 命令来查找官方仓库中的镜像，并利用 docker pull 命令来将它下载到本地。 例如以 centos 为关键词进行搜索： $ sudo docker search centos NAME DESCRIPTION STARS OFFICIAL AUTOMATED centos The official build of CentOS. 465 [OK] tianon/centos CentOS 5 and 6, created using rinse instea... 28 blalor/centos Bare-bones base CentOS 6.5 image 6 [OK] saltstack/centos-6-minimal 6 [OK] tutum/centos-6.4 DEPRECATED. Use tutum/centos:6.4 instead. ... 5 [OK] ... 可以看到返回了很多包含关键字的镜像，其中包括镜像名字、描述、星级（表示该镜像的受欢迎程度）、是否官方创建、是否自动创建。 官方的镜像说明是官方项目组创建和维护的，automated 资源允许用户验证镜像的来源和内容。 根据是否是官方提供，可将镜像资源分为两类。 一种是类似 centos 这样的基础镜像，被称为基础或根镜像。这些基础镜像是由 Docker 公司创建、验证、支持、提供。这样的镜像往往使用单个单词作为名字。 还有一种类型，比如 tianon&#x2F;centos 镜像，它是由 Docker 的用户创建并维护的，往往带有用户名称前缀。可以通过前缀 user_name&#x2F; 来指定使用某个用户提供的镜像，比如 tianon 用户。 另外，在查找的时候通过 -s N 参数可以指定仅显示评价为 N 星以上的镜像。 下载官方 centos 镜像到本地。 $ sudo docker pull centos Pulling repository centos 0b443ba03958: Download complete 539c0211cd76: Download complete 511136ea3c5a: Download complete 7064731afe90: Download complete 用户也可以在登录后通过 docker push 命令来将镜像推送到 Docker Hub。 私有仓库安装 docker-registry容器运行在安装了 Docker 后，可以通过获取官方 registry 镜像来运行。 $ sudo docker run -d -p 5000:5000 registry 这将使用官方的 registry 镜像来启动本地的私有仓库。 用户可以通过指定参数来配置私有仓库位置，例如配置镜像存储到 Amazon S3 服务。 $ sudo docker run \\ -e SETTINGS_FLAVOR=s3 \\ -e AWS_BUCKET=acme-docker \\ -e STORAGE_PATH=/registry \\ -e AWS_KEY=AKIAHSHB43HS3J92MXZ \\ -e AWS_SECRET=xdDowwlK7TJajV1Y7EoOZrmuPEJlHYcNP2k4j49T \\ -e SEARCH_BACKEND=sqlalchemy \\ -p 5000:5000 \\ registry 此外，还可以指定本地路径（如 &#x2F;home&#x2F;user&#x2F;registry-conf ）下的配置文件。 $ sudo docker run -d -p 5000:5000 -v /home/user/registry-conf:/registry-conf -e DOCKER_REGISTRY_CONFIG=/registry-conf/config.yml registry 默认情况下，仓库会被创建在容器的 &#x2F;tmp&#x2F;registry 下。可以通过 -v 参数来将镜像文件存放在本地的指定路径。 例如下面的例子将上传的镜像放到 &#x2F;opt&#x2F;data&#x2F;registry 目录。 $ sudo docker run -d -p 5000:5000 -v /opt/data/registry:/tmp/registry registry 本地安装对于 Ubuntu 或 CentOS 等发行版，可以直接通过源安装。1.Ubuntu $ sudo apt-get install -y build-essential python-dev libevent-dev python-pip liblzma-dev $ sudo pip install docker-registry 2.CentOS $ sudo yum install -y python-devel libevent-devel python-pip gcc xz-devel $ sudo python-pip install docker-registry 3.源码安装 $ sudo apt-get install build-essential python-dev libevent-dev python-pip libssl-dev liblzma-dev libffi-dev $ git clone https://github.com/docker/docker-registry.git $ cd docker-registry $ sudo python setup.py install 然后修改配置文件，主要修改 dev 模板段的 storage_path 到本地的存储仓库的路径。 $ cp config/config_sample.yml config/config.yml 之后启动 Web 服务。 $ sudo gunicorn -c contrib/gunicorn.py docker_registry.wsgi:application 或者 $ sudo gunicorn --access-logfile - --error-logfile - -k gevent -b 0.0.0.0:5000 -w 4 --max-requests 100 docker_registry.wsgi:application 此时使用 curl 访问本地的 5000 端口，看到输出 docker-registry 的版本信息说明运行成功。 注：config&#x2F;config_sample.yml 文件是示例配置文件。 在私有仓库上传、下载、搜索镜像创建好私有仓库之后，就可以使用 docker tag 来标记一个镜像，然后推送它到仓库，别的机器上就可以下载下来了。例如私有仓库地址为 192.168.7.26:5000。 先在本机查看已有的镜像。 $ sudo docker images REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE ubuntu latest ba5877dc9bec 6 weeks ago 192.7 MB ubuntu 14.04 ba5877dc9bec 6 weeks ago 192.7 MB 使用docker tag 将 ba58 这个镜像标记为 192.168.7.26:5000&#x2F;test（格式为 docker tag IMAGE[:TAG] [REGISTRYHOST&#x2F;][USERNAME&#x2F;]NAME[:TAG]）。 $ sudo docker tag ba58 192.168.7.26:5000/test root ~ # docker images REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE ubuntu 14.04 ba5877dc9bec 6 weeks ago 192.7 MB ubuntu latest ba5877dc9bec 6 weeks ago 192.7 MB 192.168.7.26:5000/test latest ba5877dc9bec 6 weeks ago 192.7 MB 使用 docker push 上传标记的镜像。 $ sudo docker push 192.168.7.26:5000/test The push refers to a repository [192.168.7.26:5000/test] (len: 1) Sending image list Pushing repository 192.168.7.26:5000/test (1 tags) Image 511136ea3c5a already pushed, skipping Image 9bad880da3d2 already pushed, skipping Image 25f11f5fb0cb already pushed, skipping Image ebc34468f71d already pushed, skipping Image 2318d26665ef already pushed, skipping Image ba5877dc9bec already pushed, skipping Pushing tag for rev [ba5877dc9bec] on &#123;http://192.168.7.26:5000/v1/repositories/test/tags/latest&#125; 用 curl 查看仓库中的镜像。 $ curl http://192.168.7.26:5000/v1/search &#123;&quot;num_results&quot;: 7, &quot;query&quot;: &quot;&quot;, &quot;results&quot;: [&#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/miaxis_j2ee&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/tomcat&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/ubuntu&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/ubuntu_office&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/desktop_ubu&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;dockerfile/ubuntu&quot;&#125;, &#123;&quot;description&quot;: &quot;&quot;, &quot;name&quot;: &quot;library/test&quot;&#125;]&#125; 这里可以看到 {“description”: “”, “name”: “library&#x2F;test”}，表明镜像已经被成功上传了。 现在可以到另外一台机器去下载这个镜像。 $ sudo docker pull 192.168.7.26:5000/test Pulling repository 192.168.7.26:5000/test ba5877dc9bec: Download complete 511136ea3c5a: Download complete 9bad880da3d2: Download complete 25f11f5fb0cb: Download complete ebc34468f71d: Download complete 2318d26665ef: Download complete $ sudo docker images REPOSITORY TAG IMAGE ID CREATED VIRTUAL SIZE 192.168.7.26:5000/test latest ba5877dc9bec 6 weeks ago 192.7 MB 可以使用 这个脚本 批量上传本地的镜像到注册服务器中，默认是本地注册服务器 127.0.0.1:5000。例如： $ wget https://github.com/yeasy/docker_practice/raw/master/_local/push_images.sh; sudo chmod a+x push_images.sh $ ./push_images.sh ubuntu:latest centos:centos7 The registry server is 127.0.0.1 Uploading ubuntu:latest... The push refers to a repository [127.0.0.1:5000/ubuntu] (len: 1) Sending image list Pushing repository 127.0.0.1:5000/ubuntu (1 tags) Image 511136ea3c5a already pushed, skipping Image bfb8b5a2ad34 already pushed, skipping Image c1f3bdbd8355 already pushed, skipping Image 897578f527ae already pushed, skipping Image 9387bcc9826e already pushed, skipping Image 809ed259f845 already pushed, skipping Image 96864a7d2df3 already pushed, skipping Pushing tag for rev [96864a7d2df3] on &#123;http://127.0.0.1:5000/v1/repositories/ubuntu/tags/latest&#125; Untagged: 127.0.0.1:5000/ubuntu:latest Done Uploading centos:centos7... The push refers to a repository [127.0.0.1:5000/centos] (len: 1) Sending image list Pushing repository 127.0.0.1:5000/centos (1 tags) Image 511136ea3c5a already pushed, skipping 34e94e67e63a: Image successfully pushed 70214e5d0a90: Image successfully pushed Pushing tag for rev [70214e5d0a90] on &#123;http://127.0.0.1:5000/v1/repositories/centos/tags/centos7&#125; Untagged: 127.0.0.1:5000/centos:centos7 Done 仓库配置文件Docker 的 Registry 利用配置文件提供了一些仓库的模板（flavor），用户可以直接使用它们来进行开发或生产部署。 模板在 config_sample.yml 文件中，可以看到一些现成的模板段： common：基础配置 local：存储数据到本地文件系统 s3：存储数据到 AWS S3 中 dev：使用 local 模板的基本配置 test：单元测试使用 prod：生产环境配置（基本上跟s3配置类似） gcs：存储数据到 Google 的云存储 swift：存储数据到 OpenStack Swift 服务 glance：存储数据到 OpenStack Glance 服务，本地文件系统为后备 glance-swift：存储数据到 OpenStack Glance 服务，Swift 为后备 elliptics：存储数据到 Elliptics key&#x2F;value 存储 用户也可以添加自定义的模版段。 默认情况下使用的模板是 dev，要使用某个模板作为默认值，可以添加 SETTINGS_FLAVOR 到环境变量中，例如 export SETTINGS_FLAVOR=dev 另外，配置文件中支持从环境变量中加载值，语法格式为 _env:VARIABLENAME[:DEFAULT]。 示例配置common: loglevel: info search_backend: &quot;_env:SEARCH_BACKEND:&quot; sqlalchemy_index_database: &quot;_env:SQLALCHEMY_INDEX_DATABASE:sqlite:////tmp/docker-registry.db&quot; prod: loglevel: warn storage: s3 s3_access_key: _env:AWS_S3_ACCESS_KEY s3_secret_key: _env:AWS_S3_SECRET_KEY s3_bucket: _env:AWS_S3_BUCKET boto_bucket: _env:AWS_S3_BUCKET storage_path: /srv/docker smtp_host: localhost from_addr: docker@myself.com to_addr: my@myself.com dev: loglevel: debug storage: local storage_path: /home/myself/docker test: storage: local storage_path: /tmp/tmpdockertmp","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://ysluckly.github.io/tags/docker/"},{"name":"docker仓库","slug":"docker仓库","permalink":"https://ysluckly.github.io/tags/docker%E4%BB%93%E5%BA%93/"}]},{"title":"CentOS修改DNS/GW/IP","slug":"linux/CentOS修改DNS-GW-IP","date":"2017-05-23T01:53:52.000Z","updated":"2022-02-19T09:27:58.509Z","comments":true,"path":"2017/05/23/CentOS-DNS-GW-IP/","link":"","permalink":"https://ysluckly.github.io/2017/05/23/CentOS-DNS-GW-IP/","excerpt":"","text":"1.修改DNS解决方案一：修改网卡的DNS的配置文件 $ vim /etc/resolv.conf 添加以下内容,设置两条dns nameserver 8.8.8.8 #google域名服务器 nameserver 8.8.4.4 #google域名服务器 若未生效，可执行 chattr +i /etc/resolv.conf 设置文件属性只有root用户才能修改然后执行 service NetworkManager restart 解决方案二：对接口添加dns信息；编辑&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-xxx，xxx为你的网卡名，但一般是ifcfg-eth0的，具体的xxx根据你的网卡确定，在最下面添加： DNS1=8.8.8.8 #google dns服务器, 根据实际情况更换 DNS2=8.8.4.4 #google dns服务器, 根据实际情况更换 保存后重启网络 $ service network restart 2.修改网关修改网关的配置文件(第3部分也可以设置) $ vim /etc/sysconfig/network 修改为一下内容 NETWORKING=yes(表示系统是否使用网络，一般设置为yes。如果设为no，则不能使用网络，而且很多系统服务程序将无法启动) HOSTNAME=centos(设置本机的主机名，这里设置的主机名要和/etc/hosts中设置的主机名对应) GATEWAY=192.168.1.1(设置本机连接的网关的IP地址。例如，网关为10.0.0.2) 3.修改ip修改对应的网卡的IP地址的配置文件 $ vim /etc/sysconfig/network-scripts/ifcfg-eth0 修改为一下内容 DEVICE=eth0 #描述网卡对应的设备别名，例如ifcfg-eth0的文件中它为eth0 BOOTPROTO=static #设置网卡获得ip地址的方式，可能的选项为static，dhcp或bootp，分别对应静态指定的 ip地址，通过dhcp协议获得的ip地址，通过bootp协议获得的ip地址 BROADCAST=192.168.0.255 #对应的子网广播地址 HWADDR=00:07:E9:05:E8:B4 #对应的网卡物理地址 IPADDR=12.168.1.2 #如果设置网卡获得 ip地址的方式为静态指定，此字段就指定了网卡对应的ip地址 IPV6INIT=no IPV6_AUTOCONF=no NETMASK=255.255.255.0 #网卡对应的网络掩码 NETWORK=192.168.1.0 #网卡对应的网络地址 ONBOOT=yes #系统启动时是否设置此网络接口，设置为yes时，系统启动时激活此设备","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/tags/%E8%BF%90%E7%BB%B4/"},{"name":"centos","slug":"centos","permalink":"https://ysluckly.github.io/tags/centos/"}]},{"title":"Dockerfile指令详解","slug":"linux/Dockerfile指令详解","date":"2017-05-22T11:11:42.000Z","updated":"2022-02-19T09:27:58.511Z","comments":true,"path":"2017/05/22/Dockerfile/","link":"","permalink":"https://ysluckly.github.io/2017/05/22/Dockerfile/","excerpt":"","text":"Dockerfile 是一个文本文件，其内包含了一条条的指令(Instruction)，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。 构建镜像命令格式： $ docker build [选项] &lt;上下文路径/URL/-&gt; 示例： # 构建一个名为 nginx:v3 的镜像 $ docker build -t nginx:v3 . RUN 执行命令 shell格式：RUN &lt;命令&gt;，就像直接在命令行中输入的命令一样。刚才写的 Dockrfile 中的 RUN 指令就是这种格式。RUN echo &#39;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#39; &gt; /usr/share/nginx/html/index.html exec格式：RUN [“可执行文件”, “参数1”, “参数2”]，这更像是函数调用中的格式。 COPY 复制文件格式： COPY &lt;源路径&gt;... &lt;目标路径&gt; COPY [&quot;&lt;源路径1&gt;&quot;,... &quot;&lt;目标路径&gt;&quot;]和 RUN 指令一样，也有两种格式，一种类似于命令行，一种类似于函数调用。COPY 指令将从构建上下文目录中 &lt;源路径&gt; 的文件&#x2F;目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置。比如：COPY package.json /usr/src/app/ &lt;源路径&gt; 可以是多个，甚至可以是通配符，其通配符规则要满足 Go 的 filepath.Match 规则，如： COPY hom* /mydir/ COPY hom?.txt /mydir/ &lt;目标路径&gt; 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 WORKDIR 指令来指定）。目标路径不需要事先创建，如果目录不存在会在复制文件前先行创建缺失目录。 此外，还需要注意一点，使用 COPY 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。这个特性对于镜像定制很有用。特别是构建相关文件都在使用 Git 进行管理的时候。 ADD更高级的复制文件ADD 指令和 COPY 的格式和性质基本一致。但是在 COPY 基础上增加了一些功能。 比如 &lt;源路径&gt; 可以是一个 URL，这种情况下，Docker 引擎会试图去下载这个链接的文件放到 &lt;目标路径&gt; 去。下载后的文件权限自动设置为 600，如果这并不是想要的权限，那么还需要增加额外的一层 RUN 进行权限调整，另外，如果下载的是个压缩包，需要解压缩，也一样还需要额外的一层 RUN 指令进行解压缩。所以不如直接使用 RUN 指令，然后使用 wget 或者 curl 工具下载，处理权限、解压缩、然后清理无用文件更合理。因此，这个功能其实并不实用，而且不推荐使用。 如果 &lt;源路径&gt; 为一个 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，ADD 指令将会自动解压缩这个压缩文件到 &lt;目标路径&gt; 去。 在 Docker 官方的最佳实践文档中要求，尽可能的使用 COPY 。 因此在 COPY 和 ADD 指令中选择的时候，可以遵循这样的原则，所有的文件复制均使用 COPY 指令，仅在需要自动解压缩的场合使用 ADD。 CMD 容器启动命令CMD 指令的格式和 RUN 相似，也是两种格式：1） shell 格式：CMD &lt;命令&gt;2） exec 格式：CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]3） 参数列表格式：CMD [&quot;参数1&quot;, &quot;参数2&quot;...]。在指定了 ENTRYPOINT 指令后，用 CMD 指定具体的参数。 Docker 不是虚拟机，容器就是进程。既然是进程，那么在启动容器的时候，需要指定所运行的程序及参数。CMD 指令就是用于指定默认的容器主进程的启动命令的。 在运行时可以指定新的命令来替代镜像设置中的这个默认命令，比如，ubuntu 镜像默认的 CMD 是 &#x2F;bin&#x2F;bash，如果我们直接 docker run -it ubuntu 的话，会直接进入 bash。我们也可以在运行时指定运行别的命令，如 docker run -it ubuntu cat &#x2F;etc&#x2F;os-release。这就是用 cat &#x2F;etc&#x2F;os-release 命令替换了默认的 &#x2F;bin&#x2F;bash 命令了，输出了系统版本信息。 在指令格式上，一般推荐使用 exec 格式，这类格式在解析时会被解析为 JSON 数组，因此一定要使用双引号 “，而不要使用单引号。 ENTRYPOINT 入口点ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数。ENTRYPOINT 在运行时也可以替代，不过比 CMD 要略显繁琐，需要通过 docker run 的参数 –entrypoint 来指定。 当指定了 ENTRYPOINT 后，CMD 的含义就发生了改变，不再是直接的运行其命令，而是将 CMD 的内容作为参数传给 ENTRYPOINT 指令，换句话说实际执行时，将变为： &lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot; 场景一：让镜像变成像命令一样使用 FROM ubuntu:16.04 RUN apt-get update \\ &amp;&amp; apt-get install -y curl \\ &amp;&amp; rm -rf /var/lib/apt/lists/* ENTRYPOINT [ &quot;curl&quot;, &quot;-s&quot;, &quot;http://ip.cn&quot; ] $ docker run myip -i 这是因为当存在 ENTRYPOINT 后，CMD 的内容将会作为参数传给 ENTRYPOINT，而这里 -i 就是新的 CMD，因此会作为参数传给 curl，从而达到了我们预期的效果。 场景二：应用运行前的准备工作可以写一个脚本，然后放入 ENTRYPOINT 中去执行，而这个脚本会将接到的参数（也就是 ）作为命令，在脚本最后执行。比如官方镜像 redis 中就是这么做的：&#96;&#96;&#96;bashFROM alpine:3.4…RUN addgroup -S redis &amp;&amp; adduser -S -G redis redis…ENTRYPOINT [“docker-entrypoint.sh”] EXPOSE 6379CMD [ “redis-server” ] 可以看到其中为了 redis 服务创建了 redis 用户，并在最后指定了 ENTRYPOINT 为 docker-entrypoint.sh 脚本。 ```bash #!/bin/sh ... # allow the container to be started with `--user` if [ &quot;$1&quot; = &#39;redis-server&#39; -a &quot;$(id -u)&quot; = &#39;0&#39; ]; then chown -R redis . exec su-exec redis &quot;$0&quot; &quot;$@&quot; fi exec &quot;$@&quot; 该脚本的内容就是根据 CMD 的内容来判断，如果是 redis-server 的话，则切换到 redis 用户身份启动服务器，否则依旧使用 root 身份执行。比如： $ docker run -it redis id uid=0(root) gid=0(root) groups=0(root) ENV 设置环境变量格式有两种： ENV &lt;key&gt; &lt;value&gt; ENV &lt;key1&gt;=&lt;value1&gt; &lt;key2&gt;=&lt;value2&gt;... 这个指令很简单，就是设置环境变量而已，无论是后面的其它指令，如 RUN，还是运行时的应用，都可以直接使用这里定义的环境变量。 ENV VERSION=1.0 DEBUG=on \\ NAME=&quot;Happy Feet&quot; 这个例子中演示了如何换行，以及对含有空格的值用双引号括起来的办法，这和 Shell 下的行为是一致的。 定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。比如在官方 node 镜像 Dockerfile 中，就有类似这样的代码： ENV NODE_VERSION 7.2.0 RUN curl -SLO &quot;https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz&quot; \\ &amp;&amp; curl -SLO &quot;https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc&quot; \\ &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc \\ &amp;&amp; grep &quot; node-v$NODE_VERSION-linux-x64.tar.xz\\$&quot; SHASUMS256.txt | sha256sum -c - \\ &amp;&amp; tar -xJf &quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot; -C /usr/local --strip-components=1 \\ &amp;&amp; rm &quot;node-v$NODE_VERSION-linux-x64.tar.xz&quot; SHASUMS256.txt.asc SHASUMS256.txt \\ &amp;&amp; ln -s /usr/local/bin/node /usr/local/bin/nodejs 在这里先定义了环境变量 NODE_VERSION，其后的 RUN 这层里，多次使用 $NODE_VERSION 来进行操作定制。可以看到，将来升级镜像构建版本的时候，只需要更新 7.2.0 即可，Dockerfile 构建维护变得更轻松了。 下列指令可以支持环境变量展开： ADD、COPY、ENV、EXPOSE、LABEL、USER、WORKDIR、VOLUME、STOPSIGNAL、ONBUILD。 可以从这个指令列表里感觉到，环境变量可以使用的地方很多，很强大。通过环境变量，我们可以让一份 Dockerfile 制作更多的镜像，只需使用不同的环境变量即可。 ARG 构建参数格式：ARG &lt;参数名&gt;[=&lt;默认值&gt;] 构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信息，因为 docker history 还是可以看到所有值的。 Dockerfile 中的 ARG 指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令 docker build 中用 –build-arg &lt;参数名&gt;&#x3D;&lt;值&gt; 来覆盖。 在 1.13 之前的版本，要求 –build-arg 中的参数名，必须在 Dockerfile 中用 ARG 定义过了，换句话说，就是 –build-arg 指定的参数，必须在 Dockerfile 中使用了。如果对应参数没有被使用，则会报错退出构建。从 1.13 开始，这种严格的限制被放开，不再报错退出，而是显示警告信息，并继续构建。这对于使用 CI 系统，用同样的构建流程构建不同的 Dockerfile 的时候比较有帮助，避免构建命令必须根据每个 Dockerfile 的内容修改。 VOLUME 定义匿名卷格式为： VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...] VOLUME &lt;路径&gt; 之前我们说过，容器运行时应该尽量保持容器存储层不发生写操作，对于数据库类需要保存动态数据的应用，其数据库文件应该保存于卷(volume)中，后面的章节我们会进一步介绍 Docker 卷的概念。为了防止运行时用户忘记将动态文件所保存目录挂载为卷，在 Dockerfile 中，我们可以事先指定某些目录挂载为匿名卷，这样在运行时如果用户不指定挂载，其应用也可以正常运行，不会向容器存储层写入大量数据。 VOLUME /data 这里的 &#x2F;data 目录就会在运行时自动挂载为匿名卷，任何向 &#x2F;data 中写入的信息都不会记录进容器存储层，从而保证了容器存储层的无状态化。当然，运行时可以覆盖这个挂载设置。比如： $ docker run -d -v mydata:/data xxxx 在这行命令中，就使用了 mydata 这个命名卷挂载到了 &#x2F;data 这个位置，替代了 Dockerfile 中定义的匿名卷的挂载配置。 EXPOSE 声明端口格式为 EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]。 EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。在 Dockerfile 中写入这样的声明有两个好处，一个是帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射；另一个用处则是在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。 此外，在早期 Docker 版本中还有一个特殊的用处。以前所有容器都运行于默认桥接网络中，因此所有容器互相之间都可以直接访问，这样存在一定的安全性问题。于是有了一个 Docker 引擎参数 –icc&#x3D;false，当指定该参数后，容器间将默认无法互访，除非互相间使用了 –links 参数的容器才可以互通，并且只有镜像中 EXPOSE 所声明的端口才可以被访问。这个 –icc&#x3D;false 的用法，在引入了 docker network 后已经基本不用了，通过自定义网络可以很轻松的实现容器间的互联与隔离。 要将 EXPOSE 和在运行时使用 -p &lt;宿主端口&gt;:&lt;容器端口&gt; 区分开来。-p，是映射宿主端口和容器端口，换句话说，就是将容器的对应端口服务公开给外界访问，而 EXPOSE 仅仅是声明容器打算使用什么端口而已，并不会自动在宿主进行端口映射。 WORKDIR 指定工作目录格式为 WORKDIR &lt;工作目录路径&gt;。 使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。 之前提到一些初学者常犯的错误是把 Dockerfile 等同于 Shell 脚本来书写，这种错误的理解还可能会导致出现下面这样的错误： RUN cd /app RUN echo &quot;hello&quot; &gt; world.txt 如果将这个 Dockerfile 进行构建镜像运行后，会发现找不到 &#x2F;app&#x2F;world.txt 文件，或者其内容不是 hello。原因其实很简单，在 Shell 中，连续两行是同一个进程执行环境，因此前一个命令修改的内存状态，会直接影响后一个命令；而在 Dockerfile 中，这两行 RUN 命令的执行环境根本不同，是两个完全不同的容器。这就是对 Dokerfile 构建分层存储的概念不了解所导致的错误。 之前说过每一个 RUN 都是启动一个容器、执行命令、然后提交存储层文件变更。第一层 RUN cd &#x2F;app 的执行仅仅是当前进程的工作目录变更，一个内存上的变化而已，其结果不会造成任何文件变更。而到第二层的时候，启动的是一个全新的容器，跟第一层的容器更完全没关系，自然不可能继承前一层构建过程中的内存变化。 因此如果需要改变以后各层的工作目录的位置，那么应该使用 WORKDIR 指令。 USER 指定当前用户格式：USER &lt;用户名&gt; USER 指令和 WORKDIR 相似，都是改变环境状态并影响以后的层。WORKDIR 是改变工作目录，USER 则是改变之后层的执行 RUN, CMD 以及 ENTRYPOINT 这类命令的身份。 当然，和 WORKDIR 一样，USER 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。 RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis USER redis RUN [ &quot;redis-server&quot; ] 如果以 root 执行的脚本，在执行期间希望改变身份，比如希望以某个已经建立好的用户来运行某个服务进程，不要使用 su 或者 sudo，这些都需要比较麻烦的配置，而且在 TTY 缺失的环境下经常出错。建议使用 gosu，可以从其项目网站看到进一步的信息：https://github.com/tianon/gosu # 建立 redis 用户，并使用 gosu 换另一个用户执行命令 RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis # 下载 gosu RUN wget -O /usr/local/bin/gosu &quot;https://github.com/tianon/gosu/releases/download/1.7/gosu-amd64&quot; \\ &amp;&amp; chmod +x /usr/local/bin/gosu \\ &amp;&amp; gosu nobody true # 设置 CMD，并以另外的用户执行 CMD [ &quot;exec&quot;, &quot;gosu&quot;, &quot;redis&quot;, &quot;redis-server&quot; ] HEALTHCHECK 健康检查格式： HEALTHCHECK [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令 HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令 HEALTHCHECK 指令是告诉 Docker 应该如何进行判断容器的状态是否正常，这是 Docker 1.12 引入的新指令。 在没有 HEALTHCHECK 指令前，Docker 引擎只可以通过容器内主进程是否退出来判断容器是否状态异常。很多情况下这没问题，但是如果程序进入死锁状态，或者死循环状态，应用进程并不退出，但是该容器已经无法提供服务了。在 1.12 以前，Docker 不会检测到容器的这种状态，从而不会重新调度，导致可能会有部分容器已经无法提供服务了却还在接受用户请求。 而自 1.12 之后，Docker 提供了 HEALTHCHECK 指令，通过该指令指定一行命令，用这行命令来判断容器主进程的服务状态是否还正常，从而比较真实的反应容器实际状态。 当在一个镜像指定了 HEALTHCHECK 指令后，用其启动容器，初始状态会为 starting，在 HEALTHCHECK 指令检查成功后变为 healthy，如果连续一定次数失败，则会变为 unhealthy。 HEALTHCHECK 支持下列选项： --interval=&lt;间隔&gt;：两次健康检查的间隔，默认为 30 秒； --timeout=&lt;时长&gt;：健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败，默认 30 秒； 3)--retries=&lt;次数&gt;：当连续失败指定次数后，则将容器状态视为 unhealthy，默认 3 次。 和 CMD, ENTRYPOINT 一样，HEALTHCHECK 只可以出现一次，如果写了多个，只有最后一个生效。 在 HEALTHCHECK [选项] CMD 后面的命令，格式和 ENTRYPOINT 一样，分为 shell 格式，和 exec 格式。命令的返回值决定了该次健康检查的成功与否：0：成功；1：失败；2：保留，不要使用这个值。 假设我们有个镜像是个最简单的 Web 服务，我们希望增加健康检查来判断其 Web 服务是否在正常工作，我们可以用 curl 来帮助判断，其 Dockerfile 的 HEALTHCHECK 可以这么写： FROM nginx RUN apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/* HEALTHCHECK --interval=5s --timeout=3s \\ CMD curl -fs http://localhost/ || exit 1 这里我们设置了每 5 秒检查一次（这里为了试验所以间隔非常短，实际应该相对较长），如果健康检查命令超过 3 秒没响应就视为失败，并且使用 curl -fs http://localhost/ || exit 1 作为健康检查命令。 使用 docker build 来构建这个镜像： $ docker build -t myweb:v1 . 构建好了后，我们启动一个容器： $ docker run -d --name web -p 80:80 myweb:v1 当运行该镜像后，可以通过 docker ps 看到最初的状态为 (health: starting)： $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 03e28eb00bd0 myweb:v1 &quot;nginx -g &#39;daemon off&quot; 3 seconds ago Up 2 seconds (health: starting) 80/tcp, 443/tcp web 在等待几秒钟后，再次 docker ps，就会看到健康状态变化为了 (healthy)： $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 03e28eb00bd0 myweb:v1 &quot;nginx -g &#39;daemon off&quot; 18 seconds ago Up 16 seconds (healthy) 80/tcp, 443/tcp web 如果健康检查连续失败超过了重试次数，状态就会变为 (unhealthy)。 为了帮助排障，健康检查命令的输出（包括 stdout 以及 stderr）都会被存储于健康状态里，可以用 docker inspect 来查看。 $ docker inspect --format &#39;&#123;&#123;json .State.Health&#125;&#125;&#39; web | python -m json.tool &#123; &quot;FailingStreak&quot;: 0, &quot;Log&quot;: [ &#123; &quot;End&quot;: &quot;2016-11-25T14:35:37.940957051Z&quot;, &quot;ExitCode&quot;: 0, &quot;Output&quot;: &quot;&lt;!DOCTYPE html&gt;\\n&lt;html&gt;\\n&lt;head&gt;\\n&lt;title&gt;Welcome to nginx!&lt;/title&gt;\\n&lt;style&gt;\\n body &#123;\\n width: 35em;\\n margin: 0 auto;\\n font-family: Tahoma, Verdana, Arial, sans-serif;\\n &#125;\\n&lt;/style&gt;\\n&lt;/head&gt;\\n&lt;body&gt;\\n&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;\\n&lt;p&gt;If you see this page, the nginx web server is successfully installed and\\nworking. Further configuration is required.&lt;/p&gt;\\n\\n&lt;p&gt;For online documentation and support please refer to\\n&lt;a href=\\&quot;http://nginx.org/\\&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;\\nCommercial support is available at\\n&lt;a href=\\&quot;http://nginx.com/\\&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;\\n\\n&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;\\n&lt;/body&gt;\\n&lt;/html&gt;\\n&quot;, &quot;Start&quot;: &quot;2016-11-25T14:35:37.780192565Z&quot; &#125; ], &quot;Status&quot;: &quot;healthy&quot; &#125; ONBUILD 为他人做嫁衣裳格式：ONBUILD &lt;其它指令&gt;。 ONBUILD 是一个特殊的指令，它后面跟的是其它指令，比如 RUN, COPY 等，而这些指令，在当前镜像构建时并不会被执行。只有当以当前镜像为基础镜像，去构建下一级镜像的时候才会被执行。 Dockerfile 中的其它指令都是为了定制当前镜像而准备的，唯有 ONBUILD 是为了帮助别人定制自己而准备的。 假设我们要制作 Node.js 所写的应用的镜像。我们都知道 Node.js 使用 npm 进行包管理，所有依赖、配置、启动信息等会放到 package.json 文件里。在拿到程序代码后，需要先进行 npm install 才可以获得所有需要的依赖。然后就可以通过 npm start 来启动应用。因此，一般来说会这样写 Dockerfile： FROM node:slim RUN &quot;mkdir /app&quot; WORKDIR /app COPY ./package.json /app RUN [ &quot;npm&quot;, &quot;install&quot; ] COPY . /app/ CMD [ &quot;npm&quot;, &quot;start&quot; ] 把这个 Dockerfile 放到 Node.js 项目的根目录，构建好镜像后，就可以直接拿来启动容器运行。但是如果我们还有第二个 Node.js 项目也差不多呢？好吧，那就再把这个 Dockerfile 复制到第二个项目里。那如果有第三个项目呢？再复制么？文件的副本越多，版本控制就越困难，让我们继续看这样的场景维护的问题。 如果第一个 Node.js 项目在开发过程中，发现这个 Dockerfile 里存在问题，比如敲错字了、或者需要安装额外的包，然后开发人员修复了这个 Dockerfile，再次构建，问题解决。第一个项目没问题了，但是第二个项目呢？虽然最初 Dockerfile 是复制、粘贴自第一个项目的，但是并不会因为第一个项目修复了他们的 Dockerfile，而第二个项目的 Dockerfile 就会被自动修复。 那么我们可不可以做一个基础镜像，然后各个项目使用这个基础镜像呢？这样基础镜像更新，各个项目不用同步 Dockerfile 的变化，重新构建后就继承了基础镜像的更新？好吧，可以，让我们看看这样的结果。那么上面的这个 Dockerfile 就会变为： FROM node:slim RUN &quot;mkdir /app&quot; WORKDIR /app CMD [ &quot;npm&quot;, &quot;start&quot; ] 这里我们把项目相关的构建指令拿出来，放到子项目里去。假设这个基础镜像的名字为 my-node 的话，各个项目内的自己的 Dockerfile 就变为： FROM my-node COPY ./package.json /app RUN [ &quot;npm&quot;, &quot;install&quot; ] COPY . /app/ 基础镜像变化后，各个项目都用这个 Dockerfile 重新构建镜像，会继承基础镜像的更新。 那么，问题解决了么？没有。准确说，只解决了一半。如果这个 Dockerfile 里面有些东西需要调整呢？比如 npm install 都需要加一些参数，那怎么办？这一行 RUN 是不可能放入基础镜像的，因为涉及到了当前项目的 .&#x2F;package.json，难道又要一个个修改么？所以说，这样制作基础镜像，只解决了原来的 Dockerfile 的前4条指令的变化问题，而后面三条指令的变化则完全没办法处理。 ONBUILD 可以解决这个问题。让我们用 ONBUILD 重新写一下基础镜像的 Dockerfile: FROM node:slim RUN &quot;mkdir /app&quot; WORKDIR /app ONBUILD COPY ./package.json /app ONBUILD RUN [ &quot;npm&quot;, &quot;install&quot; ] ONBUILD COPY . /app/ CMD [ &quot;npm&quot;, &quot;start&quot; ] 这次我们回到原始的 Dockerfile，但是这次将项目相关的指令加上 ONBUILD，这样在构建基础镜像的时候，这三行并不会被执行。然后各个项目的 Dockerfile 就变成了简单地： FROM my-node 是的，只有这么一行。当在各个项目目录中，用这个只有一行的 Dockerfile 构建镜像时，之前基础镜像的那三行 ONBUILD 就会开始执行，成功的将当前项目的代码复制进镜像、并且针对本项目执行 npm install，生成应用镜像。 ReferenceDocker–从入门到实践: https://yeasy.gitbooks.io/docker_practice/content/Dockerfie 官方文档：https://docs.docker.com/engine/reference/builder/Dockerfile 最佳实践文档：https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://ysluckly.github.io/tags/docker/"}]},{"title":"docker镜像","slug":"linux/docker镜像","date":"2017-05-19T08:47:33.000Z","updated":"2022-02-19T09:27:58.519Z","comments":true,"path":"2017/05/19/docker-image/","link":"","permalink":"https://ysluckly.github.io/2017/05/19/docker-image/","excerpt":"","text":"WhatDocker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。 因为镜像包含操作系统完整的 root 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 Union FS 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。 安装# 官方 的安装脚本 $ curl -sSL https://get.docker.com/ | sh # 阿里云 的安装脚本 $ curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh - # DaoCloud 的安装脚本 $ curl -sSL https://get.daocloud.io/docker | sh 镜像# 获取镜像，registry为空默认从Docker Hub上获取 docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt; # 交互式运行，退出删除: -i:交互式 ,-t:终端,--rm 退出删除 ,bash 启动bash窗口 $ docker run -it --rm ubuntu:14.04 bash # 列出已下载的镜像（只显示顶层镜像） -a:显示所有镜像 image_name:指定列出某个镜像 $ docker images [-a] [image_name] # 只显示虚悬镜像(dangling image) -f:--filter 过滤 $ docker images -f dangling=true # 过滤从mongo:3.2建立之后的镜像 $ docker images -f since=mongo:3.2 # 通过label过滤 $ docker images -f label=com.example.version=0.1 # 只显示镜像id $ docker images -q # 只包含镜像ID和仓库名 $ docker images --format &quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot; # 以表格等距显示 有标题行，和默认一样，不过自己定义列 $ docker images --format &quot;table &#123;&#123;.ID&#125;&#125;\\t&#123;&#123;.Repository&#125;&#125;\\t&#123;&#123;.Tag&#125;&#125;&quot; # 删除镜像ID为image_id的镜像 $ docker rmi &lt;image_id&gt; # 删除虚悬镜像 $ docker rmi $(docker images -q -f dangling=true) # 将容器保存为镜像 $ docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]] # 将容器保存为镜像 $ docker commit \\ --author &quot;Tao Wang &lt;twang2218@gmail.com&gt;&quot; \\ --message &quot;修改了默认网页&quot; \\ webserver \\ nginx:v2 $ docker history nginx:v2","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://ysluckly.github.io/tags/docker/"}]},{"title":"docker初体验","slug":"linux/docker初体验","date":"2017-05-19T08:32:23.000Z","updated":"2022-02-19T09:27:58.515Z","comments":true,"path":"2017/05/19/docker-first/","link":"","permalink":"https://ysluckly.github.io/2017/05/19/docker-first/","excerpt":"","text":"安装笔者环境操作系统：deepin 15.4 Desktop 64Bit 安装# 官方 的安装脚本 $ curl -sSL https://get.docker.com/ | sh # 阿里云 的安装脚本 $ curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh - # DaoCloud 的安装脚本 $ curl -sSL https://get.daocloud.io/docker | sh 获取镜像Docker Hub 上有大量的高质量的镜像可以用，这里我们就说一下怎么获取这些镜像并运行。从 Docker Registry 获取镜像的命令是 docker pull。其命令格式为： $ docker pull [选项] [Docker Registry地址]&lt;仓库名&gt;:&lt;标签&gt; 具体的选项可以通过 docker pull --help 命令看到，这里我们说一下镜像名称的格式。 Docker Registry地址：地址的格式一般是 &lt;域名/IP&gt;[:端口号]。默认地址是 Docker Hub。 仓库名：如之前所说，这里的仓库名是两段式名称，既 &lt;用户名&gt;/&lt;软件名&gt;。对于 Docker Hub，如果不给出用户名，则默认为 library，也就是官方镜像。 $ sudo docker pull ubuntu 运行有了镜像后，我们就可以以这个镜像为基础启动一个容器来运行。以上面的 ubuntu 为例，如果我们打算启动里面的 bash 并且进行交互式操作的话，可以执行下面的命令。 $ sudo docker run -it --rm ubuntu root@0ae011f7b5be:/# cat /etc/os-release NAME=&quot;Ubuntu&quot; VERSION=&quot;16.04.2 LTS (Xenial Xerus)&quot; ID=ubuntu ID_LIKE=debian PRETTY_NAME=&quot;Ubuntu 16.04.2 LTS&quot; VERSION_ID=&quot;16.04&quot; HOME_URL=&quot;http://www.ubuntu.com/&quot; SUPPORT_URL=&quot;http://help.ubuntu.com/&quot; BUG_REPORT_URL=&quot;http://bugs.launchpad.net/ubuntu/&quot; VERSION_CODENAME=xenial UBUNTU_CODENAME=xenial docker run 就是运行容器的命令 -it：这是两个参数，一个是 -i：交互式操作，一个是 -t 终端。我们这里打算进入 bash 执行一些命令并查看返回结果，因此我们需要交互式终端。 --rm：这个参数是说容器退出后随之将其删除。默认情况下，为了排障需求，退出的容器并不会立即删除，除非手动 docker rm。我们这里只是随便执行个命令，看看结果，不需要排障和保留结果，因此使用 –rm 可以避免浪费空间。 ubuntu：这是指用 ubuntu 镜像为基础来启动容器。 bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 bash。 进入容器后，我们可以在 Shell 下操作，执行任何所需的命令。这里，我们执行了 cat /etc/os-release，这是 Linux 常用的查看当前系统版本的命令，从返回的结果可以看到容器内是 Ubuntu 16.04.2 LTS 系统。 最后通过 exit 退出了这个容器。","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://ysluckly.github.io/tags/docker/"}]},{"title":"linux无损调整分区大小","slug":"linux/linux无损调整分区大小","date":"2017-05-17T14:00:42.000Z","updated":"2022-02-19T09:27:58.520Z","comments":true,"path":"2017/05/17/linux无损调整分区大小/","link":"","permalink":"https://ysluckly.github.io/2017/05/17/linux%E6%97%A0%E6%8D%9F%E8%B0%83%E6%95%B4%E5%88%86%E5%8C%BA%E5%A4%A7%E5%B0%8F/","excerpt":"","text":"summary 系统环境: Red Hat 4.8.5-11 情况： home：500G root：50G root分区不够用 思路：把home分区的空间划一部分到root分区 # 设置home分区大小为200G，释放300G空间 $ lvreduce -L 200G /dev/centos/home # 将空闲空间扩展到root分区 $ lvextend -l +100%FREE /dev/centos/root # 使用XFS文件系统自带的命令集增加分区空间 $ xfs_growfs /dev/mapper/centos-root 实例situation挂载在根目录的分区 /dev/mapper/centos-root 爆满，占用100% $ df -h Filesystem Size Used Avail Use% Mounted on /dev/mapper/centos-root 50G 50G 19M 100% / devtmpfs 32G 0 32G 0% /dev tmpfs 32G 0 32G 0% /dev/shm tmpfs 32G 2.5G 29G 8% /run tmpfs 32G 0 32G 0% /sys/fs/cgroup /dev/mapper/centos-home 476G 33M 476G 1% /home /dev/sda1 497M 238M 259M 48% /boot tmpfs 6.3G 0 6.3G 0% /run/user/0 analyze挂载在根目录的分区空间太小，只有50G，而服务器 home 目录为非常用目录，挂在了近500G的空间。 思路：从 centos-home 分区划出300G空间到 centos-root 分区。 operation1.查看各分区信息$ lvdisplay --- Logical volume --- LV Path /dev/centos/home LV Name home VG Name centos LV UUID 1fAt1E-bQsa-1HXR-MCE2-5VZ1-xzBz-iI1SLv LV Write Access read/write LV Creation host, time localhost, 2016-10-26 17:23:47 +0800 LV Status available # open 0 LV Size 475.70 GiB Current LE 121778 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:2 --- Logical volume --- LV Path /dev/centos/root LV Name root VG Name centos LV UUID lD64zY-yc3Z-SZaB-dAjK-03YM-2gM8-pfj4oo LV Write Access read/write LV Creation host, time localhost, 2016-10-26 17:23:48 +0800 LV Status available # open 1 LV Size 50.00 GiB Current LE 12800 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 256 Block device 253:0 2.减少&#x2F;home分区空间# 释放 /dev/centos/home 分区 300G 的空间 # 命令设置 /dev/centos/home 分区 200G空间 $ lvreduce -L 200G /dev/centos/home WARNING: Reducing active logical volume to 200.00 GiB. THIS MAY DESTROY YOUR DATA (filesystem etc.) Do you really want to reduce centos/home? [y/n]: y Size of logical volume centos/home changed from 475.70 GiB (121778 extents) to 200.00 GiB (51200 extents). Logical volume centos/home successfully resized. 3.增加&#x2F;root分区空间$ lvextend -l +100%FREE /dev/centos/root Size of logical volume centos/root changed from 50.06 GiB (12816 extents) to 325.76 GiB (83394 extents). Logical volume centos/root successfully resized. 4.扩展XFS文件空间大小$ xfs_growfs /dev/mapper/centos-root meta-data=/dev/mapper/centos-root isize=256 agcount=4, agsize=3276800 blks = sectsz=512 attr=2, projid32bit=1 = crc=0 finobt=0 spinodes=0 data = bsize=4096 blocks=13107200, imaxpct=25 = sunit=0 swidth=0 blks naming =version 2 bsize=4096 ascii-ci=0 ftype=0 log =internal bsize=4096 blocks=6400, version=2 = sectsz=512 sunit=0 blks, lazy-count=1 realtime =none extsz=4096 blocks=0, rtextents=0 data blocks changed from 13107200 to 85395456 完成","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/tags/%E8%BF%90%E7%BB%B4/"},{"name":"磁盘分区","slug":"磁盘分区","permalink":"https://ysluckly.github.io/tags/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/"}]},{"title":"Git统计操作","slug":"tools/git-log","date":"2017-05-16T01:26:11.000Z","updated":"2022-02-19T09:27:58.555Z","comments":true,"path":"2017/05/16/git-log/","link":"","permalink":"https://ysluckly.github.io/2017/05/16/git-log/","excerpt":"","text":"按commit统计# 统计当前作者今天（从凌晨1点开始）提交次数 $ git log --author=&quot;$(git config --get user.name)&quot; --no-merges --since=1am --stat # 按提交作者统计，按提交次数排序 $ git shortlog -sn $ git shortlog --numbered --summary # 只看某作者提交的commit数 $ git log --author=&quot;faker&quot; --oneline --shortstat # 按提交作者统计，提交数量排名前5（看全部，去掉head管道即可） $ git log --pretty=&#39;%aN&#39; | sort | uniq -c | sort -k1 -n -r | head -n 5 # 按提交者邮箱统计，提交数量排名前5 $ git log --pretty=format:%ae | gawk -- &#39;&#123; ++c[$0]; &#125; END &#123; for(cc in c) printf &quot;%5d %s\\n&quot;,c[cc],cc; &#125;&#39; | sort -u -n -r | head -n 5 # 统计贡献者数量 $ git log --pretty=&#39;%aN&#39; | sort -u | wc -l # 统计提交数量 $ git log --oneline | wc -l 按代码行数统计# 统计指定作者增删行数 $ git log --author=&quot;faker&quot; --pretty=tformat: --numstat | awk &#39;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\\n&quot;, add, subs, loc &#125;&#39; - # 统计当前作者增删行数 $ git log --author=&quot;$(git config --get user.name)&quot; --pretty=tformat: --numstat | gawk &#39;&#123; add += $1 ; subs += $2 ; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s removed lines : %s total lines: %s\\n&quot;,add,subs,loc &#125;&#39; - # 统计所有邮箱前缀的增删行数 -英文版 $ git log --shortstat --pretty=&quot;%cE&quot; | sed &#39;s/\\(.*\\)@.*/\\1/&#39; | grep -v &quot;^$&quot; | awk &#39;BEGIN &#123; line=&quot;&quot;; &#125; !/^ / &#123; if (line==&quot;&quot; || !match(line, $0)) &#123;line = $0 &quot;,&quot; line &#125;&#125; /^ / &#123; print line &quot; # &quot; $0; line=&quot;&quot;&#125;&#39; | sort | sed -E &#39;s/# //;s/ files? changed,//;s/([0-9]+) ([0-9]+ deletion)/\\1 0 insertions\\(+\\), \\2/;s/\\(\\+\\)$/\\(\\+\\), 0 deletions\\(-\\)/;s/insertions?\\(\\+\\), //;s/ deletions?\\(-\\)//&#39; | awk &#39;BEGIN &#123;name=&quot;&quot;; files=0; insertions=0; deletions=0;&#125; &#123;if ($1 != name &amp;&amp; name != &quot;&quot;) &#123; print name &quot;: &quot; files &quot; files changed, &quot; insertions &quot; insertions(+), &quot; deletions &quot; deletions(-), &quot; insertions-deletions &quot; net&quot;; files=0; insertions=0; deletions=0; name=$1; &#125; name=$1; files+=$2; insertions+=$3; deletions+=$4&#125; END &#123;print name &quot;: &quot; files &quot; files changed, &quot; insertions &quot; insertions(+), &quot; deletions &quot; deletions(-), &quot; insertions-deletions &quot; net&quot;;&#125;&#39; # 统计所有邮箱前缀的增删行数 -中文版 $ git log --shortstat --pretty=&quot;%cE&quot; | sed &#39;s/\\(.*\\)@.*/\\1/&#39; | grep -v &quot;^$&quot; | awk &#39;BEGIN &#123; line=&quot;&quot;; &#125; !/^ / &#123; if (line==&quot;&quot; || !match(line, $0)) &#123;line = $0 &quot;,&quot; line &#125;&#125; /^ / &#123; print line &quot; # &quot; $0; line=&quot;&quot;&#125;&#39; | sort | sed -E &#39;s/# //;s/ files? changed,//;s/([0-9]+) ([0-9]+ deletion)/\\1 0 insertions\\(+\\), \\2/;s/\\(\\+\\)$/\\(\\+\\), 0 deletions\\(-\\)/;s/insertions?\\(\\+\\), //;s/ deletions?\\(-\\)//&#39; | awk &#39;BEGIN &#123;name=&quot;&quot;; files=0; insertions=0; deletions=0;&#125; &#123;if ($1 != name &amp;&amp; name != &quot;&quot;) &#123; print name &quot;: &quot; files &quot; 个文件被改变, &quot; insertions &quot; 行被插入(+), &quot; deletions &quot; 行被删除(-), &quot; insertions-deletions &quot; 行剩余&quot;; files=0; insertions=0; deletions=0; name=$1; &#125; name=$1; files+=$2; insertions+=$3; deletions+=$4&#125; END &#123;print name &quot;: &quot; files &quot; 个文件被改变, &quot; insertions &quot; 行被插入(+), &quot; deletions &quot; 行被删除(-), &quot; insertions-deletions &quot; 行剩余&quot;;&#125;&#39; # 统计所有作者增删行数 --英文版 $ git log --format=&#39;%aN&#39; | sort -u | while read name; do echo -en &quot;$name\\t&quot;; git log --author=&quot;$name&quot; --pretty=tformat: --numstat | awk &#39;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\\n&quot;, add, subs, loc &#125;&#39; -; done # 统计所有作者增删行数 --中文版 $ git log --format=&#39;%aN&#39; | sort -u | while read name; do echo -en &quot;$name\\t&quot;; git log --author=&quot;$name&quot; --pretty=tformat: --numstat | awk &#39;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;添加行数: %s, 删除行数: %s, 总行数: %s\\n&quot;, add, subs, loc &#125;&#39; -; done git log 说明 git log 参数说明：--author 指定作者--stat 显示每次更新的文件修改统计信息，会列出具体文件列表--shortstat 统计每个commit 的文件修改行数，包括增加，删除，但不列出文件列表：--numstat 统计每个commit 的文件修改行数，包括增加，删除，并列出文件列表： -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新 例如：git log -p -2--name-only 仅在提交信息后显示已修改的文件清单--name-status 显示新增、修改、删除的文件清单--abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符--relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）--graph 显示 ASCII 图形表示的分支合并历史--pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式） 例如： git log --pretty=oneline ; git log --pretty=short ; git log --pretty=full ; git log –pretty&#x3D;fuller--pretty&#x3D;tformat: 可以定制要显示的记录格式，这样的输出便于后期编程提取分析 例如： git log --pretty=format:&quot;&quot;%h - %an, %ar : %s&quot;&quot; 下面列出了常用的格式占位符写法及其代表的意义。 选项 说明 %H 提交对象（commit）的完整哈希字串 %h 提交对象的简短哈希字串 %T 树对象（tree）的完整哈希字串 %t 树对象的简短哈希字串 %P 父对象（parent）的完整哈希字串 %p 父对象的简短哈希字串 %an 作者（author）的名字 %ae 作者的电子邮件地址 %ad 作者修订日期（可以用 -date&#x3D; 选项定制格式） %ar 作者修订日期，按多久以前的方式显示 %cn 提交者(committer)的名字 %ce 提交者的电子邮件地址 %cd 提交日期 %cr 提交日期，按多久以前的方式显示 %s 提交说明--since 限制显示输出的范围， 例如： git log --since=2.weeks 显示最近两周的提交 选项 说明 -(n) 仅显示最近的 n 条提交 --since, --after 仅显示指定时间之后的提交。 --until, --before 仅显示指定时间之前的提交。 --author 仅显示指定作者相关的提交。 --committer 仅显示指定提交者相关的提交。 一些例子：git log --until=1.minute.ago &#x2F;&#x2F; 一分钟之前的所有 loggit log --since=1.day.ago &#x2F;&#x2F;一天之内的loggit log --since=1.hour.ago &#x2F;&#x2F;一个小时之内的 loggit log --since=1.month.ago --until=2.weeks.ago &#x2F;&#x2F;一个月之前到半个月之前的loggit log --since ==2013-08.01 --until=2013-09-07 &#x2F;&#x2F;某个时间段的 loggit blame 看看某一个文件的相关历史记录例如：git blame index.html --date short","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"工具/git","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://ysluckly.github.io/tags/git/"}]},{"title":"解决linux下zip文件解压乱码","slug":"linux/解决linux下zip文件解压乱码","date":"2017-04-25T01:10:40.000Z","updated":"2022-02-19T09:27:58.526Z","comments":true,"path":"2017/04/25/解决linux下zip文件解压乱码/","link":"","permalink":"https://ysluckly.github.io/2017/04/25/%E8%A7%A3%E5%86%B3linux%E4%B8%8Bzip%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E4%B9%B1%E7%A0%81/","excerpt":"","text":"原因由于zip格式并没有指定编码格式，Windows下生成的zip文件中的编码是GBK&#x2F;GB2312等，因此，导致这些zip文件在Linux下解压时出现乱码问题，因为Linux下的默认编码是UTF8。 解决方案使用7z解压。 安装p7zip和convmv # fedora $ su -c &#39;yum install p7zip convmv&#39; # ubuntu $ sudo apt-get install p7zip convmv 执行一下命令解压缩 # 使用7z解压缩 $ LANG=C 7za x your-zip-file.zip # 递归转码 $ convmv -f GBK -t utf8 --notest -r .","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"linux命令","slug":"linux命令","permalink":"https://ysluckly.github.io/tags/linux%E5%91%BD%E4%BB%A4/"}]},{"title":"加密算法简介","slug":"back-end/加密算法简介","date":"2017-04-22T01:30:41.000Z","updated":"2022-02-19T09:27:58.483Z","comments":true,"path":"2017/04/22/encryption-algorithm/","link":"","permalink":"https://ysluckly.github.io/2017/04/22/encryption-algorithm/","excerpt":"","text":"一、对称密钥算法概述对称加密（Symmetric-key algorithm）是指加解密用同一个密钥的算法，根据具体实现分为流加密和分组加密两种类型： 流加密（Stream cipher）是对称加密常用的一种实现方法，加密和解密双方使用相同伪随机加密数据流，一般都是逐位异或随机密码本的内容。 分组加密加密（Block cipher），也叫块加密，将明文分成多个等长的模块（block），使用确定的算法和对称密钥对每组分别加密解密。现代分组加密建立在迭代的思想上产生密文。迭代产生的密文在每一轮加密中使用不同的子密钥，而子密钥生成自原始密钥。 对称加密普遍比非对称加密速度要快，实现更简单，适合大量内容的加密 DESDES (Data Encryption Standard) 是一种分组加密算法 DES算法的入口参数有三个:Key,Data,Mode，Key是密钥密钥占7个字节56位（64位里另外8位是用来校验的），Data是加密内容，占8个字节64位，Mode是加密还是解密。 DES算法于1976被确定，现在已经被认为不够安全，主要原因是56位的密钥过短。据说这个算法因为包含一些机密设计元素，被怀疑内含美国国家安全局（NSA）的后门。 DES算法有个拓展算法叫3DES，就是对数据块进行三次DES加密，增加爆破成本，但本质上也不够安全。 RC4RC4 (Rivest Cipher 4) 是一种流加密算法 RC4起源于1987年，现在已经被认为不够安全。RC4由伪随机数生成器和异或运算组成。RC4的密钥长度可变，范围是[1,255]。RC4一个字节一个字节地加解密。给定一个密钥，伪随机数生成器接受密钥并产生一个S盒。S盒用来加密数据，而且在加密过程中S盒会变化。 由于异或运算的对合性，RC4加密解密使用同一套算法。这个算法实现起来很简单，只用了最基本的加、异或、循环，话说我大学时某个课程设计的做的加密算法就是简化版的RC4。 之后还出现了RC5、RC6加密算法，但RC5和RC6都是分组加密，和RC4原理并不一样。 RC5RC5 （Rivest Cipher 5） 是一种分组加密算法，它和RC2，RC4，RC6都是同一个叫Ronald Rivest的人设计的。 相比RC4，RC5的密钥成了128位，但RC5仍然只需要基础的加、异或、循环运算，可以在很多硬件上实现。RC5有三个参数：字的大小，循环轮数（round），密钥中的8位字节个数，所以可以说RC5是一种可变加密算法。实际上循环轮数12轮以下的RC5都被认为是不安全的，会被差分分析法（Differential cryptanalysis）攻击，18-20轮才足够安全。 目前来说，RC5还是挺安全的，因为实现简单，消耗资源少，在一些传感器、嵌入式设备上使用很合适。 RC6RC6 （Rivest Cipher 6） 是RC5的加强版，也属于分组加密算法。 RC6算法在RC5算法基础之上针对RC5算法中的漏洞，主要是循环移位的位移量并不取决于要移动次数的所有比特，通过采用引入乘法运算来决定循环移位次数的方法，对RC5算法进行了改进，从而大大提高了RC6算法的安全性。 RC6曾作为AES（高级加密标准）备选算法之一，但最终AES选择了Rijndael算法。 AES最后压轴出场的是最著名的单密钥对称加密算法AES (Rijndael)，AES是Advanced Encryption Standard的缩写，是美国国家标准与技术研究院2001年发布的新加密标准。 AES现在就是指的限定了区块长度和密钥长度的Rijndael算法，同样属于分组加密算法，该算法是两位比利时学者1998年发布的。起初还有很多算法参与了AES甄选，最终Rijndael凭借高安全性和清晰的数学结构而被选用。 AES将Rijndael算法的区块长度固定为128位，密钥长度可选128，192或256比特（Rijndael原版支持128-256，n*32的区块长度和密钥长度）。 AES算法包括4个步骤： AddRoundKey—矩阵中的每一个字节都与该次回合密钥（round key）做XOR运算；每个子密钥由密钥生成方案产生。 SubBytes—通过一个非线性的替换函数，用查找表的方式把每个字节替换成对应的字节。 ShiftRows—将矩阵中的每个横列进行循环式移位。 MixColumns—为了充分混合矩阵中各个直行的操作。这个步骤使用线性转换来混合每内联的四个字节。最后一个加密循环中省略MixColumns步骤，而以另一个AddRoundKey替换。 截止现在（2016），AES在算法层面上是安全的。2005年有人公布过一种缓存时序攻击法，但使用场景非常极端。 二、非对称秘钥算法概述公钥加密的思想于1974年被提出，相比对称加密无需共享密钥，更加安全。但是没法加密大量数据，一般用来加密对称加密的密钥，而用对称加密加密大量数据。非对称加密的原理如下： 消息发送方A在本地构建密钥对，公钥和私钥； 消息发送方A将产生的公钥发送给消息接收方B； B向A发送数据时，通过公钥进行加密，A接收到数据后通过私钥进行解密，完成一次通信； 反之，A向B发送数据时，通过私钥对数据进行加密，B接收到数据后通过公钥进行解密。 RSARSA算法是最著名的非对称加密算法。RSA是1977年提出的，名字来源于Rivest、Shmir和Adleman三位作者。我们平时用到的SSL协议，TLS协议都采用了该算法加密，SSH（Secure Shell）也是基于RSA实现的。 RSA的数学基础是极大整数的因数分解，具体实现过程如下： 随意选择两个大的质数p和q，p不等于q，计算N&#x3D;pq。 根据欧拉函数，求得r&#x3D;varphi (N) &#x3D; varphi(p) * varphi(q)&#x3D;(p-1)(q-1) 选择一个小于r的整数e，使e与r互质。并求得e关于r的模反元素，命名为d。 (N,e)是公钥，(N,d)是私钥。 加密时，加密的块 n^e ≡ c(MOD N)，得到的c就是密文。解密时，c^d ≡ n(MOD N)。 要破解RSA要解决怎么把一个极大数分解为两个质数p和q，然后通过欧拉函数再得到公钥和私钥。但极大数因数分解目前还没什么好办法，所以只要N足够大，RSA在算法层面上就是安全的。 当N的长度为256时，用普通电脑花几小时即可以分解，当N长度为512时需要花数月时间分解，1024时需要大型分布式系统才能分解，长度到2046则可以确保是完全安全的。目前已有记录里，被分解的极大数最大位数是768位，于2009年被分解。 RSA也常被用来做数字签名，在消息内附加一个私钥加密过的散列值（Message digest），以此来确保消息发送人是可靠的。公钥私钥对生成 # 1.该命令会生成1024位的私钥,此时我们就可以在当前路径下看到rsa_private_key.pem文件了. genrsa -out rsa_private_key.pem 1024 # 2.生成的密钥不是pcs8格式，我们需要转成pkcs8格式 pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt # 3.生成 rsa 公钥 rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem 椭圆曲线算法椭圆曲线算法（Elliptic curve cryptography）也是一种非对称加密算法，于1985年被提出，以下简称ECC。相比RSA，同等破解难度时ECC的秘钥更短。另外，ECC可定义椭圆曲线群的双线性映射，该特性可能将来被用来实现身份基加密体制（Identity-Based Encryption，IBE）。 ECC的数学基础是求椭圆曲线离散对数问题。实现比较复杂我就不写了，因为我也看不懂(⊙﹏⊙)b。 也正因为实现复杂，ECC的加解密速度慢，消耗资源也更多。 ECC也同样可以实现数字签名，叫做ECDSA。 ECC的秘钥长度最小要求是160位，建议是163位。目前已有的破解记录是109位，一万台机器破解了一年半。所以ECC在算法层面是可以保证安全的。 ElGamalElGamal加密算法是一种用于对采用Diff-Hellman方式进行交换的公钥进行加密，常被用于数字签名和密钥加密的算法，ElGamal的数学基础是有限域上的离散对数问题。 选择一个素数p和两个随机数g 、x （g、 x &lt; p ），计算 y ≡ g^x（ mod p ） ，则其公钥为 y, g 和p ，私钥是x ，g和p可由一组用户共享。 ElGamal方法中一个明文对应两个加密结果(g^a和g^b)，因此密文空间的大小是明文空间大小的两倍，也就是说纵观整个通信过程，收发密文的大小是实际明文大小的两倍。 三、哈希算法概述我们经常说MD5加密，但追根究底的话，MD5应该是哈希函数（Hash Function），而哈希函数并不等同于加密（Encrypt），不过我们平常也把哈希叫做加密。哈希函数也叫散列函数，散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该函数将数据打乱混合，重新创建一个叫做散列值（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用来代表一个短的随机字母和数字组成的字符串。 说人话就是哈希（Hash）是将目标文本转换成具有相同长度的、不可逆的杂凑字符串，而加密（Encrypt）是将目标文本转换成具有不同长度的、可逆的密文。 哈希主要用来校验身份，错误检查，完整性检查。 MD5MD5（Message-Digest5 Algorithm）即消息摘要算法，是最著名、应用最为广泛的一种哈希算法，于1992年被公开。MD5之前还有MD4、MD3、MD2等哥哥算法，MD5是最终的改进版。 MD5输入不定长度信息，输出固定长度为128-bits的散列 未完 待补充REFERENCE常见加密算法简介","categories":[{"name":"后端","slug":"后端","permalink":"https://ysluckly.github.io/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"encryption","slug":"encryption","permalink":"https://ysluckly.github.io/tags/encryption/"}]},{"title":"JSP操作记录","slug":"front-end/JSP操作记录","date":"2017-04-21T03:22:12.000Z","updated":"2022-02-19T09:27:58.495Z","comments":true,"path":"2017/04/21/jsp-use-record/","link":"","permalink":"https://ysluckly.github.io/2017/04/21/jsp-use-record/","excerpt":"","text":"问题EL表达式失效&lt;!-- jsp渲染器不识别el表达式，结果页面展示效果如下 --&gt; &#123;person.id&#125; &#123;person.name&#125; 解决方法：在页面内加入下面代码即可 &lt;%@ page isELIgnored=&quot;false&quot; %&gt; Map遍历&lt;c:forEach items=&quot;$&#123;map&#125;&quot; var=&quot;entry&quot;&gt; &lt;c:out value=&quot;$&#123;entry.key&#125;&quot; /&gt; &lt;c:out value=&quot;$&#123;entry.value&#125;&quot; /&gt; &lt;/c:forEach&gt; 取值&lt;c:out value=&quot;$&#123;map[key]&#125;&quot; /&gt;","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"jsp","slug":"jsp","permalink":"https://ysluckly.github.io/tags/jsp/"},{"name":"jstl","slug":"jstl","permalink":"https://ysluckly.github.io/tags/jstl/"}]},{"title":"[转]SpringMVC执行流程及源码解析","slug":"back-end/转-SpringMVC执行流程及源码解析","date":"2017-04-15T02:22:05.000Z","updated":"2022-02-19T09:27:58.485Z","comments":true,"path":"2017/04/15/SpringMVC-implementation-process/","link":"","permalink":"https://ysluckly.github.io/2017/04/15/SpringMVC-implementation-process/","excerpt":"","text":"在SpringMVC中主要是围绕着DispatcherServlet来设计，可以把它当做指挥中心。这里先说明一下SpringMVC文档给出的执行流程，然后是我们稍微具体的执行流程，最后是流程大致的源码跟踪。关于很很很详细的源码解析，这里暂先不做。 官方文档中的流程首先看下SpringMVC文档上给的流程图：这张图片给了我们大概的执行流程： 用户请求首先发送到前端控制器DispatcherServlet，DispatcherServlet根据请求的信息来决定使用哪个页面控制器Controller（也就是我们通常编写的Controller）来处理该请求。找到控制器之后，DispatcherServlet将请求委托给控制器去处理。 接下来页面控制器开始处理用户请求，页面控制器会根据请求信息进行处理，调用业务层等等，处理完成之后，会把结果封装成一个ModelAndView返回给DispatcherServlet。 前端控制器DispatcherServlet接到页面控制器的返回结果后，根据返回的视图名选择相应的试图模板，并根据返回的数据进行渲染。 最后前端控制器DispatcherServlet将结果返回给用户。 更具体的流程上面只是总体流程，接下来我们稍微深入一点，看下更具体的流程，这里没有图，只有步骤解析： 用户请求发送到前端控制器DispatcherServlet。 前端控制器DispatcherServlet接收到请求后，DispatcherServlet会使用HandlerMapping来处理，HandlerMapping会查找到具体进行处理请求的Handler对象。 HandlerMapping找到对应的Handler之后，并不是返回一个Handler原始对象，而是一个Handler执行链，在这个执行链中包括了拦截器和处理请求的Handler。HandlerMapping返回一个执行链给DispatcherServlet。 DispatcherServlet接收到执行链之后，会调用Handler适配器去执行Handler。 Handler适配器执行完成Handler（也就是我们写的Controller）之后会得到一个ModelAndView，并返回给DispatcherServlet。 DispatcherServlet接收到Handler适配器返回的ModelAndView之后，会根据其中的视图名调用视图解析器。 视图解析器根据逻辑视图名解析成一个真正的View视图，并返回给DispatcherServlet。 DispatcherServlet接收到视图之后，会根据上面的ModelAndView中的model来进行视图中数据的填充，也就是所谓的视图渲染。 渲染完成之后，DispatcherServlet就可以将结果返回给用户了。 源码DispatcherServlet是一个Servlet，我们知道在Servlet在处理一个请求的时候会交给service方法进行处理，这里也不例外，DispatcherServlet继承了FrameworkServlet，首先进入FrameworkServlet的service方法： protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; //请求方法 String method = request.getMethod(); //PATCH方法单独处理 if (method.equalsIgnoreCase(RequestMethod.PATCH.name())) &#123; processRequest(request, response); &#125; else &#123;//其他的请求类型的方法经由父类，也就是HttpServlet处理 super.service(request, response); &#125; &#125; HttpServlet中会根据请求类型的不同分别调用doGet或者doPost等方法，FrameworkServlet中已经重写了这些方法，在这些方法中会调用processRequest进行处理，在processRequest中会调用doService方法，这个doService方法就是在DispatcherServlet中实现的。下面就看下DispatcherServlet中的doService方法的实现。 请求到达DispatcherServletdoService方法： protected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception &#123; //给request中的属性做一份快照 Map&lt;String, Object&gt; attributesSnapshot = null; if (WebUtils.isIncludeRequest(request)) &#123; logger.debug(&quot;Taking snapshot of request attributes before include&quot;); attributesSnapshot = new HashMap&lt;String, Object&gt;(); Enumeration&lt;?&gt; attrNames = request.getAttributeNames(); while (attrNames.hasMoreElements()) &#123; String attrName = (String) attrNames.nextElement(); if (this.cleanupAfterInclude || attrName.startsWith(&quot;org.springframework.web.servlet&quot;)) &#123; attributesSnapshot.put(attrName, request.getAttribute(attrName)); &#125; &#125; &#125; //如果我们没有配置类似本地化或者主题的处理器之类的 //SpringMVC会使用默认的值 //默认配置文件是DispatcherServlet.properties request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext()); request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver); request.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver); request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource()); FlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response); if (inputFlashMap != null) &#123; request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap)); &#125; request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap()); request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager); try &#123; //开始处理 doDispatch(request, response); &#125; finally &#123; if (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123; return; &#125; // Restore the original attribute snapshot, in case of an include. if (attributesSnapshot != null) &#123; restoreAttributesAfterInclude(request, attributesSnapshot); &#125; &#125; &#125; DispatcherServlet开始真正的处理，doDispatch方法： protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123; HttpServletRequest processedRequest = request; HandlerExecutionChain mappedHandler = null; boolean multipartRequestParsed = false; //SpringMVC中异步请求的相关知识，暂先不解释 WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request); try &#123; ModelAndView mv = null; Exception dispatchException = null; try &#123; //先检查是不是Multipart类型的，比如上传等 //如果是Multipart类型的，则转换为MultipartHttpServletRequest类型 processedRequest = checkMultipart(request); multipartRequestParsed = processedRequest != request; //获取当前请求的Handler mappedHandler = getHandler(processedRequest, false); if (mappedHandler == null || mappedHandler.getHandler() == null) &#123; noHandlerFound(processedRequest, response); return; &#125; //获取当前请求的Handler适配器 HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler()); // 对于header中last-modified的处理 String method = request.getMethod(); boolean isGet = &quot;GET&quot;.equals(method); if (isGet || &quot;HEAD&quot;.equals(method)) &#123; long lastModified = ha.getLastModified(request, mappedHandler.getHandler()); if (new ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123; return; &#125; &#125; //拦截器的preHandle方法进行处理 if (!mappedHandler.applyPreHandle(processedRequest, response)) &#123; return; &#125; try &#123; //真正调用Handler的地方 mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); &#125; finally &#123; if (asyncManager.isConcurrentHandlingStarted()) &#123; return; &#125; &#125; //处理成默认视图名，就是添加前缀和后缀等 applyDefaultViewName(request, mv); //拦截器postHandle方法进行处理 mappedHandler.applyPostHandle(processedRequest, response, mv); &#125; catch (Exception ex) &#123; dispatchException = ex; &#125; //处理最后的结果，渲染之类的都在这里 processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException); &#125; catch (Exception ex) &#123; triggerAfterCompletion(processedRequest, response, mappedHandler, ex); &#125; catch (Error err) &#123; triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err); &#125; finally &#123; if (asyncManager.isConcurrentHandlingStarted()) &#123; // Instead of postHandle and afterCompletion mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response); return; &#125; // Clean up any resources used by a multipart request. if (multipartRequestParsed) &#123; cleanupMultipart(processedRequest); &#125; &#125; &#125; 可以看到大概的步骤还是按照我们上面分析的走的。 查找请求对应的Handler对象对应着这句代码 mappedHandler = getHandler(processedRequest, false);，看下具体的getHandler方法： protected HandlerExecutionChain getHandler(HttpServletRequest request, boolean cache) throws Exception &#123; return getHandler(request); &#125; 继续往下看getHandler： protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception &#123; //遍历所有的handlerMappings进行处理 //handlerMappings是在启动的时候预先注册好的 for (HandlerMapping hm : this.handlerMappings) &#123; HandlerExecutionChain handler = hm.getHandler(request); if (handler != null) &#123; return handler; &#125; &#125; return null; &#125; 继续往下看getHandler，在AbstractHandlerMapping类中： public final HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception &#123; //根据request获取handler Object handler = getHandlerInternal(request); if (handler == null) &#123; //如果没有找到就使用默认的handler handler = getDefaultHandler(); &#125; if (handler == null) &#123; return null; &#125; //如果Handler是String，表明是一个bean名称 //需要超照对应bean if (handler instanceof String) &#123; String handlerName = (String) handler; handler = getApplicationContext().getBean(handlerName); &#125; //封装Handler执行链 return getHandlerExecutionChain(handler, request); &#125; 根据requrst获取handler首先看下根据requrst获取handler步骤getHandlerInternal方法，在AbstractHandlerMethodMapping中： protected HandlerMethod getHandlerInternal(HttpServletRequest request) throws Exception &#123; //获取request中的url，用来匹配handler String lookupPath = getUrlPathHelper().getLookupPathForRequest(request); //根据路径寻找Handler HandlerMethod handlerMethod = lookupHandlerMethod(lookupPath, request); //根据handlerMethod中的bean来实例化Handler并添加进HandlerMethod return (handlerMethod != null) ? handlerMethod.createWithResolvedBean() : null; &#125; 看下根据路径寻找handler的方法lookupHandlerMethod： protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletRequest request) throws Exception &#123; List&lt;Match&gt; matches = new ArrayList&lt;Match&gt;(); //直接匹配 List&lt;T&gt; directPathMatches = this.urlMap.get(lookupPath); //如果有匹配的，就添加进匹配列表中 if (directPathMatches != null) &#123; addMatchingMappings(directPathMatches, matches, request); &#125; //还没有匹配的，就遍历所有的处理方法查找 if (matches.isEmpty()) &#123; // No choice but to go through all mappings addMatchingMappings(this.handlerMethods.keySet(), matches, request); &#125; //找到了匹配的 if (!matches.isEmpty()) &#123; Comparator&lt;Match&gt; comparator = new MatchComparator(getMappingComparator(request)); Collections.sort(matches, comparator); //排序之后，获取第一个 Match bestMatch = matches.get(0); //如果有多个匹配的，会找到第二个最合适的进行比较一下 if (matches.size() &gt; 1) &#123; Match secondBestMatch = matches.get(1); if (comparator.compare(bestMatch, secondBestMatch) == 0) &#123; Method m1 = bestMatch.handlerMethod.getMethod(); Method m2 = secondBestMatch.handlerMethod.getMethod(); throw new IllegalStateException( &quot;Ambiguous handler methods mapped for HTTP path &#39;&quot; + request.getRequestURL() + &quot;&#39;: &#123;&quot; + m1 + &quot;, &quot; + m2 + &quot;&#125;&quot;); &#125; &#125; //设置request参数 handleMatch(bestMatch.mapping, lookupPath, request); //返回匹配的url的处理的方法 return bestMatch.handlerMethod; &#125; else &#123;//最后还没有找到，返回null return handleNoMatch(handlerMethods.keySet(), lookupPath, request); &#125; &#125; 获取默认Handler如果上面没有获取到Handler，就会获取默认的Handler。如果还获取不到就返回null。 处理String类型的Handler如果上面处理完的Handler是String类型的，就会根据这个handlerName获取bean。 封装Handler执行链上面获取完Handler，就开始封装执行链了，就是将我们配置的拦截器加入到执行链中去，getHandlerExecutionChain： protected HandlerExecutionChain getHandlerExecutionChain(Object handler, HttpServletRequest request) &#123; //如果当前Handler不是执行链类型，就使用一个新的执行链实例封装起来 HandlerExecutionChain chain = (handler instanceof HandlerExecutionChain) ? (HandlerExecutionChain) handler : new HandlerExecutionChain(handler); //先获取适配类型的拦截器添加进去拦截器链 chain.addInterceptors(getAdaptedInterceptors()); //当前的url String lookupPath = urlPathHelper.getLookupPathForRequest(request); //遍历拦截器，找到跟当前url对应的，添加进执行链中去 for (MappedInterceptor mappedInterceptor : mappedInterceptors) &#123; if (mappedInterceptor.matches(lookupPath, pathMatcher)) &#123; chain.addInterceptor(mappedInterceptor.getInterceptor()); &#125; &#125; return chain; &#125; 获取对应请求的Handler适配器getHandlerAdapter： protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException &#123; //遍历所有的HandlerAdapter，找到和当前Handler匹配的就返回 //我们这里会匹配到RequestMappingHandlerAdapter for (HandlerAdapter ha : this.handlerAdapters) &#123; if (ha.supports(handler)) &#123; return ha; &#125; &#125; &#125; 缓存的处理也就是对last-modified的处理 执行拦截器的preHandle方法就是遍历所有的我们定义的interceptor，执行preHandle方法 使用Handler适配器执行当前的Handlerha.handle执行当前Handler，我们这里使用的是RequestMappingHandlerAdapter，首先会进入AbstractHandlerMethodAdapter的handle方法： public final ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; return handleInternal(request, response, (HandlerMethod) handler); &#125; handleInternal方法，在RequestMappingHandlerAdapter中： protected final ModelAndView handleInternal(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod) throws Exception &#123; if (getSessionAttributesHandler(handlerMethod).hasSessionAttributes()) &#123; // Always prevent caching in case of session attribute management. checkAndPrepare(request, response, this.cacheSecondsForSessionAttributeHandlers, true); &#125; else &#123; // Uses configured default cacheSeconds setting. checkAndPrepare(request, response, true); &#125; // Execute invokeHandlerMethod in synchronized block if required. if (this.synchronizeOnSession) &#123; HttpSession session = request.getSession(false); if (session != null) &#123; Object mutex = WebUtils.getSessionMutex(session); synchronized (mutex) &#123; return invokeHandleMethod(request, response, handlerMethod); &#125; &#125; &#125; //执行方法，封装ModelAndView return invokeHandleMethod(request, response, handlerMethod); &#125; 组装默认视图名称前缀和后缀名都加上 执行拦截器的postHandle方法遍历intercepter的postHandle方法。 处理最后的结果，渲染之类的processDispatchResult方法： private void processDispatchResult(HttpServletRequest request, HttpServletResponse response, HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) throws Exception &#123; boolean errorView = false; if (exception != null) &#123; if (exception instanceof ModelAndViewDefiningException) &#123; mv = ((ModelAndViewDefiningException) exception).getModelAndView(); &#125; else &#123; Object handler = (mappedHandler != null ? mappedHandler.getHandler() : null); mv = processHandlerException(request, response, handler, exception); errorView = (mv != null); &#125; &#125; // Did the handler return a view to render? if (mv != null &amp;&amp; !mv.wasCleared()) &#123; //渲染 render(mv, request, response); if (errorView) &#123; WebUtils.clearErrorRequestAttributes(request); &#125; &#125; else &#123; &#125; if (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123; // Concurrent handling started during a forward return; &#125; if (mappedHandler != null) &#123; mappedHandler.triggerAfterCompletion(request, response, null); &#125; &#125; 重点看下render方法，进行渲染： protected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception &#123; //设置本地化 Locale locale = this.localeResolver.resolveLocale(request); response.setLocale(locale); View view; if (mv.isReference()) &#123; //解析视图名，得到视图 view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request); &#125; else &#123; // No need to lookup: the ModelAndView object contains the actual View object. view = mv.getView(); if (view == null) &#123; throw new ServletException(&quot;ModelAndView [&quot; + mv + &quot;] neither contains a view name nor a &quot; + &quot;View object in servlet with name &#39;&quot; + getServletName() + &quot;&#39;&quot;); &#125; &#125; //委托给视图进行渲染 view.render(mv.getModelInternal(), request, response); &#125; view.render就是进行视图的渲染，然后跳转页面等处理。 到这里大概的流程就走完了。其中涉及到的东西还有很多，暂先不做详细处理。 原文：SpringMVC执行流程及源码解析","categories":[{"name":"后端","slug":"后端","permalink":"https://ysluckly.github.io/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"java","slug":"java","permalink":"https://ysluckly.github.io/tags/java/"},{"name":"spring","slug":"spring","permalink":"https://ysluckly.github.io/tags/spring/"},{"name":"springmvc","slug":"springmvc","permalink":"https://ysluckly.github.io/tags/springmvc/"}]},{"title":"PostgreSQL常用SQL操作","slug":"database/PostgreSQL常用SQL操作","date":"2017-04-14T08:37:24.000Z","updated":"2022-02-19T09:27:58.491Z","comments":true,"path":"2017/04/14/postgres-sql-use/","link":"","permalink":"https://ysluckly.github.io/2017/04/14/postgres-sql-use/","excerpt":"","text":"说明：文章中实例均在 PostgreSQL 环境操作。 DDL数据定义语言数据库&#x2F;角色&#x2F;schema-- 创建一个数据库用户 create role &quot;sp-boss&quot; createdb createrole login password &#39;sp-boss&#39;; -- 使用上面角色登录 postgres 数据库 psql -U sp-boss -d postgres -- 创建自己的数据库 create database &quot;sp-boss&quot; -- 登录自己的数据库 psql -U sp-boss -- 创建一个其他用户 create role &quot;sp-manager&quot; login password &#39;sp-manager&#39;; -- 赋予 create 权限 grant create on database &quot;sp-boss&quot; to &quot;sp-manager&quot;; -- 使用 新用户 登录数据库 psql -U sp-manager -d sp-boss -- 创建自己的 schema create schema &quot;sp-manager&quot;; 表--创建表 create table user_info ( id serial primary key, name varchar(20), age integer, create_time timestamp, type integer, display boolean default true, unique (name, type) ); --删除表 drop table exists user_info; --重命名表 alter table user_info rename to user_infos; 字段（列）--添加一列 alter table user_info add [column] username varchar(50); --删除一列 alter table user_info drop [column] username; --重命名列 alter table user_info rename [column] username to name; --修改结构 alter table user_info alter [column] username set not null; -- 唯一约束-- 添加名为 uk_name 的联合唯一约束，组合列为column1和column2 alter table sys_theme add constraint uk_name unique(column1,column2); -- 删除名为 uk_name 的约束 alter table sys_theme drop constraint uk_name; DML数据库操作语言SELECT查询包含json格式的text类型的数据postgres=# select * from person; id | name | other ----+--------+---------------------------------------------------------- 1 | faker | &#123;&quot;gender&quot;:&quot;male&quot;,&quot;address&quot;:&quot;xiamen&quot;,&quot;college&quot;:&quot;xmut&quot;&#125; 2 | watson | &#123;&quot;gender&quot;:&quot;male&quot;,&quot;address&quot;:&quot;shenzhen&quot;,&quot;college&quot;:&quot;szu&quot;&#125; 3 | lance | &#123;&quot;gender&quot;:&quot;male&quot;,&quot;address&quot;:&quot;shenzhen&quot;,&quot;college&quot;:&quot;xmut&quot;&#125; 4 | jine | &#123;&quot;gender&quot;:&quot;female&quot;,&quot;address&quot;:&quot;xiamen&quot;,&quot;college&quot;:&quot;xmut&quot;&#125; 5 | jobs | &#123;&quot;gender&quot;:&quot;male&quot;,&quot;address&quot;:&quot;beijing&quot;,&quot;college&quot;:&quot;xmu&quot;&#125; 6 | yak | &#123;&quot;gender&quot;:&quot;female&quot;,&quot;address&quot;:&quot;xiamen&quot;,&quot;college&quot;:&quot;xmut&quot;&#125; 7 | alice | &#123;&quot;gender&quot;:&quot;female&quot;,&quot;address&quot;:&quot;shanghai&quot;,&quot;college&quot;:&quot;thu&quot;&#125; 8 | anita | &#123;&quot;gender&quot;:&quot;female&quot;,&quot;address&quot;:&quot;xiongan&quot;,&quot;college&quot;:&quot;hku&quot;&#125; (8 行记录) -- 查询深圳学生的高校分部情况 select other::json-&gt;&gt;&#39;college&#39; college, count(1) from person where other::json-&gt;&gt;&#39;address&#39;=&#39;shenzhen&#39; group by other::json-&gt;&gt;&#39;college&#39;; ___________________________ college | count ---------+------- szu | 1 xmut | 1 (1 行记录) --- 结果可得深圳一共有两个学生， --- 在深圳大学和厦门理工学院各一个。","categories":[{"name":"数据库","slug":"数据库","permalink":"https://ysluckly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"postgres","slug":"postgres","permalink":"https://ysluckly.github.io/tags/postgres/"},{"name":"sql","slug":"sql","permalink":"https://ysluckly.github.io/tags/sql/"}]},{"title":"deepin系统使用记录","slug":"tools/deepin-linux","date":"2017-03-30T10:58:50.000Z","updated":"2022-02-19T09:27:58.552Z","comments":true,"path":"2017/03/30/deepin-linux/","link":"","permalink":"https://ysluckly.github.io/2017/03/30/deepin-linux/","excerpt":"","text":"传送门 官网 论坛 deepin’wiki Deepin应用列表 输入法安装输入法，除了商店下载（好多输入法没有被收录进deepin商店），可以使用fcitx安装。如安装google拼音输入法： $ sudo aptitude install fcitx fcitx-googlepinyin 如果当前在使用ibus，而不是fcitx的话，看下面1）安装fcitx，并安装google拼音 $ sudo apt-get install fcitx fcitx-googlepinyin im-config 2）打开输入法配置 $ im-config 依次：ok-&gt;yes,选择fcitx为默认输入法框架,ok-&gt;ok 制作启动器图标以创建 atom 这款编辑器的启动器图标为例。1）进入 /usr/share/applications/ 目录，创建 atom.desktop 文件2）编辑 atom.desktop 文件 [Desktop Entry] Name=Atom Comment=A hackable text editor for the 21st century Exec=/opt/atom/atom %F Icon=/opt/atom/atom.png Type=Application StartupNotify=true Categories=TextEditor;Development;Utility; MimeType=text/plain; 解释：Name：创建的图标名称Comment：备注，随便填Exec：启动文件的位置Icon：图标位置Type：类型，启动程序就填ApplicationStartupNotify: 启动通知，填true就行了。详细可查 Startup notificationCategories： 分类，随便填，比如：Application;MimeType： 打开文件类型 修改apt源修改 /etc/apt/sources.list默认的源 deb [by-hash=force] http://packages.deepin.com/deepin/ unstable main contrib non-free 阿里云的源 deb [by-hash=force] http://mirrors.aliyun.com/deepin unstable main contrib non-free 更换文件管理器Nautilus 深度商店下载安装 Nautilus2）卸载深度任务管理器$ sudo apt remove dde-file-manager Nautilus 常用的快捷键 快捷键 作用 F2 重命名 Ctrl + 1 图标视图 Ctrl + 2 列表视图 Ctrl + T 新建标签页 Ctrl + W 关闭标签页 Alt + 数字 切换到指定标签页 Ctrl + D 收藏到当前文件夹到书签 Shift + F10 打开鼠标右键菜单 Alt + 左方向键 后退 Alt + 右方向键 前进 Ctrl + Q 退出","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"软件记录","slug":"工具/软件记录","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/%E8%BD%AF%E4%BB%B6%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/tags/%E8%BF%90%E7%BB%B4/"},{"name":"deepin","slug":"deepin","permalink":"https://ysluckly.github.io/tags/deepin/"}]},{"title":"hexo报错合集","slug":"tools/hexo-error-collection","date":"2017-03-27T11:40:42.000Z","updated":"2022-02-19T09:27:58.561Z","comments":true,"path":"2017/03/27/hexo-error-collection/","link":"","permalink":"https://ysluckly.github.io/2017/03/27/hexo-error-collection/","excerpt":"","text":"hexo server时报错FATAL watch … ENOSPC日志：2017-03-27 执行 hexo server 后报错。如图：分析问题：node.js 中 watch 的文件数是有限制的。解决问题： $ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"}]},{"title":"3-hexo快捷键说明","slug":"tools/3-hexo-shortcuts","date":"2017-03-24T08:45:31.000Z","updated":"2022-02-19T09:27:58.544Z","comments":true,"path":"2017/03/24/3-hexo-shortcuts/","link":"","permalink":"https://ysluckly.github.io/2017/03/24/3-hexo-shortcuts/","excerpt":"","text":"今日公司断网了半个小时，就利用这段时间给主题添加了快捷键操作，方便使用。 快捷键为vim风格的。按键可能与vimium（chrome插件）的快捷键有冲突，插件设置屏蔽掉此站的快捷键即可 如果有比较好的建议，欢迎骚扰。 说明全局 Key Descption s&#x2F;S 全屏&#x2F;取消全屏 w&#x2F;W 打开&#x2F;关闭文章目录 i&#x2F;I 获取搜索框焦点 j&#x2F;J 向下滑动 k&#x2F;K 向上滑动 gg&#x2F;GG 到最顶端 shift+G&#x2F;g 到最下端 搜索框 Key Descption ESC 1.如果输入框有内容，清除内容2.如果输入框无内容，失去焦点 下 向下选择文章 上 向上选择文章 回车 打开当前选中的文章，若没有，则默认打开第一个 关闭快捷键在主题下 _config.yml 中 找到 shortcutKey 设为 false shortcutKey: false","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"3-hexo","slug":"3-hexo","permalink":"https://ysluckly.github.io/tags/3-hexo/"}]},{"title":"3-hexo使用说明","slug":"tools/3-hexo-instruction","date":"2017-03-23T07:13:47.000Z","updated":"2022-02-19T09:27:58.539Z","comments":true,"path":"2017/03/23/3-hexo-instruction/","link":"","permalink":"https://ysluckly.github.io/2017/03/23/3-hexo-instruction/","excerpt":"","text":"下面如果没有特殊说明， _config.yml 都指主题配置文件，即 3-hexo 目录下 一、初始化博客下 _config.yml1.1 国际化language: zh-CN #支持 zh-CN、en 1.2 关掉 hexo 自带的代码高亮主题内置了主题高亮，所以需要禁用 hexo 自带的高亮 highlight: enable: false 二、功能相关2.1 自定义首页可查看这篇文章： 3-hexo配置首页 2.3 blog快捷键可查看这篇文章： 3-hexo快捷键说明 2.4 多作者模式可查看这篇文章： 3-hexo多作者模式 2.5 开启关于页面 在 hexo 根目录执行以下，创建 关于 页面hexo new page &quot;about&quot; 位置： source/aoubt/index.md ，根据需要进行编辑。 在主题中开启显示：修改主题根目录 _config.yml 中的 about 的 on 为 true，如下所示menu: about: # &#39;关于&#39; 按钮 on: true # 是否显示 url: /about # 跳转链接 type: 1 # 跳转类型 1：站内异步跳转 2：当前页面跳转 3：打开新的tab页 2.6 添加音乐插件3-hexo 添加音乐插件 2.7 配置评论系统3-hexo评论设置 三、样式设置3.1 代码高亮首先要关闭hexo根目录下_config.yml中的高亮设置： highlight: enable: false 配置主题下_config.yml中的高亮设置：可以根据提示，配置喜欢的高亮主题 highlight: on: true # true开启代码高亮 lineNum: true # true显示行号 theme: darcula # 代码高亮主题,效果可以查看 https://highlightjs.org/static/demo/ # 支持主题： # sublime : 参考sublime的高亮主题 # darcula : 参考idea中的darcula的主题 # atom-dark : 参考Atom的dark主题 # atom-light : 参考Atom的light主题 # github : 参考GitHub版的高亮主题 # github-gist : GitHub-Gist主题 # brown-paper : 牛皮纸效果 # gruvbox-light : gruvbox的light主题 # gruvbox-dark ： gruvbox的dark主题 # rainbow : # railscasts : # sunburst : # kimbie-dark : # kimbie-light : # school-book : 纸张效果 3.2 MathJax数学公式修改 _config.yml # MathJax 数学公式支持 mathjax: on: true #是否启用 per_page: false # 若只渲染单个页面，此选项设为false，页面内加入 mathjax: true 考虑到页面的加载速度，支持渲染单个页面。设置 per_page: false ,在需要渲染的页面内 加入 mathjax: true 注意: 由于hexo的MarkDown渲染器与MathJax有冲突，可能会造成矩阵等使用不正常。所以在使用之前需要修改两个地方编辑 node_modules\\marked\\lib\\marked.js 脚本 将451行 ，这一步取消了对 \\\\,\\&#123;,\\&#125; 的转义(escape)escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()# +\\-.!_&gt;])/, 改为 escape: /^\\\\([`*\\[\\]()# +\\-.!_&gt;])/, 将459行，这一步取消了对斜体标记 _ 的转义em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 改为 em:/^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 3.3 表格样式目前提供了3中样式，修改 _config.yml table: green_title # table 的样式 # 为空时类似github的table样式 # green 绿色样式 # green_title 头部为青色的table样式 3.4 文章列表的hover样式鼠标移入的背景色和文字颜色变动，设置 _config.yml #文章列表 鼠标移上去的样式, 为空时使用默认效果 article_list: hover: background: &#39;#e2e0e0&#39; # 背景色:提供几种：&#39;#c1bfc1&#39; &#39;#fbf4a8&#39; color: # 文字颜色 提供几种：&#39;#ffffff&#39; # 注意：由于颜色如果包含#，使用单引号 &#39; 引起来 3.5 开启字数统计 开启此功能需先安装插件，在 hexo根目录 执行 npm i hexo-wordcount --save 修改 _config.yml word_count: true 3.6 更换头像两种方式： 替换 source/img/avatar.jpg 图片。 修改 _config.yml 中头像的配置记录 # 你的头像url avatar: /img/avatar.jpg favicon: /img/avatar.jpg 3.7 设置链接图标 如果需要自定义图标可以看这篇文章 3-hexo添加自定义图标 如下，如果没有连接，则不展示图标。 #链接图标，链接为空则不显示 link: rss: /atom.xml github: https://github.com/yelog facebook: https://www.facebook.com/faker.tops twitter: linkedin: instagram: reddit: https://www.reddit.com/user/yelog/ weibo: http://weibo.com/u/2307534817 email: jaytp@qq.com 四、排序及置顶4.1 分类排序默认按照首字母正序排序，由于中文在 nodejs 环境下不能按照拼音首字母排序，所以添加了自定义排序方式，在主题下 _config.yml 中找到如下配置，category.sort则是定义分类顺序的。 规则：在 sort中定义的 category 比 没有在 sort 中定义的更靠前 # 文章分类设置 category: num: true # 分类显示文章数 sub: true # 开启多级分类 sort: - 读书 - 大前端 - 后端 - 数据库 - 工具 - 运维 4.2 文章排序 2020-05-20 更新：无需安装插件或修改源码，主题已经内置排序算法 文章列表默认按照创建时间（如下文章内定义的date）倒序。 使用 top 将会置顶文章，多个置顶文章时，top 定义的值越大，越靠前。 --- title: 每天一个linux命令 date: 2017-01-23 11:41:48 top: 1 categories: - 运维 tags: - linux命令 --- 五、关于写文章5.1 如何写每篇文章最好写上文集和标签，方便筛选和查看。一般推荐一篇文章设置一个文集，一个或多个标签categories:文集，为左侧列表tags:标签，通过#来筛选例如 本篇文章的设置 --- title: 3-hexo使用说明 date: 2017-03-23 15:13:47 categories: - 工具 tags: - hexo - 3-hexo --- 5.2 写作1.设置模板，blog根目录 scaffolds/post.md加入categories,tags等，这样以后通过 hexo new 生成的模板就不用写这两个单词了。当然，你也可以写入任何你每个文章中都会有的部分。 --- title: &#123;&#123; title &#125;&#125; date: &#123;&#123; date &#125;&#125; categories: tags: --- 六、技巧6.1 快捷命令其实就通过alias，触发一些命令的集合在 ~/.bashrc 文件中添加 alias hs=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&#39; #启动本地服务 alias hd=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d&#39; #部署博客 甚至你也可以加入备份文章的命令，可以自由发挥。 6.3 博客备份（快捷命令升级版）为了保证我们写的文章不丢失、快速迁移博客，都需要备份我们的blog。 博客根目录，执行 git init 创建 git 仓库。 在 github（或其他托管平台、自建远程仓库等） 创建仓库并和本地仓库建立联系。 在 ~/.bashrc 文件中添加alias hs=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo s&#39; alias hd=&#39;hexo clean &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; git add . &amp;&amp; git commit -m &quot;update&quot; &amp;&amp; git push -f&#39; 这样，我们在执行 hd 进行部署时，就一同将博客进行备份了","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"3-hexo","slug":"3-hexo","permalink":"https://ysluckly.github.io/tags/3-hexo/"}]},{"title":"关于第三方评论系统","slug":"tools/the-third-comment","date":"2017-03-23T03:59:50.000Z","updated":"2022-02-20T12:03:17.199Z","comments":true,"path":"2017/03/23/the-third-comment/","link":"","permalink":"https://ysluckly.github.io/2017/03/23/the-third-comment/","excerpt":"","text":"前言昨天登录blog看到了多说的通知：将于2017年6月1日正式关停服务，其实并没有太大的意外。 自从去年9月份disqus被GFW认证后，被迫转移到多说，一看就是很久没有维护了，感觉关闭就是迟早的事，没想到刚用5个月。。 不能用disqus不开心，然后就又开始调查第三方评论系统。 友言特点 界面挺像disqus的 查询最近的评论，需要打开新的页面 支持表情，不支持图片 支持自定义界面 注册即用 网易云跟帖特点 界面简洁 网易作为后台，不容易倒 不支持表情，不支持图片 支持自定义界面 我在国外加载巨慢，不过查了国内的延迟，平均20ms左右。 注册即用 畅言特点 界面简介 打印记的功能 支持表情和图片 支持获取评论数 需要ICP备案 最后想要尝试一下畅言，功能符合我的预期，不过要ICP备案，最近由于想要开启国内CDN加速，也需要备案。 蛋四！！ 我在国外，等回国的时候再备案吧，暂时现使用 disqus,如果想评论，国内只能翻墙了。╮（╯＿╰）╭ 最后，多说一路走好。","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"}]},{"title":"windows环境下使用hexo搭建blog平台","slug":"tools/windows-hexo","date":"2017-03-17T06:02:55.000Z","updated":"2022-02-19T09:27:58.571Z","comments":true,"path":"2017/03/17/windows-hexo/","link":"","permalink":"https://ysluckly.github.io/2017/03/17/windows-hexo/","excerpt":"","text":"之前已经出过几期搭建 hexo 的文章，但是有不少朋友私信说系统是windows的，希望出一期windows环境下的hexo搭建文章。 为此，确保可用性，笔者在linux（笔者的系统环境）环境下安装了windows虚拟机重新演练了一边，确保没有什么漏洞，才写下了此文。 本文会非常详细，以确保没有计算机背景的小白也可以轻松上手 环境搭建安装git1).下载：从官网下载windows版本的git,地址在下方。https://git-scm.com/download/win2).安装：双击安装，一直点击下一步即可 安装node.js1).下载：从官网下载windows版本的node.js安装包（.msi后缀），地址下方https://nodejs.org/zh-cn/download/2).安装：双击安装，一直点击下一步即可 安装hexo在任意目录如桌面，点击鼠标右键，选择Git Bash Here这一项，打开git bash命令框（前提是git安装成功），如下图在打开的命令窗内输入下面的命令进行安装 npm install hexo-cli -g 安装过后，输入 hexo -v，出现下面信息，则表示安装成功 $ hexo -v hexo-cli: 1.0.2 os: Windows_NT 6.1.7601 win32 x64 http_parser: 2.7.0 node: 6.10.0 v8: 5.1.281.93 uv: 1.9.1 zlib: 1.2.8 ares: 1.10.1-DEV icu: 58.2 modules: 48 openssl: 1.0.2k 初始化blog进入准备创建blog的目录，同样点击鼠标右键，打开git bash命令框，执行一下命令进行初始化 $ hexo init myblog 就会自动创建一个名字为myblog目录，这时本地blog就已经创建好了。进入blog目录，启动 blog $ cd myblog $ hexo server 在浏览器输入 127.0.0.1:4000就可以访问到刚刚创建好的blog了。 换皮肤如果觉的自带的皮肤太难看。可以根据以下步奏更换皮肤在官网 可以查看各种各样的皮肤，挑选自己喜欢的皮肤 这里以 3-hexo 这款皮肤为例（这款皮肤是笔者写的，效果可查看 yelog.org）1）进入皮肤的 github 官网，如3-hexo的网址找到 clone or download ,复制它的url：https://github.com/yelog/hexo-theme-3-hexo.git 2）进入 myblog 目录，打开 git bash 命令框，执行以下命令将皮肤下载到themes目录下 $ git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo 修改 myblog/_config.yml 中的 theme: landscape 为 theme: 3-hexo 如果使用 3-hexo 主题的话，还需要注意两点①因为主题使用了自己的高亮效果，还需要修改 highlight enable: true 的 true 改为 false。②由于主题启用了文章字数统计功能，需要安装一个插件，在 myblog 目录下，打开 git bash 命令框，执行 npm i --save hexo-wordcount 即可 重新渲染，启动服务器 $ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 打开浏览器查看效果，换肤成功 如何写文章文章在 myblog/source/_posts/ 下，以markdown格式写成，笔者推荐使用atom作为写作工具。可以通过 hexo new 文章名 来创建一篇文章，当然也可以直接在 _posts 目录下直接新建.md文件。执行命令 仍是在 myblog 目录下，打开 git bash 命令框。以下是常用命令，其他可以查阅官网。 # 创建一个标题为“git教程”的文章 $ hexo new &quot;git教程&quot; # 清除所有渲染的页面 $ hexo clean # 将markdown渲染成页面 $ hexo g # 启动hexo $ hexo s 发布到网上如果想要在github上搭建blog，或者在自己的购买的服务器上搭建blog可以查看笔者的往期文章 今天的教程就到这里，有什么问题可以在评论区交流。","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"}]},{"title":"npm使用介绍","slug":"front-end/npm使用介绍","date":"2017-03-16T12:09:48.000Z","updated":"2022-02-19T09:27:58.500Z","comments":true,"path":"2017/03/16/npm/","link":"","permalink":"https://ysluckly.github.io/2017/03/16/npm/","excerpt":"","text":"Whatnpm（全称Node Package Manager，即node包管理器）是Node.js默认的、以JavaScript编写的软件包管理系统。作者：艾萨克·施吕特（Isaac Z. Schlueter） 安装npm 是随同node.js一起安装的，所以安装node.js即可。 使用# 查看版本 $ npm -v # 升级 $ sudo npm install npm -g # 安装模块 $ npm install &lt;Module Name&gt; #本地安装 # 本地安装：安装到./node_modules(命令运行目录) $ npm install &lt;Module Name&gt; -g #全局安装 # 全局安装：放在 /usr/local 下或者你 node 的安装目录。 # 卸载模块 $ npm uninstall &lt;Module Name&gt; # 更新模块 $ npm update &lt;Module Name&gt; # 查看所有安装的模块 $ npm ls #所有本地模块 $ npm ls -g #所有全局模块 # 搜索模块 $ npm search &lt;Module Name&gt;","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"node","slug":"node","permalink":"https://ysluckly.github.io/tags/node/"}]},{"title":"为Hexo添加RSS和Sitemap","slug":"tools/Hexo-RSS-Sitemap","date":"2017-03-14T01:44:29.000Z","updated":"2022-02-19T09:27:58.547Z","comments":true,"path":"2017/03/14/Hexo-RSS-Sitemap/","link":"","permalink":"https://ysluckly.github.io/2017/03/14/Hexo-RSS-Sitemap/","excerpt":"","text":"添加RSS使用RSS是为自己的blog提供订阅功能。 1.用npm安装插件$ npm install hexo-generator-feed --save 2.配置根目录_config.yml# Extensions ## Plugins: http://hexo.io/plugins/ #RSS订阅 plugin: - hexo-generator-feed #Feed Atom feed: type: atom path: atom.xml limit: 20 3.验证配置是否成功执行 hexo g，查看一下public目录下，如果有 atom.xml 文件，则表明配置成功。 4.显示RSS图标这里以3-hexo主题为例，给rss添加链接/atom.xml修改/themes/3-hexo/_config.yml link: rss: /atom.xml 5.效果链接图标：链接地址效果 添加SitemapSitemap，网站地图，是网站优化中重要的一环，无论是对于访问者还是对于搜索引擎。 1.用npm安装插件$ npm install hexo-generator-sitemap --save 2.配置根目录_config.ymlplugin: - hexo-generator-feed - hexo-generator-sitemap 3.验证配置是否成功执行 hexo g，查看一下public目录下，如果有 sitemap.xml 文件，则表明配置成功。 4.效果访问 &#x2F;sitemap.xml 就能看到生成的站点地图了","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"}]},{"title":"3-hexo开发日志-持续更新","slug":"tools/3-hexo-logs","date":"2017-03-13T07:44:57.000Z","updated":"2022-02-19T09:27:58.541Z","comments":true,"path":"2017/03/13/3-hexo-logs/","link":"","permalink":"https://ysluckly.github.io/2017/03/13/3-hexo-logs/","excerpt":"","text":"2022年0202-16 fix 修复首页使用自定义 html 标题时，大纲和文章关联关系丢失报错的问题 2021年09月09-26 fix 修复 gitalk 代理节点的问题，并升级为官方最新的代码 2021年02月02-22 enhance 按标题搜索支持字符级别模糊查询，并高亮显示 2020年12月12-28 fix 修复了右下角按钮错位问题 enhance 优化图标样式，支持自定义图标引入 change 分类超出隐藏 2020年8月08-09 fix 修复了切换大纲时，未关闭全局搜索框(in:) 的问题2. add 代码块新增显示代码类型和复制代码功能 fix分类支持 \\/#.[]() 特殊字符 fix 大纲支持URI 编码，兼容 hexo5+ 2020年5月05-29 fix 修复了旧版 hexo 报错的问题 05-23 change 由于 cloudflare 国内访问不稳定，故 cdn 切换到 jsdelivr fix 修复文章大纲为空时，同步大纲报错的问题 change 文章内 toc 生成从 @【toc】 改为 【toc】 enhance 快捷键支持关闭 shortcutKey: false add 添加第三方评论 来必力 和 utteranc remove 移除网易云评论 05-21 add 添加备案号配置 05-20 enhance 内置文章排序，无需再引入排序插件或修改源代码 enhance 支持自定义分类的顺序， 具体可以查看 3-hexo使用说明 中的排序相关内容 05-19 change 重做了文章大纲 change 重做了搜索&#x2F;标签页 style 优化了整体界面风格 fix修复了诸如 分类选中动画闪烁 等细节问题 2020年2月02-041.fix: 修复 gitalk 使用 app API query parameter 弃用的问题 2019年11月11-121.fix: 修复 hexo4.0 版本链接外跳的问题2.add: 支持 mermaid 3-hexo支持mermaid图表 09-241.add: 支持文章内 toc 生成 3-hexo文章内toc生成 09-051.fix: pjax 兼容 jsfiddle 的渲染 3-hexo支持jsfiddle渲染 2019年8月08-201.fix: 左下角菜单个数为一个时，在移动端出现的位置错乱的问题 08-13 add 添加自定义左侧分类栏宽度 category.width，详情见 _config.yml 08-01 fix 修复 友链 区域超出不滚动的问题 2019年7月07-22 add 新增修改文章列表颜色的参数 07-15 fix 修复 gitalk 由于作者停止了跨域的服务，借用其他人的跨域服务解决问题 07-12 add 新增图标：qq、酷狗、网易云音乐 fix 修复文末声明跨行的问题 2019年6月06-09 fix 修复了标签按钮在某些分辨率下错位问题。 fix 修复了代码行数超百行时，行号溢出的问题 2019年5月05-21 add 文章分类可以显示文章数 category&gt;num add 文章分类支持多级显示 category&gt;sub fix 修复gitalk显示评论数错误的问题 添加背景图设置： ① _config.xml 配置默认背景图片 首页背景图： index_bg_img: xxx.jpg 文章页面背景图：other_bg_img: xxx.jpg ② 我们还可以单独给某篇文章设置背景图（优先级最高） title: 3-hexo开发日志-持续更新 bgImg: xxx.jpg #设置这篇文章的背景图 05-05 add 添加代码段高亮样式配置，对应 markdown 语法 `` ，位置：_config.yml 关键字 code 2019年1月01-05 fix 修复Firefox下，Tags 图标失效问题 2018年11月11-30 add 应用彩色图标，新增简书、知乎、csdn、oschina等图标 fix 修复 gitment 登录报错的问题 enhance 升级gitalk插件，并跟随官方版本 2018年8月08-08 修复 fix : 修复左侧栏出现滚动条的问题 2018年4月04-18 修复 fix : 调整原文地址key，解决和 encrypt 的冲突 2017年12月12-31 优化 enhance : 关闭打赏，则屏蔽相关代码。 12-28 添加自定义菜单功能 add : 添加自定义菜单功能，见配置文件 menu: 相关 fix : 修复 photoSwipe 一些问题：手机端右上角图标遮挡、首页图片渲染失败、CDN引入配置文件 12-27 插件添加 add : 引入 photoSwipe 图片相册，可在 _config 中 配置 img_resize: photoSwipe fix : 左侧分类列表过多，则显示滚动条 change : 由于cdnjs最近在国内网络波动较大，将默认CDN改到bootcdn 12-26 功能优化 enhance : 全文检索支持通过方向键选择文章，回车跳转 12-24 功能添加 add : 添加全文检索功能， 输入in:开头即可开始检索 2017年10月10-21 样式调整 enhance : 优化了高亮样式 atom-light 10-20 样式调整与添加 add : 添加列表样式 thread add : 添加引用块样式 bracket add : 文章列表可加入背景图 10-07 add : 加入关于&#x2F;友链页面 2017年9月09-21 polish : 引入fragment_cache局部缓存，大幅缩减渲染(hexo g)的时间 Hexo加速渲染速度之fragment_cache enhance : 加入 SEO ，tag转keywords , title转description add : 添加文末说明参数 lit : 头像跳转首页的请求也处理为 pjax 2017年7月07-05 添加MathJax数学公式支持 add : 添加MathJax数学公式支持 3-hexo配置MathJax数学公式渲染 2017年6月06-26 添加gitment评论系统 add : 添加gitment评论系统，具体可参考 完美替代多说-gitment 2017年4月04-27 调整样式 change：调整引用块内p的样式。 04-19 调整样式和修复bug change:调整文章目录间距 fix:修复可能出现的访问量不显示的问题 04-17 调整样式及修复bug change:调整大屏下文章最大宽度（从780调到900），代码字号调整为比文字小3px fix:修复在过滤条件下，鼠标上下键不能正常在第一个，最后一个进行跳转的问题 fix:修复首页可能出现的错误渲染，导致没有样式的情况。 2017年3月03-29 增强文章列表上下键功能 enhance:增强列表跟随选择的文章上下滚动 enhance:文章列表上下循环 03-24 修复搜索及添加快捷键 fix:修复title关键字和标签关键字冲突的情况 fix:修复前进后退时对图片的错误处理 enhance:在搜索时，可以键盘上下键来选择文章 enhance:添加了一些快捷键，详情查看 3-hexo快捷键说明 03-22 添加评论系统 enhance: 添加网易云跟帖评论系统 03-21 图片放大动画 enhance:增加图片放大动画，增加过度感，最大放大至原图大小（若尺寸超过屏幕，按屏幕大小限制） 03-20 评论添加锚点 enhance:添加文章meta(标题下)中的评论数点击事件，滑动到评论区，评论区若隐藏，则自动打开 03-19 修复firfox错位问题 fix:修复firefox错位问题 enhance:文章标题下的分类、标签、作者在文章列表隐藏的情况下（包括移动端）点击，自动呼出文章列表 03-18 动画优化及修复bug enhance:给所有锚点添加动画 fix:修复文章列表页自适应宽度,解决由于firefox不支持自定义滚动条导致的错位 change:改动页面内站点访问量统计的标签，改动查看 — 3-hexo配置首页 03-17 评论调整优化 修复预加载时的评论数 首页添加评论框 03-16 文章meta样式修改 将文章meta（包括文集、标签、时间、字数等）改到文章title下方 站点版权信息（@2017 Yelog）,自定义，在主题 _config.yml 中配置 文章meta中添加评论数 03-15 增加样式 扩展了文章列表的移入样式，位置 _config.yml 中 article_list 03-14 打赏优化 加入切换二维码动画 移动端样式调整 03-13 首页重构 将首页改写为md格式，方便博主更改，位置：&#x2F;layout&#x2F;index.md 03-09 修复多说、添加流量统计 修复多说在pjax中的使用 添加字数统计功能 添加文章版权信息 03-06 添加打赏功能 添加打赏功能 添加table样式 03-04 添加作者和标签的提示 输入#或@显示下拉提示 03-03 修复多作者模式 修复开启多作者模式时，文章没有作者引起的异常 03-02 图片样式改动 alt显示在图片下方 图片放大功能 移动端图片宽度100% 2017年2月02-28 多作者模式 添加多作者模式 02-27 调整样式 修改a的样式 调整移动端宽度 02-25 修改github仓库名 修改github仓库名：从 3-hexo 到 hexo-theme-3-hexo 添加回到顶端功能：小火箭 修复safari滑动bug 02-24 站点版权、ICON和置顶 添加站点版权信息 更换icon到icoMoon 添加置顶功能 02-20 代码块高亮主题 添加十几种代码高亮主题 移动端适配（ipad、手机） 02-19 移动端适配 添加文章加载动画进度条 开始进行移动端适配 02-08 评论系统 添加多说评论 添加disqus评论 02-07 样式及动画新增修改 添加标题和时间的title 添加头像下外链图标（facebook等） 添加目录显示动画 02-06 功能和样式开发 添加全屏和目录功能 搜索框下添加tags的显示，并支持使用#搜索 CDN改为在_config.yml中配置 02-05 开源3-hexo主题 设计主题页面结构 分类过滤和标题关键字搜索 使用pjax方式加载页面 添加引用、表格等样式 使用highlight.js来处理代码块高亮 命名为3-hexo并在github上开源e","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"3-hexo","slug":"3-hexo","permalink":"https://ysluckly.github.io/tags/3-hexo/"}]},{"title":"3-hexo配置首页","slug":"tools/3-hexo-homepage","date":"2017-03-13T01:56:07.000Z","updated":"2022-02-19T09:27:58.538Z","comments":true,"path":"2017/03/13/3-hexo-homepage/","link":"","permalink":"https://ysluckly.github.io/2017/03/13/3-hexo-homepage/","excerpt":"","text":"今日将首页提到md文件中了，方便大家的更改。 首页文件位置 &#x2F;layout&#x2F;indexs.md ，既然是md格式，要怎么写大家应该都熟门熟路了，阿杰就不赘述了。 如果需要使用以下信息，可以按照下面的方式使用（以下内容不限首页使用） 文章数统计&#x2F;字数统计加入含有 class=&quot;article_number&quot;的html标签可显示文章数量。加入含有 class=&quot;site_word_count&quot;的html标签可显示站点总字数。 &lt;!-- 我这里是借用了code的样式，所以直接使用code标签。 自定义样式，可加入style属性设置--&gt; &lt;code class=&quot;article_number&quot;&gt;&lt;/code&gt; &lt;code class=&quot;site_word_count&quot;&gt;&lt;/code&gt; 上面代码的效果：文章：篇；总字数：字； 流量统计 日志： 2017-03-18改动，由原来的 id 改为现在的 class，可在页面添加多个同类标签 加入含有 class=&quot;site_uv&quot;的html标签可显示站点访问人次。加入含有 class=&quot;site_pv&quot;的html标签可显示站点访问量。 &lt;!-- 我这里是借用了code的样式，所以直接使用code标签。 自定义样式，可加入style属性设置--&gt; &lt;code class=&quot;site_uv&quot;&gt;&lt;/code&gt; &lt;code class=&quot;site_pv&quot;&gt;&lt;/code&gt; 上面代码的效果：访问人数：人，访问量：次。","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"3-hexo","slug":"3-hexo","permalink":"https://ysluckly.github.io/tags/3-hexo/"}]},{"title":"不蒜子适配pjax","slug":"front-end/不蒜子适配pjax","date":"2017-03-09T12:15:51.000Z","updated":"2022-02-19T09:27:58.503Z","comments":true,"path":"2017/03/09/busuanzi-pjax/","link":"","permalink":"https://ysluckly.github.io/2017/03/09/busuanzi-pjax/","excerpt":"","text":"不蒜子一般配置加入脚本 &lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt; &lt;!--pv方式 --&gt; &lt;span id=&quot;busuanzi_container_site_pv&quot;&gt; 本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次 &lt;/span&gt; &lt;!--uv方式 --&gt; &lt;span id=&quot;busuanzi_container_site_uv&quot;&gt; 本站访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次 &lt;/span&gt; &lt;!--pv方式 --&gt; &lt;span id=&quot;busuanzi_container_page_pv&quot;&gt; 本文总阅读量&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次 &lt;/span&gt; 只安装脚本，不安装标签代码，即可实现只记数，不显示。 适配pjax最近开发3-hexo主题，由于主题使用的pjax，异步加载页面时不蒜子会出现加载不到多说js的问题。在pjax：end加载下面js代替标签即可 $.getScript(&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;);","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://ysluckly.github.io/tags/jQuery/"},{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"}]},{"title":"多说适配pjax","slug":"front-end/多说适配pjax","date":"2017-03-09T11:50:45.000Z","updated":"2022-02-19T09:27:58.504Z","comments":true,"path":"2017/03/09/duoshuo-pjax/","link":"","permalink":"https://ysluckly.github.io/2017/03/09/duoshuo-pjax/","excerpt":"","text":"最近开发3-hexo主题，由于主题使用的pjax，异步加载页面时多说会出现加载不到多说js的问题。 多说加载代码如下： //加载多说 function loadComment() &#123; duoshuoQuery = &#123;short_name: $(&quot;.theme_duoshuo_domain&quot;).val()&#125;; var d = document, s = d.createElement(&#39;script&#39;); s.src = &#39;https://static.duoshuo.com/embed.js?t=&#39;+new Date().getTime(); s.async = true; s.charset = &#39;UTF-8&#39;; (d.head || d.body).appendChild(s); &#125; 当局部加载页面时，就会无法加载多说。需要编写一个js方法，参考文档：(http://dev.duoshuo.com/docs/50b344447f32d30066000147) /** * pjax后需要回调函数.加载多说 */ function pajx_loadDuodsuo()&#123; if(typeof duoshuoQuery ==&quot;undefined&quot;)&#123; loadComment(); &#125; else &#123; var dus=$(&quot;.ds-thread&quot;); if($(dus).length==1)&#123; var el = document.createElement(&#39;div&#39;); el.setAttribute(&#39;data-thread-key&#39;,$(dus).attr(&quot;data-thread-key&quot;));//必选参数 el.setAttribute(&#39;data-url&#39;,$(dus).attr(&quot;data-url&quot;)); DUOSHUO.EmbedThread(el); $(dus).html(el); &#125; &#125; &#125; 在pjax:end中调用此方法即可。","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://ysluckly.github.io/tags/jQuery/"},{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"}]},{"title":"Hexo加入字数统计WordCount","slug":"tools/hexo-wordcount","date":"2017-03-09T08:57:10.000Z","updated":"2022-02-19T09:27:58.566Z","comments":true,"path":"2017/03/09/hexo-wordcount/","link":"","permalink":"https://ysluckly.github.io/2017/03/09/hexo-wordcount/","excerpt":"","text":"只需要安装一个插件 WordCount 安装$ npm i hexo-wordcount --save 使用单篇文章字数 &lt;%=wordcount(post.content) %&gt; 所有文章的总字数 &lt;%=totalcount(site) %&gt; 日志2017年3月9日，给3-hexo添加字数统计功能","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"}]},{"title":"前端页面开发规范","slug":"front-end/font-develop-rule","date":"2017-03-08T00:58:21.000Z","updated":"2022-02-19T09:27:58.497Z","comments":true,"path":"2017/03/08/font-develop-rule/","link":"","permalink":"https://ysluckly.github.io/2017/03/08/font-develop-rule/","excerpt":"","text":"一、前言随着开发人员的不断增加，在没有规范的情况下，就会导致开发的页面不统一，不像是一个系统。为了解决这个问题，就有了此规范的出现，当然为了不影响各个功能的灵活性，此规范要求不高， 请耐心阅读，并应用到日常开发中。 当然，如果你有更好的建议，可以通过邮件联系 &#x79;&#x61;&#110;&#103;&#121;&#x6a;&#x31;&#51;&#x40;&#108;&#101;&#x6e;&#x6f;&#x76;&#x6f;&#x2e;&#x63;&#x6f;&#109;，进行沟通来完善此篇规范。 二、编程规范2.1 命名规范2.1.1 文件命名全部采用小写方式，以横杠分割。 正例: resource.vue、user-info.vue 反例: basic_data.vue、EventLog.vue 2.1.2 目录命名全部采用小写方式，以横杠分割。 正例: system、ship-support 反例: errorPage、Components 2.1.3 JS、CSS、SCSS、HTML、PNG文件命名全部采用小写方式，以横杠分割。 正例: btn.scss、element-ui.scss、lenovo-logo.png 反例: leftSearch.scss、LeGrid.js 2.1.4 命名规范性代码中命名严禁使用拼音和英文混合的方式，更不允许直接使用中文的方式。说明: 正确的英文拼写和语法可以让阅读者易于理解，避免歧义。注意，即使纯拼音的命名方式也要避免采用。 正例: loading、searchForm、tableHeight、dmsLoading、rmb 专有名词缩写，视同英文反例: getLiaoPanName、DMSLoading 2.2 插件使用2.2.1 eslint 代码规范注意：前端的代码格式化已经在 eslint 中声明了，所以确保自己已经启用了 eslint，并使 eslint 进行代码格式化。 2.2.2 i18n 国际化所有展示的内容都要支持国际化。国际化内容写到 /src/lang/ 下的对应模块，通过 this.$t(&#39;xx.xx.xx&#39;) 来使用。 英文国际化的列或标签，请使用开头字母大写的方式，如: UserId、Status、UserName。 2.3 组件使用2.3.1 table 表格表格组件推荐使用 vxe-table，功能更加全面，之后也会主力优化此表格。比如可编辑表格的样式经过优化：可编辑表格 2.3.2 dialog 弹窗弹窗组件推荐使用 vxe-modal，代码设计更加合理，功能也更加全面。 2.3.2 element-ui除 table 和 modal 外，其他组件比如 form、button、DateTimePicker 优先使用 element-ui 。 2.3.2.1 icon 图标图标优先使用 element-ui 的图标。如果没有合适的，可以在 iconfont 上寻找到合适的图标后，找 &#121;&#97;&#x6e;&#103;&#x79;&#106;&#49;&#51;&#64;&#108;&#101;&#x6e;&#111;&#x76;&#111;&#46;&#x63;&#x6f;&#109; 进行添加。 2.3.2.2 button 按钮按钮大小：除了在表格中的按钮要使用 size=&quot;mini&quot; 外，其他情况使用默认大小即可。 按钮颜色：普通的 查询&#x2F;修改&#x2F;操作 等按钮使用蓝色 type=&quot;primary&quot;，新增使用绿色 type=&quot;success&quot;，删除等“危险”操作使用红色 type=&quot;danger&quot;。推荐给按钮添加图标，可在 element-ui-icon 寻找合适的图标。 2.3.3 其他组件如果上述组件并不能满足业务需求，可以优先在网上找到合适的组件后，与 &#121;&#x61;&#x6e;&#103;&#x79;&#x6a;&#x31;&#x33;&#x40;&#x6c;&#101;&#110;&#111;&#x6f;&#x76;&#x2e;&#x63;&#x6f;&#109; 联系后添加。 2.4 页面布局2.4.1 新增&#x2F;修改表单普通的表单，采用中间对其的方案，也就是整个表单的 label-width 设置为一样的。 注意：一般的，新增修改使用弹窗的方式，展示表单。新增&#x2F;修改可以共用代码，具体可以参考 common/system/va-config.vue &lt;el-form ref=&quot;dialogForm&quot; v-loading=&quot;edit.loading&quot; :model=&quot;edit.form&quot; :rules=&quot;edit.formRules&quot; label-width=&quot;150px&quot; style=&quot;padding-right: 30px;&quot; &gt; ... &lt;/el-form&gt; 2.4.2 查询表单+表格这种应该是最长间的需求方案了，可以参考 /common/system/user.vue，在写的时候注意以下几点： label-width 不要设置，保证标签文字开头和表格对齐。 el-form 使用 :inline=&quot;true&quot; 设置表单内容行内显示。 设置 vxe-table 的 height 属性，保证表格底部贴住网页底部，又不会有滚动条（表格内允许有滚动条） 按钮也放到表单中，不要单独一行。 最终效果如下：","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"translation","slug":"translation","permalink":"https://ysluckly.github.io/tags/translation/"}]},{"title":"[译]理解浏览器关键渲染路径","slug":"front-end/理解浏览器关键渲染路径-译","date":"2017-03-08T00:58:21.000Z","updated":"2022-02-19T09:27:58.505Z","comments":true,"path":"2017/03/08/understanding-the-critical-rendering-path/","link":"","permalink":"https://ysluckly.github.io/2017/03/08/understanding-the-critical-rendering-path/","excerpt":"","text":"当一个浏览器接收到从服务器发来的html页面，在渲染并呈现到屏幕上之前，有很多步骤要做。浏览器渲染页面需要做的一系列行为被称作“关键渲染路径（Critical Rendering Path 简称CRP）”。 CRP 的知识对于如何提升网站性能是相当有用的。CRP有6个步骤： 构建DOM树 构建CSSOM树 运行JavaScript 创建渲染树 生成布局 绘制页面 构建DOM树DOM（Document Object Model）树是一个表示整个解析过的HTML页面的对象，从根节点&lt;html&gt;开始，会创建页面中的每个 元素&#x2F;文本 节点。嵌套在其他元素中的元素作为字节点，每个节点都包含了其所有的元素属性，例如： 一个&lt;a&gt;节点将有 href 属性与其关联。 举个例子 &lt;html&gt; &lt;head&gt; &lt;title&gt;Understanding the Critical Rendering Path&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;header&gt; &lt;h1&gt;Understanding the Critical Rendering Path&lt;/h1&gt; &lt;/header&gt; &lt;main&gt; &lt;h2&gt;Introduction&lt;/h2&gt; &lt;p&gt;Lorem ipsum dolor sit amet&lt;/p&gt; &lt;/main&gt; &lt;footer&gt; &lt;small&gt;Copyright 2017&lt;/small&gt; &lt;/footer&gt; &lt;/body&gt; &lt;/html&gt; 上面的 HTML 将会被解析成下面的DOM树HTML的优点在于它不必等待整个页面加载完成才呈现页面，可以解析一部分，显示一部分。但是像CSS、JavaScript等其他资源会阻止页面渲染。 构建CSSOM树CSSOM（CSS Object Model） 是一个跟DOM相关的样式对象。它跟DOM的表示方法是相似的，但是不论显式声明还是隐式继承，每个节点都存在关联样式。 In the style.css file from the document mentioned above, we have the folowing styles在上面提到的html页面的style.css中的样式如下 body &#123; font-size: 18px; &#125; header &#123; color: plum; &#125; h1 &#123; font-size: 28px; &#125; main &#123; color: firebrick; &#125; h2 &#123; font-size: 20px; &#125; footer &#123; display: none; &#125; 它会被构建成下面的CSSOM树CSS 被认为是 “渲染阻塞资源”，它意味着如果不首先完全解析资源，渲染树是无法构建的。CSS由于它的层叠继承的性质，不能像HTML一样解析一部分，显示一部分。定义在文档后面的样式会覆盖或改写之前定义的样式，因为在整个样式表都被解析之前，如果我们使用了在样式表中较早定义的样式，那错误的样式将被应用。这意味着CSS必须被全部解析之后，才能开始下一步。 如果CSS文件适用于当前设备的话，仅仅只是会阻塞渲染。&lt;link rel=&quot;stylesheet&quot;&gt;标签可以使用media属性，用来指定特定样式宽度的特定媒体查询。 举个例子，如果我们有一个包含媒体属性orientation:landscape的样式，我们使用纵向模式（portrait mode）查看页面，这个资源将不会阻塞渲染。 CSS 也会导致脚本阻塞。这是因为JavaScript文件必须等待CSSOM被构建后才能运行。 运行JavaScriptJavaScript被认为是解析阻塞资源，这意味着HTML的解析会被JavaScript阻塞。 当解析器解析到 &lt;script&gt; 标签时，无论该资源是内部还是外链的都会停止解析，先去下载资源。这也是为什么，当页面内有引用JavaScript文件时，引用标签要放到可视元素之后了。 为避免JavaScript解析阻塞，它可以通过设定 async 属性来要求其异步加载。 &lt;script async src=&quot;script.js&quot;&gt; 创建渲染树渲染树是DOM和CSSOM的结合体，它代表最终会渲染在页面上的元素的结构对象。这意味着它只关注可见内容，对于被隐藏或者CSS属性 display:none 的属性，不会被包含在结构内。 使用上面例子的DOM和CSSOM，渲染树被创建如下： 生成布局布局决定了浏览器视窗的大小,它提供了上下文依赖的CSS样式，如百分比或窗口的单位。视窗尺寸通常通过 &lt;head&gt; 标签中的 &lt;meta&gt; 中的 viewport 设定来决定。如果不存在该标签，则通常默认为 980px 例如，最常用的 meta veiwport 的值将会被设置为和设备宽度相符： &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt; 如果用户访问网页的设备宽度为1000px。然后整体视窗尺寸就会基于这个宽度值了，比如 50% 就是500px, 10vw 就是100px 等等。 绘制页面最后，在绘制页面步骤。页面上的所有可见内容都会被转换为像素并呈现在屏幕上。 具体的绘制时间跟DOM数以及应用的样式有关。有些样式会花费更多的执行时间，比如复杂的渐变背景图片所需要的计算时间远超过简单固定背景色。 整合所有想要看到关键渲染路径的执行流程，可以使用DevTools，在Chrome中，它是根据时间轴展示的。 举个例子, 上面的页面加入&lt;script&gt;标签 &lt;html&gt; &lt;head&gt; &lt;title&gt;Understanding the Critical Rendering Path&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;header&gt; &lt;h1&gt;Understanding the Critical Rendering Path&lt;/h1&gt; &lt;/header&gt; &lt;main&gt; &lt;h2&gt;Introduction&lt;/h2&gt; &lt;p&gt;Lorem ipsum dolor sit amet&lt;/p&gt; &lt;/main&gt; &lt;footer&gt; &lt;small&gt;Copyright 2017&lt;/small&gt; &lt;/footer&gt; &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 可以看关于页面加载时的事件日志，以下是我们获得的： Send Request - 发送到index.html的GET请求 Parse HTML and Send Request - 开始解析HTML并构建DOM，然后发送 GET 请求style.css和main.js Parse Stylesheet - 根据 style.css 创建的CSSOM Evaluate Script - 执行 main.js Layout - 基于HTML的元视窗标签，生成布局 Paint - 绘制网页基于这些信息，我们可以知道如何优化关键渲染路径。 原文： Understanding the Critical Rendering Path","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"translation","slug":"translation","permalink":"https://ysluckly.github.io/tags/translation/"}]},{"title":"Hexo主题3-hexo","slug":"tools/3-hexo","date":"2017-03-07T03:15:50.000Z","updated":"2022-02-19T09:27:58.546Z","comments":true,"path":"2017/03/07/3-hexo/","link":"","permalink":"https://ysluckly.github.io/2017/03/07/3-hexo/","excerpt":"","text":"阮一峰曾言：喜欢写blog的人，会经历三个阶段 第一阶段，刚接触Blog，觉得很新鲜，试着选择一个免费空间来写。第二阶段，发现免费空间限制太多，就自己购买域名和空间，搭建独立博客。第三阶段，觉得独立博客的管理太麻烦，最好在保留控制权的前提下，让别人来管，自己只负责写文章。 有对搭建个人blog有兴趣的朋友，可以翻看我往期文章。 笔者从去年开始通过hexo写blog，使用了yilia主题，但是随着文章数量的上升，检索等操作就显得特别笨重。 在遍寻无果的情况下，就写下了3-hexo主题。Demo:http://yelog.org 多图预警 ↓↓↓ 设计思路整体设计三段式设计: 通过分类过滤 通过标题关键字搜索 通过作者搜索若开启了多作者模式，则可以通过输入@，进行作者搜索，如下所示 通过标签搜索输入#，就会出现标签提示 评论功能 打赏功能 文章置顶 返回头部 使用1.安装$ git clone https://github.com/yelog/hexo-theme-3-hexo.git themes/3-hexo 2.配置1） 修改hexo根目录的_config.yml的两处，如下 theme: 3-hexo highlight: enable: false #关闭hexo渲染高亮，使用主题代码块高亮 2） 在hexo 根目录source下添加avatar.jpg文件，作为头像 安装字数统计(由于主题使用这个插件，必须安装，否则会报错)$ $ npm i --save hexo-wordcount 注意： 如果没有安装会在 hexo g 的时候报错 3.更新$ cd themes/3-hexo $ git pull","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"3-hexo","slug":"3-hexo","permalink":"https://ysluckly.github.io/tags/3-hexo/"}]},{"title":"Vim命令速查表","slug":"linux/Vim命令速查表","date":"2017-03-06T03:23:36.000Z","updated":"2022-02-19T09:27:58.512Z","comments":true,"path":"2017/03/06/Vim-command/","link":"","permalink":"https://ysluckly.github.io/2017/03/06/Vim-command/","excerpt":"","text":"去年上半年开始全面使用linux进行开发和娱乐了，现在已经回不去windows了。 话归正传，在linux上一直使用vim，慢慢熟悉了它的命令，才终于领悟了什么是编辑器之神。 最近抽空整理了这份速查表，收获颇丰，并分享给大家。 进入vim 命令 描述 vim filename 打开或新建文件,并将光标置于第一行首 vim +n filename 打开文件，并将光标置于第n行首 vim + filename 打开文件，并将光标置于最后一行首 vim +&#x2F;pattern filename 打开文件，并将光标置于第一个与pattern匹配的串处 vim -r filename 在上次正用vim编辑时发生系统崩溃，恢复filename vim filename….filename 打开多个文件，依次编辑 vim配置 命令 描述 all 列出所有选项设置情况 term 设置终端类型 ignorance 在搜索中忽略大小写 list 显示制表位(Ctrl+I)和行尾标志（$) number 显示行号 report 显示由面向行的命令修改过的数目 terse 显示简短的警告信息 warn 在转到别的文件时若没保存当前文件则显示NO write信息 nomagic 允许在搜索模式中，使用前面不带“\\”的特殊字符 nowrapscan 禁止vi在搜索到达文件两端时，又从另一端开始 mesg 允许vi显示其他用户用write写到自己终端上的信息 :set number &#x2F; set nonumber 显示&#x2F;不显示行号 :set ruler &#x2F;set noruler 显示&#x2F;不显示标尺 :set hlsearch 高亮显示查找到的单词 :set nohlsearch 关闭高亮显示 :syntax on 语法高亮 :set nu 显示行号 :set ignorecase 搜索时忽略大小写 :set smartcase 搜索时匹配大小写 :set ruler 显示光标位置坐标 :set hlsearch 搜索匹配全高亮 :set tabstop&#x3D;8 设置tab大小,8为最常用最普遍的设置 :set softtabstop&#x3D;8 4:4个空格,8:正常的制表符,12:一个制表符4个空格,16:两个制表符 :set autoindent 自动缩进 :set cindent C语言格式里面的自动缩进 移动光标 命令 描述 k nk 上 向上移动n行 j nj 下 向下移动n行 h nh 左 向左移动n行 l nl 右 向右移动n行 Space 光标右移一个字符 Backspace 光标左移一个字符 Enter 光标下移一行 w&#x2F;W 光标右移一个字至字首 b&#x2F;B 光标左移一个字至字首 e或E 光标右移一个字至字尾 ) 光标移至句尾 ( 光标移至句首 } 光标移至段落开头 { 光标移至段落结尾 n$ 光标移至第n行尾 H 光标移至屏幕顶行 M 光标移至屏幕中间行 L 光标移至屏幕最后行 0 （注意是数字零）光标移至当前行首 ^ 移动光标到行首第一个非空字符上去 $ 光标移至当前行尾 gg 移到第一行 G 移到最后一行 f 移动光标到当前行的字符a上 F 相反 % 移动到与制匹配的括号上去（），{}，[]，&lt;&gt;等 nG 移动到第n行上 G 到最后一行 屏幕滚动 命令 描述 Ctrl+e 向文件首翻一行 Ctrl+y 向文件尾翻一行 Ctrl+u 向文件首翻半屏 Ctrl+d 向文件尾翻半屏 Ctrl+f 向文件尾翻一屏 Ctrl+b 向文件首翻一屏 nz 将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部 插入文本类 命令 描述 i 在光标前 I 在当前行首 a 光标后 A 在当前行尾 o 在当前行之下新开一行 O 在当前行之上新开一行 r 替换当前字符 R 替换当前字符及其后的字符，直至按ESC键 s 从当前光标位置处开始，以输入的文本替代指定数目的字符 S 删除指定数目的行，并以所输入文本代替之 ncw&#x2F;nCW 修改指定数目的字 nCC 修改指定数目的行 删除命令 命令 描述 x&#x2F;X 删除一个字符，x删除光标后的，而X删除光标前的 dw 删除一个单词(删除光标位置到下一个单词开始的位置) dnw 删除n个单词 dne 也可，只是删除到单词尾 do 删至行首 d$ 删至行尾 dd 删除一行 ndd 删除当前行及其后n-1行 dnl 向右删除n个字母 dnh 向左删除n个字母 dnj 向下删除n行,当前行+其上n行 dnk 向上删除n行,当期行+其下n行 cnw[word] 将n个word改变为word C$ 改变到行尾 cc 改变整行 shift+j 删除行尾的换行符，下一行接上来了 复制粘贴 命令 描述 p 粘贴用x或d删除的文本 ynw 复制n个单词 yy 复制一行 ynl 复制n个字符 y$ 复制当前光标至行尾处 nyy 拷贝n行 撤销 命令 描述 u 撤销前一次的操作 shif+u(U) 撤销对该行的所有操作 搜索及替换 命令 描述 &#x2F;pattern 从光标开始处向文件尾搜索pattern ?pattern 从光标开始处向文件首搜索pattern n 在同一方向重复上一次搜索命令 N 在反方向上重复上一次搜索命令 cw newword 替换为newword n 继续查找 . 执行替换 :s&#x2F;p1&#x2F;p2&#x2F;g 将当前行中所有p1均用p2替代,g表示执行 用c表示需要确认 :n1,n2 s&#x2F;p1&#x2F;p2&#x2F;g 将第n1至n2行中所有p1均用p2替代 :g&#x2F;p1&#x2F;s&#x2F;&#x2F;p2&#x2F;g 将文件中所有p1均用p2替换 :1,$ s&#x2F;string1&#x2F;string2&#x2F;g 在全文中将string1替换为string2 书签 命令 描述 m[a-z] 在文中做标记，标记号可为a-z的26个字母 &#96;a 移动到标记a处 visual模式 命令 描述 v 进入visual 模式 V 进入行的visual 模式 ctrl+v 进如块操作模式用o和O改变选择的边的大小 在所有行插入相同的内容如include&lt; 将光标移到开始插入的位置，按CTRL+V进入VISUAL模式，选择好模块后按I（shift+i)，后插入要插入的文本，按[ESC]完成 行方式命令 命令 描述 :n1,n2 co n3 将n1行到n2行之间的内容拷贝到第n3行下 :n1,n2 m n3 将n1行到n2行之间的内容移至到第n3行下 :n1,n2 d 将n1行到n2行之间的内容删除 :n1,n2 w!command 将文件中n1行至n2行的内容作为command的输入并执行之若不指定n1，n2，则表示将整个文件内容作为command的输入 宏 命令 描述 q[a-z] 开始记录但前开始的操作为宏，名称可为【a-z】，然后用q终止录制宏 reg 显示当前定义的所有的宏，用@[a-z]来在当前光标处执行宏[a-z] 窗口操作 命令 描述 :split 分割一个窗口 :split file.c 为另一个文件file.c分隔窗口 :nsplit file.c 为另一个文件file.c分隔窗口，并指定其行数 ctrl＋w 在窗口中切换 :close 关闭当前窗口 文件及其他 命令 描述 :q 退出vi :q! 不保存文件并退出vi :e filename 打开文件filename进行编辑 :e! 放弃修改文件内容，重新载入该文件编辑 :w 保存当前文件 :wq 存盘退出 :ZZ 保存当前文档并退出VIM :!command 执行shell命令command :r!command 将命令command的输出结果放到当前行 :n1,n2 write temp.c :read file.c 将文件file.c的内容插入到当前光标所在的下面","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"vim","slug":"vim","permalink":"https://ysluckly.github.io/tags/vim/"}]},{"title":"如何在linux中搭建ftp服务","slug":"linux/如何在linux中搭建ftp服务","date":"2017-03-06T00:47:48.000Z","updated":"2022-02-19T09:27:58.524Z","comments":true,"path":"2017/03/06/linux-ftp/","link":"","permalink":"https://ysluckly.github.io/2017/03/06/linux-ftp/","excerpt":"","text":"什么是 FTPFTP 是文件传输协议File Transfer Protocol的缩写。顾名思义，FTP用于计算机之间通过网络进行文件传输。你可以通过FTP在计算机账户间进行文件传输，也可以在账户和桌面计算机之间传输文件，或者访问在线软件归档。但是，需要注意的是多数的FTP站点的使用率非常高，可能需要多次重连才能连接上。 FTP地址和HTTP地址（即网页地址）非常相似，只是FTP地址使用 ftp://前缀而不是http:// FTP 服务器是什么通常，拥有FTP地址的计算机是专用于接收FTP连接请求的。一台专用于接收FTP连接请求的计算机即为FTP服务器或者FTP站点。 现在，我们来开始一个特别的冒险，我们将会搭建一个FTP服务用于和家人、朋友进行文件共享。在本教程，我们将以vsftpd作为ftp服务。 VSFTPD是一个自称为最安全的FTP服务端软件。事实上VSFTPD的前两个字母表示“非常安全的very secure”。该软件的构建绕开了FTP协议的漏洞。 尽管如此，你应该知道还有更安全的方法进行文件管理和传输，如：SFTP（使用OpenSSH）。FTP协议对于共享非敏感数据是非常有用和可靠的。 安装 VSFTP#使用 rpm 安装 $ dnf -y install vsftpd #使用 deb 安装 $ sudo apt-get install vsftpd #在 Arch 中安装 $ sudo pacman -S vsftpd 配置 FTP 服务多数的VSFTPD配置项都在&#x2F;etc&#x2F;vsftpd.conf配置文件中。这个文件本身已经有非常良好的文档说明了，因此，在本节中，我只强调一些你可能进行修改的重要选项。使用man页面查看所有可用的选项和基本的 文档说明： $ man vsftpd.conf 根据文件系统层级标准，FTP共享文件默认位于&#x2F;srv&#x2F;ftp目录中。允许上传：为了允许ftp用户可以修改文件系统的内容，如上传文件等，“write_enable”标志必须设置为 YES write_enable=YES 允许本地（系统）用户登录：为了允许文件&#x2F;etc&#x2F;passwd中记录的用户可以登录ftp服务，“local_enable”标记必须设置为YES。 local_enable=YES 匿名用户登录下面配置内容控制匿名用户是否允许登录： # 允许匿名用户登录 anonymous_enable=YES # 匿名登录不需要密码（可选） no_anon_password=YES # 匿名登录的最大传输速率，Bytes/second（可选） anon_max_rate=30000 # 匿名登录的目录（可选） anon_root=/example/directory/ 根目录限制（Chroot Jail）（ LCTT 译注：chroot jail是类unix系统中的一种安全机制，用于修改进程运行的根目录环境，限制该线程不能感知到其根目录树以外的其他目录结构和文件的存在。详情参看chroot jail） 有时我们需要设置根目录（chroot）环境来禁止用户离开他们的家（home）目录。在配置文件中增加&#x2F;修改下面配置开启根目录限制（Chroot Jail）: chroot_list_enable=YES chroot_list_file=/etc/vsftpd.chroot_list “chroot_list_file”变量指定根目录限制所包含的文件&#x2F;目录（ LCTT 译注：即用户只能访问这些文件&#x2F;目录） 最后你必须重启ftp服务，在命令行中输入以下命令： $ sudo systemctl restart vsftpd 到此为止，你的ftp服务已经搭建完成并且启动了。","categories":[{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"}],"tags":[{"name":"ftp","slug":"ftp","permalink":"https://ysluckly.github.io/tags/ftp/"}]},{"title":"AngularJs快速入门","slug":"front-end/AngularJs快速入门","date":"2017-03-04T00:40:58.000Z","updated":"2022-02-19T09:27:58.494Z","comments":true,"path":"2017/03/04/AngularJs/","link":"","permalink":"https://ysluckly.github.io/2017/03/04/AngularJs/","excerpt":"","text":"简介 AngularJS是一个JavaScript框架，为了克服HTML在构建应用上的不足而设计的。 AngularJS通过使用我们称为标识符(directives)的结构，让浏览器能够识别新的语法。 AngularJS 使得开发现代的单一页面应用程序（SPAs：Single Page Applications）变得更加容易。 表达式AngularJS 使用 表达式 把数据绑定到 HTML。 表达式AngularJS 表达式写在双大括号内：{{ expression }} 。AngularJS 表达式把数据绑定到 HTML，这与 ng-bind 指令有异曲同工之妙。AngularJS 将在表达式书写的位置”输出”数据。AngularJS 表达式 很像 JavaScript 表达式：它们可以包含文字、运算符和变量。实例： {{ 5 + 5 }} 或 {{ firstName + \" \" + lastName }} &lt;div ng-app=&quot;&quot;&gt; &lt;p&gt;我的第一个表达式: &#123;&#123; 5 + 5 &#125;&#125;&lt;/p&gt; &lt;/div&gt; 效果 数字&lt;div ng-app=&quot;&quot; ng-init=&quot;quantity=1;cost=5&quot;&gt; &lt;p&gt;总价： &#123;&#123; quantity * cost &#125;&#125;&lt;/p&gt; &lt;/div&gt;","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"AngularJs","slug":"AngularJs","permalink":"https://ysluckly.github.io/tags/AngularJs/"}]},{"title":"3-hexo多作者模式","slug":"tools/3-hexo-multiple-author","date":"2017-02-28T02:55:31.000Z","updated":"2022-02-19T09:27:58.543Z","comments":true,"path":"2017/02/28/3-hexo-multiple-author/","link":"","permalink":"https://ysluckly.github.io/2017/02/28/3-hexo-multiple-author/","excerpt":"","text":"尽管hexo是为个人blog而生的工具，但是有时也可能会有多作者需求，比如他人投稿等等，为此笔者在写3-hexo主题时,顺便添加了此功能 。 1.修改配置文件修改 3-hexo/_config.yml，开启多作者模式，并添加blog中出现的作者，为搜索提供数据 author: on: true #true：开启多作者模式 authors: author1: yelog #添加两个作者yelog、小马哥 author2: 小马哥 2.修改文章头部信息添加 author: yelog ，表示这篇文章的作者为yelog --- title: reading-list date: 2017-01-31 15:29:32 author: yelog top: 2 categories: - 读书 tags: - reading --- 效果： 搜索某个作者的所有文章在搜索栏中输入@小马哥就可以显示出所有小马哥的文章。如果你在_config.xml中配置了作者名，就可以出现提示,具体看第一部分效果如下：","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"3-hexo","slug":"3-hexo","permalink":"https://ysluckly.github.io/tags/3-hexo/"}]},{"title":"Hexo创建404页面","slug":"tools/hexo-create-404-page","date":"2017-02-25T07:18:39.000Z","updated":"2022-02-19T09:27:58.560Z","comments":true,"path":"2017/02/25/hexo-create-404-page/","link":"","permalink":"https://ysluckly.github.io/2017/02/25/hexo-create-404-page/","excerpt":"","text":"对于github page来说，只要在根目录又404.html，当页面找不到时，就会被转发到&#x2F;404.html页面，所以我们只要更改这个页面，就可以实现自定义404页面了。 但是我们通常会需要与本主题相符的404页面。那我们就需要以下操作 新建404页面 进入 Hexo 所在文件夹，输入 hexo new page 404 ; 打开刚新建的页面文件，默认在 Hexo 文件夹根目录下 &#x2F;source&#x2F;404&#x2F;index.md； 在顶部插入一行，写上 enlink: /404，这表示指定该页固定链接为 http://&quot;主页&quot;/404.html --- title: 404 enlink: /404 date: 2016-09-27 11:31:01 --- --- ## 页面未找到！ 效果 http://yelog.org/举个404例子","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"}]},{"title":"Hexo置顶及排序问题","slug":"tools/hexo-top-sort","date":"2017-02-24T07:50:38.000Z","updated":"2022-02-19T09:27:58.565Z","comments":true,"path":"2017/02/24/hexo-top-sort/","link":"","permalink":"https://ysluckly.github.io/2017/02/24/hexo-top-sort/","excerpt":"","text":"近期在写3-hexo主题时，发现文章（site.posts）排序按照.md文件的创建时间排序，而没有按照文章中的date排序。 这就导致了一个问题，我重装了一次电脑，.md文件通过git备份了，还原回来的时候，md的创建时间都是一样的，所以文章列表就按照文章标题排序了 随后就想起了以前使用yilia主题时，设置过置顶文章。所以做了排序，顺便做了置顶的功能。 @牵猪的松鼠根据这篇文章写了一个npm插件 hexo-generator-topindex安装插件命令： npm install hexo-generator-topindex --save如果安装插件，可跳过第一部分 #修改hexo的js代码，直接看第二部分 #设置置顶 修改hexo的js代码直接上操作，修改node_modules/hexo-generator-index/lib/generator.js &#39;use strict&#39;; var pagination = require(&#39;hexo-pagination&#39;); module.exports = function(locals)&#123; var config = this.config; var posts = locals.posts; posts.data = posts.data.sort(function(a, b) &#123; if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义 if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排 else return b.top - a.top; // 否则按照top值降序排 &#125; else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233） return -1; &#125; else if(!a.top &amp;&amp; b.top) &#123; return 1; &#125; else return b.date - a.date; // 都没定义按照文章日期降序排 &#125;); var paginationDir = config.pagination_dir || &#39;page&#39;; return pagination(&#39;&#39;, posts, &#123; perPage: config.index_generator.per_page, layout: [&#39;index&#39;, &#39;archive&#39;], format: paginationDir + &#39;/%d/&#39;, data: &#123; __index: true &#125; &#125;); &#125;; 设置置顶给需要置顶的文章加入top参数，如下 --- title: 每天一个linux命令 date: 2017-01-23 11:41:48 top: 1 categories: - 运维 tags: - linux命令 --- 如果存在多个置顶文章，top后的参数越大，越靠前。 2020-05-20 更新3-hexo 主题已经内置排序算法，无需上面下载插件或修改源码，可以直接使用，具体可看 3-hexo使用说明 中的排序相关内容 References Netcan 的 解决Hexo置顶问题","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"}]},{"title":"[译]Java内存泄露介绍","slug":"back-end/Java内存泄露介绍","date":"2017-02-21T07:05:39.000Z","updated":"2022-02-19T09:27:58.479Z","comments":true,"path":"2017/02/21/the-introduction-of-memory-leak-what-why-and-how/","link":"","permalink":"https://ysluckly.github.io/2017/02/21/the-introduction-of-memory-leak-what-why-and-how/","excerpt":"","text":"内存管理是Java最大的优势之一；你可以很简单的创建一个对象，内存的分配和释放则交给Java垃圾收集器处理；然而实际情况并非如此简单，因为在Java应用程序中会频繁的发生内存泄露。 这个教程将会说明内存泄露是什么？它为什么会发生？我们如何防止它？ 内存泄露是什么内存泄露的定义：对象不再被应用程序使用，但是由于它们还在被引用，垃圾收集器不能清除掉它们。 为了理解这个定义，我们需要理解对象在内存中的状态；下面的图表说明什么是未被使用和未被引用。 图表中，有被引用的对象和未被引用的对象；未被引用的对象将会被当做垃圾回收，而被引用的对象将不会被当做垃圾回收；未被引用的对象由于没有被其他对象引用，它当然也是不被使用的对象，然而，不被使用的对象不全是不被引用的，它们中的一些是被引用的！这就是内存泄露的来源。 内存泄露为什么会发生让我们来看一下下面这个例子，它说明了内存泄露为什么会发生。在下面这个列子中，对象A引用了对象B，A的生命周期（t1t4）是比B（t2t3）的长；当B不再被应用程序使用时，A仍然在引用它；在这种情况下，垃圾收集器不能从内存中移除B；如果A引用了很多类似B这样的对象，它们不能被回收，又消耗着内存空间的资源，这样很有可能造成内存不足的问题。 还有一种可能的事情，B又引用了一些对象，这些被B引用的对象也不能被回收，那所有这些不被使用的对象将消耗大量宝贵的内存空间。 如何防止内存泄露下面有一些防止内存泄露的快速实践技巧 注意集合类，如：HashMap、ArrayList等等，因为它们是在常见的地方发生内存泄露；当它们被static声明时，它们和应用程序的生命周期是一样长的。 注意事件监听和回调，当一个监听事件被注册，而这个类再也没有被使用时可能会发生内存泄露。 “如果一个类管理自己的内存，程序员应该被提醒内存泄漏了”，通常，一个对象的指向其他对象的成员变量需要被置为null。 References：[1] Program Creek :The Introduction of Java Memory Leaks","categories":[{"name":"后端","slug":"后端","permalink":"https://ysluckly.github.io/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"java","slug":"java","permalink":"https://ysluckly.github.io/tags/java/"},{"name":"translation","slug":"translation","permalink":"https://ysluckly.github.io/tags/translation/"}]},{"title":"pjax用法","slug":"front-end/pjax用法","date":"2017-02-08T12:18:54.000Z","updated":"2022-02-19T09:27:58.501Z","comments":true,"path":"2017/02/08/pjax/","link":"","permalink":"https://ysluckly.github.io/2017/02/08/pjax/","excerpt":"最近在开发一款hexo主题3-hexo，其中使用了pjax大大提高了用户体验和加载速度，在此简单介绍一下pjax的用法github链接","text":"最近在开发一款hexo主题3-hexo，其中使用了pjax大大提高了用户体验和加载速度，在此简单介绍一下pjax的用法github链接 pjax是什么 pjax是一款jQuery插件，使用了ajax和pushState的技术，在保留真正永久链接，网页标题和可用的返回功能的情况下，带来一种快速的浏览体验。 –官方介绍 用人话说，就是当跳转过去的网页和当前网页的一部分是一样的，这时可以通过pjax就会从响应页面中取出 不同的那部分 （需指定），替换掉原来的内容。 如果在服务端判断处理，直接返回 不同的那部分内容，这样就可以减少带宽占用，提升加载速度。 这样做的优势： 由于从服务器取回的数据量变少，加载速度将会提升。 并且采用异步刷新页面中的不一样的地方，用户体验也是满满的。 保留了浏览器回退的功能（解决了ajax的尴尬） 好了，开始操作。 Demo第一步：引入jQuery和jQuery.pjax &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/jquery.pjax/1.9.6/jquery.pjax.min.js&quot;&gt;&lt;/script&gt; 第二步：将指定的a的链接，转为pjax风格 /*将#menu中的a的链接的页面，只取回class=pjax元素中的内容，替换掉当前页面class=pjax元素中的内容*/ $(document).pjax(&#39;.#menu a&#39;, &#39;.pjax&#39;, &#123;fragment:&#39;.pjax&#39;, timeout:8000&#125;); 第三步：如果需要在请求的过程中做一些自定义的事件，可以使用下面的方法 $(document).on(&#123; &#39;pjax:click&#39;: function() &#123; //点击链接时，需要触发的事件写到这里 &#125;, &#39;pjax:start&#39;: function() &#123; //当开始获取请求时，需要触发的事件写在这里 &#125;, &#39;pjax:end&#39;: function() &#123; //当请求完成后，需要触发的事件写在这里 &#125; &#125;); 结束。 详细文档翻译于官方 参数$(document).pjax(selector, [container], options) selector 触发点击事件的选择器，String类型 container 一个选择器，为唯一的pjax容器 options 一个可以包含下面这些选项的对象 pjax options key default description timeout 650 ajax超时时间，单位毫秒，超时后将请求整个页面进行刷新 push true 使用 pushState 添加一个浏览器历史导航条目 replace false 替换URL，而不添加浏览器历史条目 maxCacheLength 20 历史内容 cache 的最大size version string ： 当前pjax版本 scrollTo 0 垂直位置滚动，为了避免改变滚动条位置 type “GET” 可以查看jQuery.ajax() dataType “html” 可以查看jQuery.ajax() container css选择器，此元素内容将被替换 url link.href string: ajax 请求的URL target link eventually the relatedTarget value for pjax events fragment 从ajax响应的页面中抽取的‘片段’ Events除了pjax:click和pjax:clicked外的所有pjax事件从pjax容器中触发，是不需要点击链接的。所有事件的生命周期在通过pjax请求链接的过程中 event cancel arguments notes pjax:click ✔︎ options 在一个链接被激活（点击）时触发此事件，可以在此取消阻止pjax pjax:beforeSend ✔︎ xhr, options 可以设置 XHR 头 pjax:start xhr, options pjax:send xhr, options pjax:clicked options 当链接被点击，并且已经开始pjax请求后触发 pjax:beforeReplace contents, options 从服务器已经加载到HTML内容，在替换HTML内容之前触发 pjax:success data, status, xhr, options 从服务器已经加载到HTML内容，在替换HTML内容之后触发 pjax:timeout ✔︎ xhr, options 页面将会在options.timeout之后直接发起请求刷新页面，除非取消pjax pjax:error ✔︎ xhr, textStatus, error, options ajax 错误，将会请求刷新页面，除非取消pjax pjax:complete xhr, textStatus, options 不管结果是什么，在ajax后，都触发 pjax:end xhr, options 生命周期在浏览器返回或前进时触发 event cancel arguments notes pjax:popstate 事件方向(前进，后退)属性: “back”&#x2F;“forward” pjax:start null, options 替换内容前 pjax:beforeReplace contents, options 从cache中读取内容后，替换html前 pjax:end null, options 替换内容后","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://ysluckly.github.io/tags/jQuery/"}]},{"title":"reading-list","slug":"reading/reading-list","date":"2017-01-31T07:29:32.000Z","updated":"2022-02-19T09:27:58.531Z","comments":true,"path":"2017/01/31/reading-list/","link":"","permalink":"https://ysluckly.github.io/2017/01/31/reading-list/","excerpt":"下面是一些我读过的书","text":"下面是一些我读过的书 ★ ★ ★ ★ ☆ ☆ ☆ ：推荐指数，7星制。此乃余之私见，或显偏薄。 文学小说 《棋王 树王 孩子王》 by 阿城 2015年9月 ★ ★ ★ ★ ☆ ☆ ☆ 《达芬奇密码》 by 丹.布朗 2015年9月 ★ ★ ★ ★ ★ ★ ☆ 《追风筝的人》 by 卡勒德·胡赛尼 2016年6月 ★ ★ ★ ★ ★ ☆ ☆ 《霍乱时期的爱情》 by 加西亚·马尔克斯 2016年8月 ★ ★ ★ ★ ★ ☆ ☆ 《查令十字街84号》 by 海莲·汉芙 2016年9月 ★ ★ ★ ★ ☆ ☆ ☆ 《围城》 by 钱钟书 2017年1月 ★ ★ ★ ★ ★ ☆ ☆ 《一个陌生女人的来信》 by 茨威格 2017年1月 ★ ★ ★ ★ ★ ★ ☆ 《一颗心的沦亡》 by 茨威格 2017年1月 ★ ★ ★ ★ ☆ ☆ ☆ 《情感的迷茫》 by 茨威格 2017年1月 ★ ★ ★ ★ ★ ☆ ☆ 《一个女人一生中的二十四个小时》 by 茨威格 2017年1月 ★ ★ ★ ★ ☆ ☆ ☆ 《摆渡人》 by 克莱尔·麦克福尔 2019年3月28 ★ ☆ ☆ ☆ ☆ ☆ ☆ 《悟空传》 by 今何在 2016年8月 ★ ★ ★ ★ ★ ☆ ☆ 《岛上书店》 by 加·泽文 2019年4月 ★ ★ ★ ★ ☆ ☆ ☆ 《月亮与六便士》 by 毛姆 2019年4月 ★ ★ ★ ★ ★ ☆ ☆ 《活着》 by 余华 2019年5月★ ★ ★ ★ ★ ★ ☆ 旅行 《不去会死》 by 石田裕辅 2017年2月 ★ ★ ★ ☆ ☆ ☆ ☆ 历史 《秦迷·秦始皇的秘密》 by 李开元 2016年3月 ★ ★ ★ ★ ☆ ☆ ☆ 《鱼羊野史·第1卷》 by 高晓松 2016年9月 ★ ★ ★ ★ ★ ☆ ☆ 心理学 《天才在左，疯子在右》 by 高铭 2016年3月 ★ ★ ★ ★ ★ ★ ☆ 经济 《历代经济变革得失》 by 吴晓波 2017年2月 ★ ★ ★ ★ ★ ★ ☆ 科幻 《球状闪电》 by 刘慈欣 2016年3月 ★ ★ ★ ★ ☆ ☆ ☆ 《三体·“地球往事”三部曲之一》 by 刘慈欣 2016年4月 ★ ★ ★ ★ ★ ☆ ☆ 《流浪地球》 by 刘慈欣 2019年3月 ★ ★ ★ ★ ☆ ☆ ☆ 创业 《从零到一》 by 彼得·蒂尔 2015年6月 ★ ★ ★ ★ ☆ ☆ ☆ 《创业维艰》 by 本·霍洛维茨 2015年6月 ★ ★ ★ ★ ★ ☆ ☆ 《餐巾纸上的创业课》 by 神田昌典 2016年6月 ★ ★ ★ ★ ☆ ☆ ☆ 方法论 《如何高效学习》 by 斯科特·扬 2017年1月 ★ ★ ★ ★ ★ ☆ ☆ 《DISCover自我探索》 by 李海峰 2017年1月 ★ ★ ★ ★ ★ ★ ☆ 计算机 《淘宝技术这十年》 by 子柳 2015年6月 ★ ★ ★ ★ ★ ☆ ☆ 待读&#x2F;在读 《基督山伯爵》 by 大仲马","categories":[{"name":"读书","slug":"读书","permalink":"https://ysluckly.github.io/categories/%E8%AF%BB%E4%B9%A6/"},{"name":"书单","slug":"读书/书单","permalink":"https://ysluckly.github.io/categories/%E8%AF%BB%E4%B9%A6/%E4%B9%A6%E5%8D%95/"}],"tags":[{"name":"reading","slug":"reading","permalink":"https://ysluckly.github.io/tags/reading/"}]},{"title":"人生若只如初见-《围城》","slug":"reading/Fortress-Besieged","date":"2017-01-03T03:27:04.000Z","updated":"2022-02-19T09:27:58.529Z","comments":true,"path":"2017/01/03/Fortress-Besieged/","link":"","permalink":"https://ysluckly.github.io/2017/01/03/Fortress-Besieged/","excerpt":"婚姻是被围困的城堡，城外的人想冲进去，城里的人想逃出来 –法国谚语","text":"婚姻是被围困的城堡，城外的人想冲进去，城里的人想逃出来 –法国谚语 方鸿渐对于鲍小姐，不堪抵抗；对于苏小姐的垂青，已再纠缠不清（导致方唐感情破裂的导火索）；最后与孙柔嘉的婚姻，因属于现实的无奈吧；至于唐晓芙，方对她应该有着最纯粹的爱意。 整部小说给我留下深刻印象的就是唐小姐，她在整部小说的占比是非常少的。 总而言之，唐小姐是摩登文明社会里的那桩罕物――一个真正的女孩子。有许多都市女孩子已经是装模作样的早熟的女人，算不得孩子；有许多女孩子只是浑沌痴顽的无性别的孩子，还说不上女人。 唐晓芙的聪明漂亮、活泼可爱，令方鸿渐一见倾心。 当初，是苏小姐的干预，激起了唐晓芙的逆反心理，不让接近我偏接近，书信往来，见面谈话，时间推移，俩人都投入了真正的感情。 作为苏的姐妹，唐晓芙骨子里也有跟苏小姐的高傲。 方先生的过去太丰富了！我爱的人，我要能够占领他整个生命，他在碰见我以前，没有过去，留着空白等待我—— 方下定决心写信给苏撇清两人关系，苏的狭隘的心理从中挑拨导致方与唐之间的破裂 他象一个受了责骂的孩子那样，泪水在眼睛里打转，却一句话也说不出口。 所以当唐得知方的一些列斑斑劣迹后，愈心痛愈心恨，最后一次见方，连珠炮的发问，又恨方鸿渐为什么不辩护，她的心溶成了苦水。而方鸿渐的悲剧在于，他再次懦弱，该辩解时不辩解，该在屋外多淋雨时而过早走开，接到电话后，不问来人就大声呵斥，俩人都是好面子的人，看不到俩人为这段感情而去采取任何补救措施，而是各自松开了手。两人年轻，都不知退让，任彼此失之交臂。 从此直到最后，唐也没有再次出现。 但唐给我们的留下了一个近乎完美的形象，正是因为她没有和方走在一起，没有真实世俗的一面，才能留下那种只如初见的模样。 生活亦是如此，我们心目中的“女神”、“男神”，完美无缺的人，是那些我们曾经追求不得的人。想想若是得之，经过世俗的一面，ta的完美的形象，还会在你的心中站的稳吗。 唐晓芙这个角色是钱老钟爱的角色，是钱老心中完美的女性形象，简单说就是女神！是围城里任何男人都配不上的，所以不舍得把她许配给任何人。 --杨绛先生 《围城》写出了婚姻的一方面，但不是全部，很多人要冲进这座城，自有其道理，城中有争吵，但更有温情。愿诸位在现实生活中，相互欣赏，相敬如宾，如初见一样，相互爱戴，生活一定更加美好 在新春佳节祝大家幸福美满，阖家欢乐。","categories":[{"name":"读书","slug":"读书","permalink":"https://ysluckly.github.io/categories/%E8%AF%BB%E4%B9%A6/"},{"name":"阅读笔记","slug":"读书/阅读笔记","permalink":"https://ysluckly.github.io/categories/%E8%AF%BB%E4%B9%A6/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"reading","slug":"reading","permalink":"https://ysluckly.github.io/tags/reading/"}]},{"title":"Git之reset揭秘","slug":"tools/git-reset","date":"2016-12-24T03:19:24.000Z","updated":"2022-02-19T09:27:58.557Z","comments":true,"path":"2016/12/24/git-reset/","link":"","permalink":"https://ysluckly.github.io/2016/12/24/git-reset/","excerpt":"本文主要选自于《Pro Git》这本书，加上自己平时使用时的理解整理于此，以此给大家借鉴。本文主要讨论 reset 与 checkout。它们能做很多事情，所以我们要真正理解他们到底在底层做了哪些工作，以便能够恰当的运用它们。","text":"本文主要选自于《Pro Git》这本书，加上自己平时使用时的理解整理于此，以此给大家借鉴。本文主要讨论 reset 与 checkout。它们能做很多事情，所以我们要真正理解他们到底在底层做了哪些工作，以便能够恰当的运用它们。 三棵树理解 reset 和 checkout 的最简方法，就是以 Git 的思维框架（将其作为内容管理器）来管理三棵不同的树。 “树” 在我们这里的实际意思是 “文件的集合”，而不是指特定的数据结构。 （在某些情况下索引看起来并不像一棵树，不过我们现在的目的是用简单的方式思考它。） 树 描述 HEAD 上一次提交的快照，下一次提交的父结点 Index 预期的下一次提交的快照 Working Directory 沙盒 HEADHEAD 是当前分支引用的指针，它总是指向该分支上的最后一次提交。 这表示 HEAD 将是下一次提交的父结点。 通常，理解 HEAD 的最简方式，就是将它看做 你的上一次提交 的快照。 其实，查看快照的样子很容易。 下例就显示了 HEAD 快照实际的目录列表，以及其中每个文件的 SHA-1 校验和： $ git cat-file -p HEAD tree cfda3bf379e4f8dba8717dee55aab78aef7f4daf author Scott Chacon 1301511835 -0700 committer Scott Chacon 1301511835 -0700 initial commit $ git ls-tree -r HEAD 100644 blob a906cb2a4a904a152... README 100644 blob 8f94139338f9404f2... Rakefile 040000 tree 99f1a6d12cb4b6f19... lib cat-file 与 ls-tree 是底层命令，它们一般用于底层工作，在日常工作中并不使用。不过它们能帮助我们了解到底发生了什么。 索引(Index)索引是你的 预期的下一次提交。 我们也会将这个概念引用为 Git 的 “暂存区域”，这就是当你运行 git commit 时 Git 看起来的样子。 Git 将上一次检出到工作目录中的所有文件填充到索引区，它们看起来就像最初被检出时的样子。 之后你会将其中一些文件替换为新版本，接着通过 git commit 将它们转换为树来用作新的提交。 $ git ls-files -s 100644 a906cb2a4a904a152e80877d4088654daad0c859 0 README 100644 8f94139338f9404f26296befa88755fc2598c289 0 Rakefile 100644 47c6340d6459e05787f644c2447d2595f5d3a54b 0 lib/simplegit.rb 再说一次，我们在这里又用到了 ls-files 这个幕后的命令，它会显示出索引当前的样子。 确切来说，索引并非技术上的树结构，它其实是以扁平的清单实现的。不过对我们而言，把它当做树就够了。 工作目录(Working Directory)最后，你就有了自己的工作目录。 另外两棵树以一种高效但并不直观的方式，将它们的内容存储在 .git 文件夹中。 工作目录会将它们解包为实际的文件以便编辑。 你可以把工作目录当做 沙盒。在你将修改提交到暂存区并记录到历史之前，可以随意更改。 $ tree . ├── README ├── Rakefile └── lib └── simplegit.rb 1 directory, 3 files 工作流程Git 主要的目的是通过操纵这三棵树来以更加连续的状态记录项目的快照。让我们来可视化这个过程：假设我们进入到一个新目录，其中有一个文件。 我们称其为该文件的 v1 版本，将它标记为蓝色。 现在运行 git init，这会创建一个 Git 仓库，其中的 HEAD 引用指向未创建的分支（master 还不存在）。此时，只有工作目录有内容。 现在我们想要提交这个文件，所以用 git add 来获取工作目录中的内容，并将其复制到索引中。接着运行 git commit，它首先会移除索引中的内容并将它保存为一个永久的快照，然后创建一个指向该快照的提交对象，最后更新 master 来指向本次提交。此时如果我们运行 git status，会发现没有任何改动，因为现在三棵树完全相同。 现在我们想要对文件进行修改然后提交它。 我们将会经历同样的过程；首先在工作目录中修改文件。 我们称其为该文件的 v2 版本，并将它标记为红色。如果现在运行 git status，我们会看到文件显示在 “Changes not staged for commit,” 下面并被标记为红色，因为该条目在索引与工作目录之间存在不同。 接着我们运行 git add 来将它暂存到索引中。此时，由于索引和 HEAD 不同，若运行 git status 的话就会看到 “Changes to be committed” 下的该文件变为绿色 ——也就是说，现在预期的下一次提交与上一次提交不同。 最后，我们运行 git commit 来完成提交。现在运行 git status 会没有输出，因为三棵树又变得相同了。 切换分支或克隆的过程也类似。 当检出一个分支时，它会修改 HEAD 指向新的分支引用，将 索引 填充为该次提交的快照，然后将 索引 的内容复制到 工作目录 中。 重置的作用在以下情景中观察 reset 命令会更有意义。 为了演示这些例子，假设我们再次修改了 file.txt 文件并第三次提交它。 现在的历史看起来是这样的：让我们跟着 reset 看看它都做了什么。 它以一种简单可预见的方式直接操纵这三棵树。 它做了三个基本操作。 1.移动 HEADreset 做的第一件事是移动 HEAD 的指向。 这与改变 HEAD 自身不同（checkout 所做的）；reset 移动 HEAD 指向的分支。 这意味着如果 HEAD 设置为 master 分支（例如，你正在 master 分支上），运行 git reset 9e5e64a 将会使 master 指向 9e5e64a。无论你调用了何种形式的带有一个提交的 reset，它首先都会尝试这样做。 使用 reset --soft，它将仅仅停在那儿。 现在看一眼上图，理解一下发生的事情：它本质上是撤销了上一次 git commit 命令。 当你在运行 git commit 时，Git 会创建一个新的提交，并移动 HEAD 所指向的分支来使其指向该提交。 当你将它 reset 回 HEAD~（HEAD 的父结点）时，其实就是把该分支移动回原来的位置，而不会改变索引和工作目录。 现在你可以更新索引并再次运行 git commit 来完成 git commit --amend 所要做的事情了。 2.更新索引(–mixed)注意，如果你现在运行 git status 的话，就会看到新的 HEAD 和以绿色标出的它和索引之间的区别。 接下来，reset 会用 HEAD 指向的当前快照的内容来更新索引。如果指定 --mixed 选项，reset 将会在这时停止。 这也是默认行为，所以如果没有指定任何选项（在本例中只是 git reset HEAD~），这就是命令将会停止的地方。 现在再看一眼上图，理解一下发生的事情：它依然会撤销一上次 提交，但还会 取消暂存 所有的东西。 于是，我们回滚到了所有 git add 和 git commit 的命令执行之前。 3.更新工作目录reset 要做的的第三件事情就是让工作目录看起来像索引。 如果使用 –hard 选项，它将会继续这一步。现在让我们回想一下刚才发生的事情。 你撤销了最后的提交、git add 和 git commit 命令以及工作目录中的所有工作。 必须注意，--hard 标记是 reset 命令唯一的危险用法，它也是 Git 会真正地销毁数据的仅有的几个操作之一。 其他任何形式的 reset 调用都可以轻松撤消，但是 --hard 选项不能，因为它强制覆盖了工作目录中的文件。 在这种特殊情况下，我们的 Git 数据库中的一个提交内还留有该文件的 v3 版本，我们可以通过 reflog 来找回它。但是若该文件还未提交，Git 仍会覆盖它从而导致无法恢复。 回顾reset 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止： 移动 HEAD 分支的指向 （若指定了 --soft，则到此停止） 使索引看起来像 HEAD （不带参数或 --mixed，则到此停止） 使工作目录看起来像索引 (指定了 --hard) 通过路径来重置前面讲述了 reset 基本形式的行为，不过你还可以给它提供一个作用路径。 若指定了一个路径，reset 将会跳过第 1 步，并且将它的作用范围限定为指定的文件或文件集合。 这样做自然有它的道理，因为 HEAD 只是一个指针，你无法让它同时指向两个提交中各自的一部分。 不过索引和工作目录 可以部分更新，所以重置会继续进行第 2、3 步。 现在，假如我们运行 git reset file.txt （这其实是 git reset --mixed HEAD file.txt 的简写形式，因为你既没有指定一个提交的 SHA-1 或分支，也没有指定 --soft 或 --hard），它会： 移动 HEAD 分支的指向 （已跳过） 让索引看起来像 HEAD （到此处停止） 所以它本质上只是将 file.txt 从 HEAD 复制到索引中。它还有 取消暂存文件 的实际效果。 如果我们查看该命令的示意图，然后再想想 git add 所做的事，就会发现它们正好相反。 这就是为什么 git status 命令的输出会建议运行此命令来取消暂存一个文件。 （查看 取消暂存的文件 来了解更多。） 我们可以不让 Git 从 HEAD 拉取数据，而是通过具体指定一个提交来拉取该文件的对应版本。 我们只需运行类似于 git reset eb43bf file.txt 的命令即可。它其实做了同样的事情，也就是把工作目录中的文件恢复到 v1 版本，运行 git add 添加它，然后再将它恢复到 v3 版本（只是不用真的过一遍这些步骤）。 如果我们现在运行 git commit，它就会记录一条“将该文件恢复到 v1 版本”的更改，尽管我们并未在工作目录中真正地再次拥有它。 还有一点同 git add 一样，就是 reset 命令也可以接受一个 --patch 选项来一块一块地取消暂存的内容。 这样你就可以根据选择来取消暂存或恢复内容了。 压缩我们来看看如何利用这种新的功能来做一些有趣的事情 - 压缩提交。 假设你的一系列提交信息中有 “oops.”、“WIP” 和 “forgot this file”， 聪明的你就能使用 reset 来轻松快速地将它们压缩成单个提交，也显出你的聪明。 （压缩提交 展示了另一种方式，不过在本例中用 reset 更简单。） 假设你有一个项目，第一次提交中有一个文件，第二次提交增加了一个新的文件并修改了第一个文件，第三次提交再次修改了第一个文件。 由于第二次提交是一个未完成的工作，因此你想要压缩它。那么可以运行 git reset --soft HEAD~2 来将 HEAD 分支移动到一个旧一点的提交上（即你想要保留的第一个提交）：然后只需再次运行 git commit：现在你可以查看可到达的历史，即将会推送的历史，现在看起来有个 v1 版 file-a.txt 的提交，接着第二个提交将 file-a.txt 修改成了 v3 版并增加了 file-b.txt。 包含 v2 版本的文件已经不在历史中了。 checkout最后，你大概还想知道 checkout 和 reset 之间的区别。 和 reset 一样，checkout 也操纵三棵树，不过它有一点不同，这取决于你是否传给该命令一个文件路径。 不带路径运行 git checkout [branch] 与运行 git reset --hard [branch] 非常相似，它会更新所有三棵树使其看起来像 [branch]，不过有两点重要的区别。 首先不同于 reset --hard，checkout 对工作目录是安全的，它会通过检查来确保不会将已更改的文件吹走。 其实它还更聪明一些。它会在工作目录中先试着简单合并一下，这样所有_还未修改过的_文件都会被更新。 而 reset --hard 则会不做检查就全面地替换所有东西。 第二个重要的区别是如何更新 HEAD。 reset 会移动 HEAD 分支的指向，而 checkout 只会移动 HEAD 自身来指向另一个分支。 例如，假设我们有 master 和 develop 分支，它们分别指向不同的提交；我们现在在 develop 上（所以 HEAD 指向它）。 如果我们运行 git reset master，那么 develop 自身现在会和 master 指向同一个提交。 而如果我们运行 git checkout master 的话，develop 不会移动，HEAD 自身会移动。 现在 HEAD 将会指向 master。 所以，虽然在这两种情况下我们都移动 HEAD 使其指向了提交 A，但_做法_是非常不同的。 reset 会移动 HEAD 分支的指向，而 checkout 则移动 HEAD 自身。 带路径运行 checkout 的另一种方式就是指定一个文件路径，这会像 reset 一样不会移动 HEAD。 它就像 git reset [branch] file 那样用该次提交中的那个文件来更新索引，但是它也会覆盖工作目录中对应的文件。 它就像是 git reset --hard [branch] file（如果 reset 允许你这样运行的话）- 这样对工作目录并不安全，它也不会移动 HEAD。 此外，同 git reset 和 git add 一样，checkout 也接受一个 –patch 选项，允许你根据选择一块一块地恢复文件内容。 总结希望你现在熟悉并理解了 reset 命令，不过关于它和 checkout 之间的区别，你可能还是会有点困惑，毕竟不太可能记住不同调用的所有规则。 下面的速查表列出了命令对树的影响。 “HEAD” 一列中的 “REF” 表示该命令移动了 HEAD 指向的分支引用，而‘HEAD’ 则表示只移动了 HEAD 自身。 特别注意 WD Safe? 一列 - 如果它标记为 NO，那么运行该命令之前请考虑一下。 **head****index****workdir****wd safe****commit level**`reset --soft [commit]`refnonoyes`reset [commit]`refyesnoyes`reset --hard [commit]`refyesyesno`checkout [commit]`headyesyesyes**file level**`reset (commit) [file]`noyesnoyes`checkout (commit) [file]`noyesyesno","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"工具/git","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://ysluckly.github.io/tags/Git/"}]},{"title":"Git操作之高手过招","slug":"tools/git-master","date":"2016-12-23T02:59:01.000Z","updated":"2022-02-19T09:27:58.556Z","comments":true,"path":"2016/12/23/git-master/","link":"","permalink":"https://ysluckly.github.io/2016/12/23/git-master/","excerpt":"在使用git的过程中，总有一天你会遇到下面的问题：）这些也是在开发过程中很常见的问题，以下也是作者的经验之谈，有不对的地方还请指出。","text":"在使用git的过程中，总有一天你会遇到下面的问题：）这些也是在开发过程中很常见的问题，以下也是作者的经验之谈，有不对的地方还请指出。 最后一次commit信息写错了如果只是提交信息写错了信息，可以通过以下命令单独修改提交信息 $ git commit --amend 注意： 通过这样的过程修改提交信息后，相当于删除原来的提交，重新提交了一次。所有如果你在修改前已经将错误的那次提交push到服务端，那在修改后就需要通过 git pull 来合并代码（类似于两个分支了）。通过 git log --graph --oneline 查看就会发现两个分支合并的痕迹 最后一次commit少添加一个文件$ git add file1 $ git commit --amend 最后一次commit多添加一个文件$ git rm --cached file1 $ git commit --amend 移除add过的文件#方法一 $ git rm --cache [文件名] #方法二 $ git reset head [文件/文件夹] 回退本地commit（还未push）这种情况发生在你的本地仓库，可能你add，commit以后发现代码有点问题，打算取消提交，用到下面命令 #只会保留源码（工作区），回退commit(本地仓库)与index（暂存区）到某个版本 $ git reset &lt;commit_id&gt; #默认为 --mixed模式 $ git reset --mixed &lt;commit_id&gt; #保留源码（工作区）和index（暂存区），只回退commit（本地仓库）到某个版本 $ git reset --soft &lt;commit_id&gt; #源码（工作区）、commit（本地仓库）与index（暂存区）都回退到某个版本 $ git reset --hard &lt;commit_id&gt; 当然有人在push代码以后，也是用reset –hard回退代码到某个版本之前，但是这样会有一个问题，你线上的代码没有变化。 !!!可以通过 git push –force 将本地的回退推送到服务端,但是除非你很清楚在这么做, 不推荐. 所以，这种情况你要使用下面的方式了。 回退本地commit（已经push）对于已经把代码push到线上仓库,你回退本地代码其实也想同时回退线上代码,回滚到某个指定的版本,线上,线下代码保持一致.你要用到下面的命令 $ git revert &lt;commit_id&gt; 注意： git revert 用于反转提交，执行命令时要求工作树必须是干净的。 git revert 用一个新的提交来消除一个历时提交所做出的修改 回退单个文件的历史版本#查看历史版本 git log 1.txt #回退该文件到指定版本 git reset [commit_id] 1.txt git checkout 1.txt #提交 git commit -m &quot;回退1.txt的历史版本&quot; 修改提交历史中的author和email旧的：author:Old-Author email:old@mail.com新的：author:New-Author email:new@mail.com1.在git仓库内创建下面的脚本，如change.sh # !/bin/sh git filter-branch --env-filter &#39; an=&quot;$GIT_AUTHOR_NAME&quot; am=&quot;$GIT_AUTHOR_EMAIL&quot; cn=&quot;$GIT_COMMITTER_NAME&quot; cm=&quot;$GIT_COMMITTER_EMAIL&quot; if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;old@mail.com&quot; ] then cn=&quot;New-Author&quot; cm=&quot;new@mail.com&quot; fi if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;old@mail.com&quot; ] then an=&quot;New-Author&quot; am=&quot;new@mail.com&quot; fi export GIT_AUTHOR_NAME=&quot;$an&quot; export GIT_AUTHOR_EMAIL=&quot;$am&quot; export GIT_COMMITTER_NAME=&quot;$cn&quot; export GIT_COMMITTER_EMAIL=&quot;$cm&quot; &#39; 2.运行脚本 $ sh change.sh 忽略已提交的文件（.iml） 删除已提交的文件# 删除项目中所有的.iml后缀的文件 $ find . -name &quot;*.iml&quot; | xargs rm -f 添加.gitignore文件&#96;&#96;&#96;bash .iml&#x2F;**&#x2F;.iml --- 持续更新中～～～","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"工具/git","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://ysluckly.github.io/tags/Git/"}]},{"title":"Git之SSH与HTTPS免密码配置","slug":"tools/git-ssh-https-verify-configuration","date":"2016-12-21T07:31:55.000Z","updated":"2022-02-19T09:27:58.558Z","comments":true,"path":"2016/12/21/git-ssh-https-verify-configuration/","link":"","permalink":"https://ysluckly.github.io/2016/12/21/git-ssh-https-verify-configuration/","excerpt":"Git作为当前最受欢迎的版本控制软件，使用是很频繁的。但每次使用git push等操作时都要输入密码，实在是挺麻烦的。本文对使用ssh与https两种通讯协议讨论一下免密码配置。注：这个过程在所有操作系统上都是相似的：）","text":"Git作为当前最受欢迎的版本控制软件，使用是很频繁的。但每次使用git push等操作时都要输入密码，实在是挺麻烦的。本文对使用ssh与https两种通讯协议讨论一下免密码配置。注：这个过程在所有操作系统上都是相似的：） SSH通信协议GitHub版许多Git服务器都使用SSH公钥进行认证，当然也包括github。首先你需要确认一下自己是否已经拥有密钥了，默认情况下，用户的 SSH 密钥存储在其 ~/.ssh 目录下。进入该目录并列出其中内容，你变可以下快速确认自己是否已经拥有密钥： $ cd ~/.ssh $ ls authorized_keys2 id_rsa known_hosts config id_rsa.pub 我们需要寻找一对 id_rsa 或 id_dsa 命名的文件，其中一个带 .pub 扩展名。 ‘.pub’文件是你的公钥，另一个则是私钥。如果没有找不到这样的文件（或者根本就没有.ssh目录），我们可以通过 ssh-keygen 程序来创建它们。 #邮箱可以随便填 $ ssh-keygen -t rsa -C &quot;xx@xx.com&quot; 首先 ssh-keygen 会确认密钥的存储位置和文件名（默认是 .ssh/id_rsa）,然后他会要求你输入两次密钥口令，留空即可。所以一般选用默认，全部回车即可。 接下来我们登陆到GitHub上，右上角小头像-&gt;Setting-&gt;SSH and GPG keys中，点击new SSH key。Title：可以随便填写，但最好起的名字能让自己知道这个公钥是哪个设备的。Key：将上面生成的.pub文件中的所有内容复制到这里。点击下面的Add SSH key即可。然后你就会发现可以免密码访问了 Git服务器如果服务端是自己搭建的git服务器，生成密钥公钥对的步骤是一样的。然后将生成的 .pub 文件内容，导入到git服务器 /home/git/.ssh/authorized_keys 文件内，一行一个。然后你就会发现git push 不再需要密码了搭建git服务器和相关免登陆的详细步骤可参考我的另一篇 搭建Git服务器 HTTPS通信协议上面讲了SSH方式的免密码，接下来讲一下越来越常用的HTTPS方式的免密码新建文件并保存密码 $ touch ~/.git-credentials $ vim ~/.git-credentials 添加内容 https://&#123;username&#125;:&#123;passwd&#125;@github.com 添加git配置 $ git config --global credential.helper store 查看～&#x2F;.gitconfig文件变化 [credential] helper = store 然后再尝试一下git push不再在需要密码了","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"工具/git","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://ysluckly.github.io/tags/Git/"}]},{"title":"jQuery之checkbox|radio|select操作","slug":"front-end/jQuery之checkbox-radio-select操作","date":"2016-11-23T08:19:34.000Z","updated":"2022-02-19T09:27:58.499Z","comments":true,"path":"2016/11/23/jQuery-checkbox-radio-select/","link":"","permalink":"https://ysluckly.github.io/2016/11/23/jQuery-checkbox-radio-select/","excerpt":"jQuery1.6中添加了prop方法,看起来和用起来都和attr方法一样,但是在一些特殊情况下,attribute和properties的区别非常大,在jQuery1.6之前，.attr()方法在获取一些attributes的时候使用了property值，这样会导致一些不一致的行为。在jQuery1.6中，.prop()方法提供了一中明确的获取property值得方式，这样.attr()方法仅返回attributes。 –摘自jQuery API文档","text":"jQuery1.6中添加了prop方法,看起来和用起来都和attr方法一样,但是在一些特殊情况下,attribute和properties的区别非常大,在jQuery1.6之前，.attr()方法在获取一些attributes的时候使用了property值，这样会导致一些不一致的行为。在jQuery1.6中，.prop()方法提供了一中明确的获取property值得方式，这样.attr()方法仅返回attributes。 –摘自jQuery API文档 checkbox&lt;input type=&#39;checkbox&#39; value=&#39;1&#39;/&gt; &lt;input type=&#39;checkbox&#39; value=&#39;2&#39;/&gt; &lt;input type=&#39;checkbox&#39; value=&#39;3&#39;/&gt; $(&quot;input[type=checkbox]&quot;) //获取所有的checkbox $(&quot;input[type=checkbox]:checked&quot;) //获取所有的被选中的checkbox $(&quot;input[type=checkbox]:not(:checked)&quot;) //获取所有未被选中的checkbox $(&quot;input[type=checkbox]&quot;).not(&quot;:checked&quot;) //获取所有未被选中的checkbox $(&quot;input[type=checkbox]:first&quot;) //获取第一个checkbox的value值 $(&quot;input[type=checkbox]:checked&quot;).length //获取被选中checkbox的数量 $(&quot;input[type=checkbox]:first&quot;).prop(&quot;checked&quot;) //判断第一个checkbox是否被选中 $(&quot;input[type=checkbox]:first&quot;).prop(&quot;checkbox&quot;,true) //选中第一个checkbox $(&quot;input[type=checkbox]:not(:checked)&quot;).prop(&quot;checked&quot;,true) //全选 $(&quot;input[type=checkbox]:checkbox&quot;).prop(&quot;checked&quot;,false) //都不选中 //反选 $(&quot;input[type=checkbox]&quot;).each(function()&#123; if($(this).prop(&quot;checked&quot;))&#123; $(this).prop(&quot;checked&quot;,false); &#125;else&#123; $(this).prop(&quot;checked&quot;,true); &#125; &#125;) radio&lt;input type=&#39;radio&#39; name=&#39;rank&#39; value=&#39;1&#39; /&gt; &lt;input type=&#39;radio&#39; name=&#39;rank&#39; value=&#39;2&#39; /&gt; &lt;input type=&#39;radio&#39; name=&#39;rank&#39; value=&#39;3&#39; /&gt; $(&quot;input[type=radio]&quot;) //获取所有的radio $(&quot;input[type=radio]:checked&quot;) //获取被选中的radio $(&quot;input[type=radio]:not(:checkbox)&quot;) //获取所有没有被选中的radio $(&quot;input[type=radio]:checked&quot;).val() //获取被选中的radio的value值 $(&quot;input[type=radio]:first&quot;).prop(&quot;checked&quot;) //判断第一个radio是否被选中 $(&quot;input[type=radio]:first&quot;).prop(&quot;checked&quot;,true) //选中第一个radio select&lt;select&gt; &lt;option value=&#39;1&#39;&gt;1&lt;/option&gt; &lt;option value=&#39;2&#39;&gt;2&lt;/option&gt; &lt;option value=&#39;4&#39;&gt;3&lt;/option&gt; &lt;/select&gt; $(&quot;select option:selected&quot;) //获取被选中的option $(&quot;select&quot;).val() //获取选中option的value值 $(&quot;select option:selected&quot;).text() //获取被选中的option的text值 $(&quot;select option:first&quot;).prop(&quot;selected&quot;) //判断第一个option是否被选中 $(&quot;select option:first&quot;).prop(&quot;selected&quot;,true) //选中第一个option $(&quot;select option:selected&quot;).prop(&quot;selected&quot;,false) //取消当前选中,然后默认选中第一个","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://ysluckly.github.io/tags/jQuery/"}]},{"title":"jQuery选择器与节点操作","slug":"front-end/jQuery选择器与节点操作","date":"2016-11-22T09:11:48.000Z","updated":"2022-02-19T09:27:58.499Z","comments":true,"path":"2016/11/22/jQuery-selector/","link":"","permalink":"https://ysluckly.github.io/2016/11/22/jQuery-selector/","excerpt":"jQuery 是一个 JavaScript 函数库。jQuery的语法设计使得许多操作变得容易，如操作文档对象（document）、选择文档对象模型（DOM）元素、创建动画效果、处理事件、以及开发Ajax程序。jQuery也提供了给开发人员在其上创建插件的能力。这使开发人员可以对底层交互与动画、高级效果和高级主题化的组件进行抽象化。","text":"jQuery 是一个 JavaScript 函数库。jQuery的语法设计使得许多操作变得容易，如操作文档对象（document）、选择文档对象模型（DOM）元素、创建动画效果、处理事件、以及开发Ajax程序。jQuery也提供了给开发人员在其上创建插件的能力。这使开发人员可以对底层交互与动画、高级效果和高级主题化的组件进行抽象化。 jQuery获取元素元素选择器//元素选择器 &lt;div &gt; $(&quot;div&quot;) id选择器//id选择器 &lt;div id=&#39;id&#39;&gt; $(&quot;#id&quot;) $(&quot;div#id&quot;) class选择器//class选择器 &lt;div class=&#39;class&#39;&gt; $(&quot;.class&quot;) $(&quot;div.class&quot;) 属性过滤选择器&lt;li class=&#39;check&#39; type=&#39;li_01&#39;&gt;&lt;/li&gt; &lt;li type=&#39;li_02&#39;&gt;&lt;/li&gt; &lt;li type=&#39;li_03&#39;&gt;&lt;/li&gt; //通过属性获取 如果属性值为有特殊字符，一定要加引号 $(&quot;[type]&quot;) //获取有type属性的元素 $(&quot;[type=&#39;li_01&#39;]&quot;) //获取type值等于&#39;li_01&#39;的元素 $(&quot;[type!=&#39;li_01&#39;]&quot;) //获取type值不等于&#39;li_01&#39;的元素 $(&quot;[type*=&#39;li&#39;]&quot;) //模糊匹配 获取type值包含&#39;li&#39;的元素 $(&quot;[type^=&#39;li&#39;]&quot;) //模糊匹配 获取type值以&#39;li&#39;开始的元素 $(&quot;[type$=&#39;01&#39;]&quot;) //模糊匹配 获取type值以&#39;01&#39;结尾的元素 $(&quot;li[class=&#39;check&#39;][type]&quot;) //获取多个条件同时满足的元素 * 选择器//遍历form下的所有元素,将其margin设置0 $(&#39;form *&#39;).css(&#39;margin&#39;,&#39;0px&#39;) 并列选择器$(&#39;p, div&#39;).css(&#39;color&#39;,&#39;red&#39;); //将p元素和div元素的字体颜色设置为red 层叠选择器&lt;div class=&#39;a&#39;&gt; &lt;!-- 父级div --&gt; &lt;div class=&#39;a1&#39;&gt; &lt;!-- 子级div1 --&gt; &lt;div class=&#39;a11&#39;&gt;&lt;/div&gt; &lt;!-- 孙级div1 --&gt; &lt;/div&gt; &lt;div class=&#39;a2&#39;&gt;&lt;/div&gt; &lt;!-- 子级div2 --&gt; &lt;div class=&#39;a3&#39;&gt;&lt;/div&gt; &lt;!-- 子级div3 --&gt; &lt;span&gt;&lt;/span&gt; &lt;!-- 子级span1 --&gt; &lt;/div&gt; $(&quot;.a div&quot;) //选择class=a的元素下所有的div 即选择到子级div1,2,3 孙级div1 $(&quot;.a &gt; div&quot;) //选择class=a的元素的所有子div元素, 即选择到子级div1,2,3; $(&quot;div + span&quot;) //选择所有的div元素的下一个input元素节点,即选择到:子级div3 $(&quot;.a1 ~ div&quot;) //同胞选择器,返回class为a2的标签元素的所有属于同一个父元素的div标签,即div1,2,3 基本过滤选择器&lt;ul&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; $(&quot;li:first&quot;) //选择所有li元素的第一个 $(&quot;li:last&quot;) //选择所有li元素的最后一个 $(&quot;li:even&quot;) //选择所有li元素的第0,2,4... ...个元素(序号从0开始) $(&quot;li:odd&quot;) //选择所有li元素的第1,3,5... ...个元素 $(&quot;li:eq(2)&quot;) //选择所有li元素中的第三个(即序号为2) $(&quot;li:gt(3)&quot;) //选择所有li元素中序号大于3的li元素 $(&quot;li:ll(2)&quot;) //选择所有li元素中序号小于2的li元素 &lt;input type=&quot;checkbox&quot; /&gt; &lt;input type=&quot;checkbox&quot; /&gt; $(&quot;input[type=&#39;checkbox&#39;]:checked&quot;) //获取所有已被选中的type等于checkbox的input元素 $(&quot;input[type=&#39;checkbox&#39;]:not(:checked)&quot;) //获取所有未被选中的type等于checkbox的input元素 内容过滤器$(&quot;div:contains(&#39;Faker&#39;)&quot;) //选择所有div中含有Faker文本的元素 $(&quot;div:empty&quot;) //选择所有div中为空(不包含任何元素/文本)的元素 $(&quot;div:has(&#39;p&#39;)&quot;) //选择所有div中包含p元素的元素 $(&quot;div:parent&quot;) //选择所有的含有子元素或文本的div 可视化过滤器$(&quot;div:hidden&quot;) //选择所有被hidden的div元素 $(&quot;div:not(:hidden)&quot;) //选择所有没有被hidden的div元素 $(&quot;div:visible&quot;) //所有可视化的div元素 $(&quot;div:not(:visible)&quot;) //所有非可视化的div元素 子元素过滤器&lt;body&gt; &lt;div class=&#39;d1&#39;&gt; &lt;div class=&#39;d11&#39;&gt; &lt;div class=&#39;d111&#39;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; $(&quot;body div:first-child&quot;) //返回所有的body元素下 所有div 为父元素的第一个元素 的元素. //:first 与 :first-child 的区别用法 //$(&quot;body div:first&quot;)只匹配到第一个合适的元素 即只匹配到 d1 //$(&quot;body div:first-child&quot;) 匹配所有合适的元素:d1是body的第一个元素,d11是d1的第一个元素.. //所以匹配到d1,d11,d111 $(&quot;div span:last-child&quot;) //返回所有的body元素下 所有div 为父元素的最后一个元素 的元素. //:last 与 :last-child 的区别参考first $(&quot;div button:only-child&quot;) //如果button是它父级元素的唯一子元素,此button将会被匹配 表单元素选择器$(&quot;:input&quot;) //选择所有的表单输入元素，包括input, textarea, select 和 button $(&quot;:text&quot;) //选择所有的text input元素 $(&quot;:password&quot;) //选择所有的password input元素 $(&quot;:radio&quot;) //选择所有的radio input元素 $(&quot;:checkbox&quot;) //选择所有的checkbox input元素 $(&quot;:submit&quot;) //选择所有的submit input元素 $(&quot;:image&quot;) //选择所有的image input元素 $(&quot;:reset&quot;) //选择所有的reset input元素 $(&quot;:button&quot;) //选择所有的button input元素 $(&quot;:file&quot;) //选择所有的file input元素 $(&quot;:hidden&quot;) //选择所有类型为hidden的input元素或表单的隐藏域 表单元素过滤器$(&quot;:enabled&quot;) //选择所有的可操作的表单元素 $(&quot;:disabled&quot;) //选择所有的不可操作的表单元素 $(&quot;:checked&quot;) //选择所有的被checked的表单元素 $(&quot;select option:selected&quot;) //选择所有的select 的子元素中被selected的元素 节点操作获取和操作节点属性&lt;a href=&#39;index.html&#39; data-type=&#39;a&#39; style=&quot;color:red;&quot;&gt;index&lt;/a&gt; &lt;input value=&#39;user&#39; /&gt; $(&quot;a&quot;).attr(&quot;href&quot;); //获取href属性值 $(&quot;a&quot;).attr(&quot;href&quot;,&quot;about.html&quot;); //设置href属性值 $(&quot;a&quot;).data(&quot;type&quot;); //获取data-type属性值 $(&quot;a&quot;).css(&quot;color&quot;); //通过key(color/display/....)获取css值 $(&quot;a&quot;).css(&quot;color&quot;,&quot;black&quot;); //通过key/value 设置css属性 $(&quot;a&quot;).text(); //获取a的文本节点值 $(&quot;a&quot;).text(&quot;Index.html&quot;); //设置a的文本节点值 $(&quot;input&quot;).val(); //获取input的value值 $(&quot;input&quot;).val(&quot;username&quot;); //设置input的value值 插入节点的方法&lt;div class=&quot;head&quot;&gt; &lt;span&gt;Faker&lt;span&gt; &lt;/div&gt; $(&quot;.head&quot;).append(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;) //在.head中的最后插入一段html //结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/div&gt; $(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;).appendTo(&quot;.head&quot;) //在.head中的最后插入一段html, //结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/div&gt; $(&quot;.head&quot;).prepend(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;) //在.head中的开始插入一段html, //结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;/div&gt; $(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;).prependTo(&quot;.head&quot;) //在.head中的开始插入一段html, //结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;/div&gt; $(&quot;.head *:first&quot;).after(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;) //在.head中的第一个元素后插入一段html, //结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/div&gt; $(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;).insertAfter(&quot;.head *:first&quot;) //在.head中的第一个元素后插入一段html, //结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;span&gt;hello&lt;/span&gt;&lt;/div&gt; $(&quot;.head *:first&quot;).before(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;) //在.head中的第一个元素前插入一段html, //结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;/div&gt; $(&quot;&lt;span&gt;hello&lt;/span&gt;&quot;).insertBefore(&quot;.head *:first&quot;) //在.head中的第一个元素后插入一段html, //结果: &lt;div class=&quot;head&quot;&gt;&lt;span&gt;hello&lt;/span&gt;&lt;span&gt;Faker&lt;/span&gt;&lt;/div&gt; $.load()方法 在指定位置加载请求回来的html页面 &lt;div class=&quot;head&quot;&gt; &lt;/div&gt; $(&quot;.head&quot;).load(url[,data][,callback]) url: 请求HTML页面的URL地址 data(可选): 请求的key/value参数 callback(可选) 请求完成的回调函数","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"jQuery","slug":"jQuery","permalink":"https://ysluckly.github.io/tags/jQuery/"}]},{"title":"idea常用快捷键","slug":"tools/idea-shortcuts","date":"2016-11-05T07:22:48.000Z","updated":"2022-02-19T09:27:58.567Z","comments":true,"path":"2016/11/05/idea-shortcuts/","link":"","permalink":"https://ysluckly.github.io/2016/11/05/idea-shortcuts/","excerpt":"工欲善其事 , 必先利其器","text":"工欲善其事 , 必先利其器 Idea作为IDE是相当niubility,但是要运用自如还得掌握一些常用快捷键,才能在开发过程中运用自如以下是idea的默认快捷键,如果英语能力没有问题,可以在Help-&gt;Keymap Reference 查看官方文档当然作为一款优秀的IDE,怎么会少了自定义快捷键(File-&gt;Setting-&gt;Keymap,可通过动作名&#x2F;快捷键组合双向查找)好了,下面是博主在Java相关开发过程中常用到的一些快捷键 常用快捷键组合编辑 序号 快捷键组合 作用 Ctrl+D 重复光标所在行&#x2F;或选中部分 Ctrl+C 复制光标所在行&#x2F;或选中部分 Ctrl+V 粘贴 Ctrl+Shift+V 选择粘贴最近5次复制的内容 Ctrl+X 删除光标所在行&#x2F;或选中部分 Ctrl+Y 删除光标所在行&#x2F;或选中行 Shift+Enter 向下插入新行 Alt+Shift+↑&#x2F;↓ 移动当前行到上&#x2F;下一行 Ctrl+Alt+←&#x2F;→ 定位到上&#x2F;下一次光标位置 Ctrl+I 实现接口方法 Ctrl+Shift+o 删除没用的import Ctrl+O 重写父类方法 Ctrl+W 选中当前单词 Ctrl+P 提示参数 Ctrl+Q 查看方法&#x2F;类的注释文档 Ctrl+Alt+L 格式化当前模板 Ctrl+&#x2F; 注释当前行,或选中行 Ctrl+Shift+&#x2F; 注释选中部分 &#x2F;**+回车(类&#x2F;方法&#x2F;属性前) 添加注释 搜索&#x2F;替换 序号 快捷键组合 作用 Ctrl+N 通过类名(文件名)的关键字快速打开文件(仅限.java文件) Ctrl+Shift+N 通过文件名关键字快速打开文件 Ctrl+Shift+N(两次) 通过文件名关键字快速打开文件(包括非本项目内文件,如Maven引入的) Ctrl+Shift+Alt+N 通过关键字(包括类名&#x2F;方法名&#x2F;url映射)快速打开文件,定位到类名&#x2F;方法名&#x2F;url映射的方法 Ctrl+F 搜索关键字(支持正则)在当前文件 F3 找下一个 Shift+F3 找上一个 Ctrl+R 替换关键字(支持正则)在当前文件 Ctrl+Shift+F 在所有文件(可以指定过滤文件)中查找关键字(支持正则) Ctrl+Shift+R 在所有文件(可以指定过滤文件)中替换关键字(支持正则) debugging 序号 快捷键组合 作用 F8 Step over(跳过下一行) F7 Step into(跳入当前行调用的方法体内) Shift+F7 Smart Step into(跳过) 未完待续","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"软件记录","slug":"工具/软件记录","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/%E8%BD%AF%E4%BB%B6%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"IntellijIDEA","slug":"IntellijIDEA","permalink":"https://ysluckly.github.io/tags/IntellijIDEA/"}]},{"title":"web.xml详解","slug":"back-end/web-xml详解","date":"2016-10-24T02:10:45.000Z","updated":"2022-02-19T09:27:58.482Z","comments":true,"path":"2016/10/24/web-xml/","link":"","permalink":"https://ysluckly.github.io/2016/10/24/web-xml/","excerpt":"web.xml文件是用来配置:欢迎页、servlet、filter、listener等的. 当你的web项目工程没用到这些时,你可以不用web.xml文件来配置你的web工程。如果项目中有多项标签,其加载顺序依次是:context-param &gt;&gt; listener &gt;&gt; filter &gt;&gt; servlet(同类多个节点出现顺序依次加载)","text":"web.xml文件是用来配置:欢迎页、servlet、filter、listener等的. 当你的web项目工程没用到这些时,你可以不用web.xml文件来配置你的web工程。如果项目中有多项标签,其加载顺序依次是:context-param &gt;&gt; listener &gt;&gt; filter &gt;&gt; servlet(同类多个节点出现顺序依次加载) web.xml先读取context-param和listener这两种节点； 然后容器创建一个ServletContext(上下文)，应用于整个项目； 容器会将读取到的context-param转化为键值对并存入servletContext； 根据listener创建监听； 容器会读取，根据指定的类路径来实例化过滤器； 此时项目初始化完成； 在发起第一次请求是，servlet节点才会被加载实例化。 参数设置context-paramcontext-param节点是web.xml中用于配置应用于整个web项目的​上下文。包括两个子节点，其中param-name 设定上下文的参数名称。必须是唯一名称；param-value 设定的参数名称的值。 读取节点的方法如下： $&#123;initParam.参数名&#125; Servlet中String paramValue&#x3D;getServletContext().getInitParameter(“参数名”)​ web.xml中配置spring必须使用listener节点，但context-param节点可有可无，如果缺省则默认contextConfigLocation路径为“&#x2F;WEB-INF&#x2F;applicationContext.xml”；如果有多个xml文件，使用”,“分隔 listener&lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.request.RequestContextListener&lt;/listener-class&gt; &lt;/listener&gt; 为web应用程序定义监听器，监听器用来监听各种事件，比如：application和session事件，所有的监听器按照相同的方式定义，功能取决去它们各自实现的接口，常用的Web事件接口有如下几个：ServletContextListener：用于监听Web应用的启动和关闭；ServletContextAttributeListener：用于监听ServletContext范围（application）内属性的改变；ServletRequestListener：用于监听用户的请求；ServletRequestAttributeListener：用于监听ServletRequest范围（request）内属性的改变；HttpSessionListener：用于监听用户session的开始和结束；HttpSessionAttributeListener：用于监听HttpSession范围（session）内属性的改变。 配置Listener只要向Web应用注册Listener实现类即可，无序配置参数之类的东西，因为Listener获取的是Web应用ServletContext（application）的配置参数。为Web应用配置Listener的两种方式： 使用@WebListener修饰Listener实现类即可。 在web.xml文档中使用进行配置。 servletservlet即配置所需用的servlet，用于处理及响应客户的请求。容器的Context对象对请求路径(URL)做出处理，去掉请求URL的上下文路径后，按路径映射规则和Servlet映射路径（）做匹配，如果匹配成功，则调用这个Servlet处理请求。 为Servlet命名：&lt;servlet&gt; &lt;servlet-name&gt;servlet&lt;/servlet-name&gt; &lt;servlet-class&gt;org.whatisjava.TestServlet&lt;/servlet-class&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; 为Servlet定制URL&lt;servlet-mapping&gt; &lt;servlet-name&gt;servlet&lt;/servlet-name&gt; &lt;url-pattern&gt;*.do&lt;/url-pattern&gt; &lt;/servlet-mapping&gt; Load-on-startupLoad-on-startup 元素在web应用启动的时候指定了servlet被加载的顺序，它的值必须是一个整数。如果它的值是一个负整数或是这个元素不存在，那么容器会在该servlet被调用的时候，加载这个servlet 。如果值是正整数或零，容器在配置的时候就加载并初始化这个servlet，容器必须保证值小的先被加载。如果值相等，容器可以自动选择先加载谁。当值为0或者大于0时，表示容器在应用启动时就加载这个servlet；当是一个负数时或者没有指定时，则指示容器在该servlet被选择时才加载。正数的值越小，启动该servlet的优先级越高。 filter设置过滤器:如编码过滤器,过滤所有资源 &lt;filter&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt; &lt;init-param&gt; &lt;param-name&gt;encoding&lt;/param-name&gt; &lt;param-value&gt;UTF-8&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;forceEncoding&lt;/param-name&gt; &lt;param-value&gt;true&lt;/param-value&gt; &lt;/init-param&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/filter-mapping&gt; session设置会话(Session)过期时间,其中时间以分钟为单位,加入设置60分超时: &lt;session-config&gt; &lt;session-timeout&gt;60&lt;/session-timeout&gt; &lt;/session-config&gt; welcom-file-list&lt;welcome-file-list&gt; &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt; &lt;welcome-file&gt;index.html&lt;/welcome-file&gt; &lt;/welcome-file-list&gt; PS:指定了两个欢迎页面,显示时按顺序从第一个找起，如果第一个存在，就显示第一个，后面的不起作用。如果第一个不存在，就找第二个，以此类推。如果都没有就404. 关于欢迎页面：访问一个网站时，默认看到的第一个页面就叫欢迎页，一般情况下是由首页来充当欢迎页的。一般情况下，我们会在web.xml中指定欢迎页。但 web.xml并不是一个Web的必要文件，没有web.xml，网站仍然是可以正常工作的。只不过网站的功能复杂起来后，web.xml的确有非常大用处，所以，默认创建的动态web工程在WEB-INF文件夹下面都有一个web.xml文件。 error-page&lt;!-- 错误码 --&gt; &lt;error-page&gt; &lt;error-code&gt;404&lt;/error-code&gt; &lt;location&gt;/error404.jsp&lt;/location&gt; &lt;/error-page&gt; &lt;!-- 错误类型 --&gt; &lt;error-page&gt; &lt;exception-type&gt;java.lang.Exception&lt;exception-type&gt; &lt;location&gt;/exception.jsp&lt;location&gt; &lt;/error-page&gt;","categories":[{"name":"后端","slug":"后端","permalink":"https://ysluckly.github.io/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"java","slug":"java","permalink":"https://ysluckly.github.io/tags/java/"},{"name":"javaee","slug":"javaee","permalink":"https://ysluckly.github.io/tags/javaee/"}]},{"title":"Hexo+Git服务器搭建blog","slug":"tools/hexo-git-server-blog","date":"2016-10-23T01:24:03.000Z","updated":"2022-02-19T09:27:58.563Z","comments":true,"path":"2016/10/23/hexo-git-server-blog/","link":"","permalink":"https://ysluckly.github.io/2016/10/23/hexo-git-server-blog/","excerpt":"博主最近在服务器上搭建Hexo发布平台，感觉整个搭建过程和搭建思想蛮有意思，在此记录一下，供猿友参考Hexo 是一个快速，简单，功能强大，主题社区特别庞大的开源blog框架-》官网本次搭建是通过在服务器上搭建Git服务器来实现一键发布blog","text":"博主最近在服务器上搭建Hexo发布平台，感觉整个搭建过程和搭建思想蛮有意思，在此记录一下，供猿友参考Hexo 是一个快速，简单，功能强大，主题社区特别庞大的开源blog框架-》官网本次搭建是通过在服务器上搭建Git服务器来实现一键发布blog 搭建思路 客户端就是自己的电脑,可以把hexo的静态资源目录当成一个git仓库. 首先配置好远程git仓库,通过 hexo d 将静态网站资源push到远程git仓库 git仓库接收到push处理完成后,自动触发post-receive这个钩子. 执行钩子内容,进入到 &#x2F;var&#x2F;www&#x2F;blog 目录(也是一个git仓库),拉取刚才hexo推送到git服务端的静态网站资源. 配置nginx,将80端口映射到 &#x2F;var&#x2F;www&#x2F;blog 目录. 就可以直接通过ip访问到静态blog了 搭建过程环境准备在服务器上安装git并创建git远程仓库 如 blog.git搭建过程移步 搭建Git服务器 在 _config.yml 中配置git服务器deploy: type: git repo: git@server:/home/git/blog.git branch: master 如果ssh端口不是默认的22的话，如下配置,8080改为自己服务器上ssh端口 deploy: type: git repo: ssh://git@server:8080/home/git/blog.git branch: master 配置nginx现在已经可以使用 hexo d 将hexo中的生成的静态资源发送到远程服务器中，接下来我们要配置nginx来配置静态web。安装过程可以自行Google，在此只说明nginx如何配置静态web首先创建一个目录作为存放web资源（hexo生成的）的目录，如： /var/www/blog cd /var/www #创建blog目录，并克隆blog.git仓库的内容 git clone /home/git/blog.git blog 找到 nginx.conf 添加以下信息 server &#123; listen 80; charset utf-8; root /var/www/blog; index index.htm index.html index.jsp; &#125; #重启并加载配置文件 $ nginx -s reload 配置git服务器hooks这个钩子的作用是，当git服务器接受客户端push完成更新，执行此文件内容 #创建并编辑post-receive $ vim blog.git/hooks/post-receive 内容如下 #!/bin/sh unset GIT_DIR #还原环境变量，否则会拉不到代码 cd /var/www/blog git pull origin master #拉取最新代码 测试效果在本地的hexo下执行 hexo d查看 &#x2F;var&#x2F;www&#x2F;blog文件夹内的内容也发生变化","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"Git","slug":"Git","permalink":"https://ysluckly.github.io/tags/Git/"}]},{"title":"Hexo+GitHub Pages搭建属于自己的blog","slug":"tools/hexo-gitHub-pages-create-own-blog","date":"2016-10-22T13:24:05.000Z","updated":"2022-02-19T09:27:58.564Z","comments":true,"path":"2016/10/22/hexo-gitHub-pages-create-own-blog/","link":"","permalink":"https://ysluckly.github.io/2016/10/22/hexo-gitHub-pages-create-own-blog/","excerpt":"Hexo是一个快速，简单，功能强大的开源博客框架-》官网GitHub Pages 是一个不受限的网站空间。两者相得益彰。给那些喜欢自己折腾的人提供一些借鉴。","text":"Hexo是一个快速，简单，功能强大的开源博客框架-》官网GitHub Pages 是一个不受限的网站空间。两者相得益彰。给那些喜欢自己折腾的人提供一些借鉴。 搭建过程环境介绍博主使用系统：Deepin Linux 15.3桌面版安装 node与npm 安装Hexonpm install hexo-cli -g 初始化bloghexo init blog 至此，本地blog已经创建完成，是不是很简单，简单到没朋友 选择主题可以在hexo官网查看自己喜欢的主题通过git clone [url] themes&#x2F;xxx 将主题克隆到本地，修改 _config.yml 中的theme：xxx 常用命令#创建一个新的文章 $ hexo new &quot;文章名&quot; #生成静态文件 $ hexo generate #将一个草稿发布出去 $ hexo publish [layout] &lt;filename&gt; #启动一个本地服务器 $ hexo server 更多命令移步官方文档 搭建github pages本地blog已经搭建完成，现在可以发布到github pages上 注册github账户到github官网注册一个github账户 配置登录免密码移步 Git之SSH与HTTPS免密码配置 创建github远程仓库在github上创建一个仓库 xxx.github.io xxx为自己的github用户名 安装插件$ npm install hexo-deployer-git --save 配置Hexo修改 _comfig.yml,xxx为你的用户名 deploy: type: git repo: git@github.com:xxx/xxx.github.io.git branch: master 推送服务器$ hexo deploy 若出现ERROR Deployer not found: git报错，请执行上面安装插件步骤 测试打开 xxx.github.io ，就能看到你的blog了","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"Git","slug":"Git","permalink":"https://ysluckly.github.io/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://ysluckly.github.io/tags/GitHub/"}]},{"title":"搭建Git服务器","slug":"tools/set-up-git-server-on-vps","date":"2016-10-22T12:08:04.000Z","updated":"2022-02-19T09:27:58.569Z","comments":true,"path":"2016/10/22/set-up-git-server-on-vps/","link":"","permalink":"https://ysluckly.github.io/2016/10/22/set-up-git-server-on-vps/","excerpt":"最近由于准备在公司的服务器上面搭建静态博客（Hexo），然后需要先搭建一个git服务器作为转接，整个过程看似顺利，十几分钟就搭建完成，不过最后在验证这块卡了两个小时，在此记录下来，供准备搭建git服务器的新手小伙伴们借鉴。","text":"最近由于准备在公司的服务器上面搭建静态博客（Hexo），然后需要先搭建一个git服务器作为转接，整个过程看似顺利，十几分钟就搭建完成，不过最后在验证这块卡了两个小时，在此记录下来，供准备搭建git服务器的新手小伙伴们借鉴。 搭建git服务器通过ssh链接到服务器，开始进行操作 第一步在服务器上安装 git $ sudo apt-get install git 第二步创建 git 用户，用来运行git服务 $ sudo adduser git 第三步创建证书，免密码登录：收集所有需要登录的用户的公钥（id_rsa.pub）文件，把所有公钥导入到 /home/git/.ssh/authorized_keys 文件内，一行一个。如果个人的git中的公钥已经连接了其他服务器如：github，可以参考 一个客户端设置多个github账号 注意：一定要通过下面的命令将该文件其他用户的所有权限移除，否则会出现文章尾部问题 $ chmod 600 authorized_keys 第四步初始化git仓库 $ git init --bare test.git git创建一个裸仓库，裸仓库没有工作区，因为服务器上的git仓库纯粹为了共享，所有不能让用户直接登录到服务器上去改工作区，并且服务器的git仓库通常以 .git 结尾。然后，修改owner改为git： $ sudo chown -R git:git test.git 第五步禁用shell登录：处于安全的考虑，第二步创建的git用户不允许登录shell，这可以通过编辑 /etc/passwd 文件完成。 git:x:1003:1003::/home/git:/bin/bash 改为 git:x:1003:1003::/home/git:/usr/bin/git-shell 这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。 第六步克隆远程仓库：现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行： $ git clone git@server:/home/git/test.git 如果服务器的ssh端口不是默认的22的话，比如说6789，可以这样写： $ git clone ssh://git@server:6789/home/git/test.git 问题来了本来根据文档，根据广大猿友的经验，我的搭建之路已经完成了，然后最后一步出现了问题。每次跟服务器进行交互(clone,pull,push)，都让我输入git的密码，也就是说，我配置的ssh没有生效。然后就开始到处找原因，重新生成rsa，提升authorized_keys权限，重新创建服务器git账户，重新。。。。。 翻遍了 Stack Overflow 和 segmentfault ,两个小时过去了，问题仍然没有进展，这么简单的东西，问题到底出在哪里。 就在心灰意冷，准备放弃的时候，不知道是哪里来的灵感，准备把 authorized_keys 文件的其他用户的权限删掉，然后就能用了，后就能用了，就能用了，能用了，用了，了～～～～，命令如下，不想多说话，我想静静。 $ chmod 600 authorized_keys","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"工具/git","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://ysluckly.github.io/tags/Git/"}]},{"title":"如何给GitHub上的项目贡献代码","slug":"tools/contributing-to-open-source-on-github","date":"2016-10-13T07:44:07.000Z","updated":"2022-02-19T09:27:58.550Z","comments":true,"path":"2016/10/13/contributing-to-open-source-on-github/","link":"","permalink":"https://ysluckly.github.io/2016/10/13/contributing-to-open-source-on-github/","excerpt":"最近一直在使用 hexo 的一款主题 yelee ，但是发现它的代码块由于空行不占位导致的显示错位，所以就去GitHub上翻issue，果然有好多人都在反映这个问题，并且作者已经打上bug标签，事情应该就马上结束了，就去忙别的了。这两天又去逛了一下issue，发现这个bug仍然屹立在那里，强迫症又犯了，趁着今天工作不怎么忙，就把这个bug解决了。然后问题来了，怎么才能给作者贡献代码呢。","text":"最近一直在使用 hexo 的一款主题 yelee ，但是发现它的代码块由于空行不占位导致的显示错位，所以就去GitHub上翻issue，果然有好多人都在反映这个问题，并且作者已经打上bug标签，事情应该就马上结束了，就去忙别的了。这两天又去逛了一下issue，发现这个bug仍然屹立在那里，强迫症又犯了，趁着今天工作不怎么忙，就把这个bug解决了。然后问题来了，怎么才能给作者贡献代码呢。 准备工作 首先通过 git clone 将项目克隆到本地（我早已拉下来，跳过此步骤） git pull 拉取最新代码（将所有的change都同步到本地） 将 原项目 fork 到 自己的github上,并复制代码url 在本地添加第二个仓库地址：git remote add [nickname] [your url] 修改 修改bug 或 新增功能 git commit [file1] [file2] ... -m [message] 本地提交代码 同步到github中并发到原项目 git push [nickname] 将代码 push 到自己的项目里，nickname就是添加的第二个仓库的名字 自己项目内，点击 pull requests -》 new pull request 将本次修改提交到原项目进行同步。","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"工具/git","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://ysluckly.github.io/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://ysluckly.github.io/tags/GitHub/"}]},{"title":"PostgreSQL常用操作","slug":"database/PostgreSQL常用操作","date":"2016-10-12T12:27:07.000Z","updated":"2022-02-19T09:27:58.491Z","comments":true,"path":"2016/10/12/PostgreSQL-2/","link":"","permalink":"https://ysluckly.github.io/2016/10/12/PostgreSQL-2/","excerpt":"控制台命令\\h: #查看SQL命令的解释，比如\\h select。 \\?: #查看psql命令列表。 \\l: #列出所有数据库。 \\c [database_name]: #连接其他数据库。 \\d: #列出当前数据库的所有表格。 \\d [table_name]: #列出某一张表格的结构。 \\du: #列出所有用户。 \\e: #打开文本编辑器。 \\conninfo: #列出当前数据库和连接的信息。","text":"控制台命令\\h: #查看SQL命令的解释，比如\\h select。 \\?: #查看psql命令列表。 \\l: #列出所有数据库。 \\c [database_name]: #连接其他数据库。 \\d: #列出当前数据库的所有表格。 \\d [table_name]: #列出某一张表格的结构。 \\du: #列出所有用户。 \\e: #打开文本编辑器。 \\conninfo: #列出当前数据库和连接的信息。 数据库操作基本的数据库操作，就是使用一般的SQL语言 # 创建新表 CREATE TABLE user_tbl(name VARCHAR(20), signup_date DATE); # 插入数据 INSERT INTO user_tbl(name, signup_date) VALUES(&#39;张三&#39;, &#39;2013-12-22&#39;); # 选择记录 SELECT * FROM user_tbl; # 更新数据 UPDATE user_tbl set name = &#39;李四&#39; WHERE name = &#39;张三&#39;; # 删除记录 DELETE FROM user_tbl WHERE name = &#39;李四&#39; ; # 添加栏位 ALTER TABLE user_tbl ADD email VARCHAR(40); # 更新结构 ALTER TABLE user_tbl ALTER COLUMN signup_date SET NOT NULL; # 更名栏位 ALTER TABLE user_tbl RENAME COLUMN signup_date TO signup; # 删除栏位 ALTER TABLE user_tbl DROP COLUMN email; # 表格更名 ALTER TABLE user_tbl RENAME TO backup_tbl; # 删除表格 DROP TABLE IF EXISTS backup_tbl;","categories":[{"name":"数据库","slug":"数据库","permalink":"https://ysluckly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://ysluckly.github.io/tags/PostgreSQL/"}]},{"title":"PostgreSQL初体验","slug":"database/PostgreSQL初体验","date":"2016-10-12T11:49:40.000Z","updated":"2022-02-19T09:27:58.489Z","comments":true,"path":"2016/10/12/PostgreSQL-1/","link":"","permalink":"https://ysluckly.github.io/2016/10/12/PostgreSQL-1/","excerpt":"创建操作系统用户创建一个新的Linux用户：dbuser $sudo adduser dbuser #创建一个新的Linux用户：dbuser","text":"创建操作系统用户创建一个新的Linux用户：dbuser $sudo adduser dbuser #创建一个新的Linux用户：dbuser 登录PostgreSQL控制台切换到postgres用户 $sudo su - postgres #切换到postgres用户 系统用户postgres以同名数据库用户的身份，登录数据库 $psql #系统用户postgres以同名数据库用户的身份，登录数据库 成功登录到控制台后，显示 postgres=# 注意：后面分号不能省略 \\password postgres #给postgres用户设置密码 创建数据库用户dbuser CREATE USER dbuser WITH PASSWORD &#39;dbuser&#39;; #创建数据库用户dbuser 创建用户数据库，这里为exampledb，并指定所有者为dbuser。 CREATE DATABASE exampledb OWNER dbuser; #创建用户数据库，这里为exampledb，并指定所有者为dbuser。 将exampledb数据库的所有权限都赋予dbuser GRANT ALL PRIVILEGES ON DATABASE exampledb to dbuser; #将exampledb数据库的所有权限都赋予dbuser 推出控制台（也可以直接按ctrl+D） \\q #退出控制台","categories":[{"name":"数据库","slug":"数据库","permalink":"https://ysluckly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://ysluckly.github.io/tags/PostgreSQL/"}]},{"title":"PostgreSQL的介绍与安装","slug":"database/PostgreSQL的安装","date":"2016-10-12T07:44:16.000Z","updated":"2022-02-19T09:27:58.492Z","comments":true,"path":"2016/10/12/PostgreSQL-3/","link":"","permalink":"https://ysluckly.github.io/2016/10/12/PostgreSQL-3/","excerpt":"由于工作认识了PostgreSQL，在此系统学习一下这个数据库，本文除博主实践所得以外，大量译于 官方文档 PostgreSQL是什么 PostgreSQL 是一个基于 POSTGRES, Version 4.2 的对象关系数据库系统（ORDBMS），由加州大学伯克利分校计算机科学系开发。PostgreSQL 是一个开源的数据库，因为自由许可，任何人都可以免费的使用、修改、分发 PostgreSQL 数据库用于任何目的。","text":"由于工作认识了PostgreSQL，在此系统学习一下这个数据库，本文除博主实践所得以外，大量译于 官方文档 PostgreSQL是什么 PostgreSQL 是一个基于 POSTGRES, Version 4.2 的对象关系数据库系统（ORDBMS），由加州大学伯克利分校计算机科学系开发。PostgreSQL 是一个开源的数据库，因为自由许可，任何人都可以免费的使用、修改、分发 PostgreSQL 数据库用于任何目的。 它支持大部分的SQL标准并提供了许多流行的功能： 复杂查询（complex queries） 外键（foreign keys） 触发器（triggers） 可更新的视图（updatable views） 事务完整性（transactional integrity） 多版本并发控制（multiversion concurrency control） 用户也可以给PostgreSQL扩展很多东西，比如： 数据类型（data types） 函数（functions） 运算符（operators） 聚合函数（aggregate functions） 索引方法（index methods） 安装博主开发环境： 系统 ：深度Linux 15.3 桌面版 PostgreSQL ：9.4 通过apt-get安装$ apt-get install postgresql-9.4 仓库有许多不同的包（包括第三方插件），最常见、最重要的包（根据需要替换版本号）： postgresql-client-9.4 - 客户端库和二进制文件 postgresql-9.4 - 核心数据库服务器 postgresql-contrib-9.4 - 提供额外的模块 libpq-dev - C语言前端开发库和头文件 postgresql-server-dev-9.4 - C语言后端开发库和头文件 pgadmin3 - pgAdmin III 图形化管理工具","categories":[{"name":"数据库","slug":"数据库","permalink":"https://ysluckly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://ysluckly.github.io/tags/PostgreSQL/"}]},{"title":"FreeMarker语法详解","slug":"front-end/freemarker语法详解","date":"2016-10-05T03:58:50.000Z","updated":"2022-02-19T09:27:58.498Z","comments":true,"path":"2016/10/05/FreeMarker/","link":"","permalink":"https://ysluckly.github.io/2016/10/05/FreeMarker/","excerpt":"FreeMarker是一款 模板引擎 :即一种基于模板和要改变的数据，并用来生成输出文本（HTML网页、电子邮件、配置文件、源代码等）的通用工具。FreeMarker模板文件主要有4部分组成 文本，直接输出的部分 注释，即&lt;#–…–&gt;格式不会输出 插值（Interpolation）：即${..}或者#{..}格式的部分,将使用数据模型中的部分替代输出 FTL指令：FreeMarker指令，和HTML标记类似，名字前加#予以区分，不会输出。","text":"FreeMarker是一款 模板引擎 :即一种基于模板和要改变的数据，并用来生成输出文本（HTML网页、电子邮件、配置文件、源代码等）的通用工具。FreeMarker模板文件主要有4部分组成 文本，直接输出的部分 注释，即&lt;#–…–&gt;格式不会输出 插值（Interpolation）：即${..}或者#{..}格式的部分,将使用数据模型中的部分替代输出 FTL指令：FreeMarker指令，和HTML标记类似，名字前加#予以区分，不会输出。 一些规则FTL指令规则FreeMarker有三种FTL标签，这和HTML的标签是完全类似的 开始标签：&lt;#directivename parameters&gt; 结束标签：&lt;&#x2F;#directivename&gt; 空标签： &lt;#directivename parameters &#x2F;&gt; 实际上，使用标签时前面的#符号也可能变成@，如果该指令是一个用户指令而不是系统内建指令时，应将#符号改为@符号 插值规则FreeMarker的插值有如下两种类型 1、通用插值：${expr} 2、数字格式化插值：#{expr}或者#{expr;format}通用插值，有可以分为四种情况 a、插值结果为字符串值：直接输出表达式结果 b、插值结果为数字值：根据默认格式(#setting 指令设置)将表达式结果转换成文本输出。可以使用内建的字符串函数格式单个插值，例如 &lt;#setting number_format = &quot;currency&quot; /&gt; &lt;#assign str = 42 /&gt; $&#123;str&#125; $&#123;str?string&#125; $&#123;str?string.number&#125; $&#123;str?string.currency&#125; $&#123;str?string.percent&#125; $&#123;str?string.computer&#125; 日期处理 $&#123;openingTime?string.short&#125; $&#123;openingTime?string.medium&#125; $&#123;openingTime?string.long&#125; $&#123;openingTime?string.full&#125; $&#123;nextDiscountDay?string.short&#125; $&#123;nextDiscountDay?string.medium&#125; $&#123;nextDiscountDay?string.long&#125; $&#123;nextDiscountDay?string.full&#125; $&#123;lastUpdated?string.short&#125; $&#123;lastUpdated?string.medium&#125; $&#123;lastUpdated?string.long&#125; $&#123;lastUpdated?string.full&#125; $&#123;lastUpdated?string(&quot;yyyy-MM-dd HH:mm:ss zzzz&quot;)&#125; $&#123;lastUpdated?string(&quot;EEE, MMM d, &#39;&#39;yy&quot;)&#125; $&#123;lastUpdated?string(&quot;EEEE, MMMM dd, yyyy, hh:mm:ss a &#39;(&#39;zzz&#39;)&#39;&quot;)&#125; if,elseif,elseif&lt;#if condition&gt; …… &lt;#elseif condition2&gt; …… &lt;#else&gt; …… &lt;/#if&gt; switch,case&lt;#switch value&gt; &lt;#case refValue1&gt; ... &lt;#break&gt; &lt;#case refValue2&gt; ... &lt;#break&gt; ... &lt;#case refValueN&gt; ... &lt;#break&gt; &lt;#default&gt; ... &lt;/#switch&gt; &lt;#t&gt; 去掉左右空白和回车换行 &lt;#lt&gt;去掉左边空白和回车换行 &lt;#rt&gt;去掉右边空白和回车换行 &lt;#nt&gt;取消上面的效果 list&lt;#list sequence as item&gt; ... &lt;#if item = &quot;spring&quot;&gt; &lt;#break&gt; &lt;/#if&gt; ... &lt;/#list&gt; iterm_index:当前值得下标，从0开始item_has_next:判断list是否还有值 include&lt;#include filename [options]&gt; options 包含两个属性encoding&#x3D;”GBK”parse&#x3D;”true” 是否作为ftl语法解析，默认是true示例：&lt;#include “&#x2F;common&#x2F;copyright.ftl” encoding&#x3D;”GBK” parse&#x3D;”true”&gt; import&lt;#import path as hash&gt; 类似于java里的import,它导入文件，然后就可以在当前文件里使用被导入文件里的宏组件 compress&lt;#compress&gt; ... &lt;/#compress&gt; escape, noescape&lt;#escape identifier as expression&gt; ... &lt;#noescape&gt;...&lt;/#noescape&gt; ... &lt;/#escape&gt; 主要使用在相似的字符串变量输出，比如某一个模块的所有字符串输出都必须是html安全的，这个时候就可以使用该表达式示例： &lt;#escape x as x?html&gt; First name: $&#123;firstName&#125; &lt;#noescape&gt;Last name: $&#123;lastName&#125;&lt;/#noescape&gt; Maiden name: $&#123;maidenName&#125; &lt;/#escape&gt; 相同表达式 First name: $&#123;firstName?html&#125; Last name: $&#123;lastName &#125; Maiden name: $&#123;maidenName?html&#125; assign&lt;#assign name=value&gt; &lt;#-- 或则 --&gt; &lt;#assign name1=value1 name2=value2 ... nameN=valueN&gt; &lt;#-- 或则 --&gt; &lt;#assign same as above... in namespacehash&gt; &lt;#-- 或则 --&gt; &lt;#assign name&gt; capture this &lt;/#assign&gt; &lt;#-- 或则 --&gt; &lt;#assign name in namespacehash&gt; capture this &lt;/#assign&gt; 生成变量,并且给变量赋值 global&lt;#global name=value&gt; &lt;#--或则--&gt; &lt;#global name1=value1 name2=value2 ... nameN=valueN&gt; &lt;#--或则--&gt; &lt;#global name&gt; capture this &lt;/#global&gt; 全局赋值语法，利用这个语法给变量赋值，那么这个变量在所有的namespace [A1] 中是可见的, 如果这个变量被当前的assign 语法覆盖 如&lt;#global x&#x3D;2&gt; &lt;#assign x&#x3D;1&gt; 在当前页面里x&#x3D;2 将被隐藏，或者通过${.global.x} 来访问 setting&lt;#setting name=value&gt; 用来设置整个系统的一个环境localenumber_formatboolean_formatdate_format , time_format , datetime_formattime_zoneclassic_compatible macro, nested, return&lt;#macro name param1 param2 ... paramN&gt; ... &lt;#nested loopvar1, loopvar2, ..., loopvarN&gt; ... &lt;#return&gt; ... &lt;/#macro&gt; t, lt, rt&lt;#t&gt; 去掉左右空白和回车换行 &lt;#lt&gt;去掉左边空白和回车换行 &lt;#rt&gt;去掉右边空白和回车换行 &lt;#nt&gt;取消上面的效果","categories":[{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"java","slug":"java","permalink":"https://ysluckly.github.io/tags/java/"},{"name":"freemarker","slug":"freemarker","permalink":"https://ysluckly.github.io/tags/freemarker/"}]},{"title":"正则表达式详解","slug":"tools/regular-expression","date":"2016-10-04T01:41:40.000Z","updated":"2022-02-19T09:27:58.568Z","comments":true,"path":"2016/10/04/regular-expression/","link":"","permalink":"https://ysluckly.github.io/2016/10/04/regular-expression/","excerpt":"本文目标 本文旨在更加简洁清晰的展现正则表达式， 第一部分 是对正则表达式语法的简洁介绍， 第二部分 则是常用正则表达式的示例。","text":"本文目标 本文旨在更加简洁清晰的展现正则表达式， 第一部分 是对正则表达式语法的简洁介绍， 第二部分 则是常用正则表达式的示例。 简介及语法正则表达式是什么 在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。 正则表达式语言由两种基本字符类型组成：原义（正常）文本字符和元字符。元字符使正则表达式具有处理能力。 常用元字符 元字符 做什么用 . 匹配除换行符以外的任意字符 \\w 匹配字母或数字或下划线或汉字 \\s 匹配任意的空白符，包括空格，制表符（Tab），换行符，中文全角空格等） \\d 匹配数字 \\b 匹配单词的开始或结束 ^ 匹配字符串的开始 $ 匹配字符串的结束 字符转义 如果你想查找元字符本身的话，比如你查找 . ,或者 * ,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用 \\ 来取消这些字符的特殊意义。因此，你应该使用 \\. 和 \\* 。当然，要查找 \\ 本身，你也得用 \\\\ .例如： deerchao\\.net 匹配 deerchao.net，C:\\\\Windows 匹配 C:\\Windows 。 重复 你已经看过了前面的 * , + , &#123;2&#125; , &#123;5,12&#125; 这几个匹配重复的方式了。下面是正则表达式中所有的限定符(指定数量的代码，例如*,{5,12}等) 元字符 做什么用 * 重复零次或更多次 + 重复一次或更多次 ? 重复零次或一次 &#123;n&#125; 重复n次 &#123;n,&#125; 重复n次或更多次 &#123;n,m&#125; 重复n到m次 下面是一些重复的示例：Windows\\d+ 匹配Windows后面跟1个或更多数字^\\w+ 匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置) 字符类 要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？很简单，你只需要在方括号里列出它们就行了，像 [aeiou] 就匹配任何一个英文元音字母， [.?!] 匹配标点符号(.或?或!)。我们也可以轻松地指定一个字符范围，像 [0-9] 代表的含意与 \\d 就是完全一致的：一位数字；同理[a-z0-9A-Z_]也完全等同于 \\w （如果只考虑英文的话）。下面是一个更复杂的表达式： \\(?0\\d&#123;2&#125;[) -]?\\d&#123;8&#125; 。这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\\d{8})。 分支条件 正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。示例： 0\\d&#123;2&#125;-\\d&#123;8&#125;|0\\d&#123;3&#125;-\\d&#123;7&#125;这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。你可以试试用分枝条件把这个表达式扩展成也支持4位区号的。示例： \\d&#123;5&#125;-\\d&#123;4&#125;|\\d&#123;5&#125;这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个示例是因为它能说明一个问题：使用分枝条件时，要注意各个条件的顺序。如果你把它改成 \\d&#123;5&#125;|\\d&#123;5&#125;-\\d&#123;4&#125; 的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。 分组 重复单个字符，直接在字符后面加上限定符就行了。但如果想要重复多个字符，我们可以用小括号来指定 子表达式(也叫作分组)。(\\d&#123;1,3&#125;\\.)&#123;3&#125;\\d&#123;1,3&#125; 是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它： \\d&#123;1,3&#125; 匹配1到3位的数字， (\\d&#123;1,3&#125;\\.)&#123;3&#125; 匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字 (\\d&#123;1,3&#125;) 。不幸的是，它也将匹配 256.300.888.999 这种不可能存在的IP地址。我们只能使用冗长的分组，选择，字符串来描述一个 正确的IP地址： ((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[01]?\\d\\d?) 反义 有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义： 元字符 做什么用 \\W 匹配任意不是字母，数字，下划线，汉字的字符 \\S 匹配任意不是空白符的字符 \\D 匹配任意非数字的字符 \\B 匹配不是单词开头或结束的位置 [^x] 匹配除了x以外的任意字符 [^aeiou] 匹配除了aeiou这几个字母以外的任意字符 示例： \\S+ 匹配不包含空白符的字符串。 &lt;a[^&gt;]+&gt; 匹配用尖括号括起来的以a开头的字符串。 后向引用 使用小括号指定一个子表达式后，匹配这个子表达式 的文本(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个 组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。 后向引用 用于重复搜索前面某个分组匹配的文本。示例： \\b(\\w+)\\b\\s+\\1\\b 可以用来匹配重复的单词，像go go, 或者kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字 \\b(\\w+)\\b ，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符\\s+，最后是分组1中捕获的内容（也就是前面匹配的那个单词） \\1 。你也可以自己指定子表达式的 组名.要指定一个子表达式的组名，请使用这样的语法： (?&lt;Word&gt;\\w+) (或者把尖括号换成 &#39; 也行： (?&#39;Word&#39;\\w+)),这样就把\\w+的组名指定为 Word 了。要反向引用这个分组捕获的内容，你可以使用 \\k&lt;Word&gt; ,所以上一个示例也可以写成这样： \\b(?&lt;Word&gt;\\w+)\\b\\s+\\k&lt;Word&gt;\\b 。 零宽断言 接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为 零宽断言。(?=exp) 也叫 零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。比如\\b\\w+(?=ing\\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找 I’m singing while you’re dancing. 时，它会匹配 sing 和 danc 。(?&lt;=exp) 也叫 零宽度正回顾后发断言 ，它断言自身出现的位置的前面能匹配表达式exp。比如 (?&lt;=\\bre)\\w+\\b 会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找 reading a book 时，它匹配ading。假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分： ((?&lt;=\\d)\\d&#123;3&#125;)+\\b ，用它对1234567890进行查找时结果是234567890。下面这个示例同时使用了这两种断言： (?&lt;=\\s)\\d+(?=\\s) 匹配以空白符间隔的数字( 再次强调，不包括这些空白符 )。 负向零宽断言 前面我们提到过怎么查找不是某个字符或不在某个字符类里的字符的方法(反义)。但是如果我们只是想要确保某个字符没有出现，但并不想去匹配它时怎么办？例如，如果我们想查找这样的单词–它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：\\b\\w*q[^u]\\w*\\b 匹配 包含后面不是字母u的字母q的单词 。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像Iraq,Benq，这个表达式就会出错。这是因为[^u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[^u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的 \\w*\\b 将会匹配下一个单词，于是 \\b\\w*q[^u]\\w*\\b 就能匹配整个Iraq fighting。负向零宽断言 能解决这样的问题，因为它只匹配一个位置，并不消费任何字符。现在，我们可以这样来解决这个问题： \\b\\w*q(?!u)\\w*\\b 。零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。例如： \\d&#123;3&#125;(?!\\d) 匹配三位数字，而且这三位数字的后面不能是数字； \\b((?!abc)\\w)+\\b 匹配不包含连续字符串abc的单词。同理，我们可以用(?&lt;!exp),*零宽度负回顾后发断言来断言** 此位置的前面不能匹配表达式exp：(?&lt;![a-z])\\d{7}匹配前面不是小写字母的七位数字。一个更复杂的示例：&#96;(?&lt;&#x3D;&lt;(\\w+)&gt;).(?&#x3D;&lt;/\\1&gt;) 匹配不包含属性的简单HTML标签内里的内容。(?&lt;&#x3D;&lt;(\\w+)&gt;)指定了这样的 **前缀**：被尖括号括起来的单词(比如可能是&lt;b&gt;)，然后是.*(任意的字符串),最后是一个 **后缀**(?&#x3D;&lt;/\\1&gt;)。注意后缀里的 \\/ ，它用到了前面提过的字符转义；\\1则是一个反向引用，引用的正是捕获的第一组，前面的 (\\w+)&#96; 匹配的内容，这样如果前缀实际上是的话，后缀就是了。整个表达式匹配的是和之间的内容(再次提醒，不包括前缀和后缀本身)。 注释 小括号的另一种用途是通过语法(?#comment)来包含注释。例如：2[0-4]\\d(?#200-249)|25[0-5](?#250-255)|[01]?\\d\\d?(?#0-199)。要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。例如，我们可以前面的一个表达式写成这样： (?&lt;= # 断言要匹配的文本的前缀 &lt;(\\w+)&gt; # 查找尖括号括起来的字母或数字(即HTML&#x2F;XML标签) ) # 前缀结束 .* # 匹配任意文本 (?= # 断言要匹配的文本的后缀 &lt;\\/\\1&gt; # 查找尖括号括起来的内容：前面是一个”&#x2F;“，后面是先前捕获的标签 ) # 后缀结束 贪婪与懒惰 当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配 尽可能多 的字符。以这个表达式为例： a.*b ，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为 贪婪匹配。有时，我们更需要 懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号 ? 。这样 .*? 就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。示例： a.*?b 匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。 语法 做什么用 *? 重复任意次，但尽可能少重复 +? 重复1次或更多次，但尽可能少重复 ?? 重复0次或1次，但尽可能少重复 &#123;n,m&#125;? 重复n到m次，但尽可能少重复 &#123;n,&#125;? 重复n次以上，但尽可能少重复 其他元字符 元字符 做什么用 \\a 报警字符(打印它的效果是电脑嘀一声) \\b 通常是单词分界位置，但如果在字符类里使用代表退格 \\t 制表符，Tab \\r 回车 \\v 竖向制表符 \\f 换页符 \\n 换行符 \\e Escape \\0nn ASCII代码中八进制代码为nn的字符 \\xnn ASCII代码中十六进制代码为nn的字符 \\unnnn Unicode代码中十六进制代码为nnnn的字符 \\cN ASCII控制字符。比如\\cC代表Ctrl+C \\A 字符串开头(类似^，但不受处理多行选项的影响) \\Z 字符串结尾或行尾(不受处理多行选项的影响) \\z 字符串结尾(类似$，但不受处理多行选项的影响) \\G 当前搜索的开头 \\p&#123;name&#125; Unicode中命名为name的字符类，例如\\p{IsGreek} (?&gt;exp) 贪婪子表达式 (?&lt;x&gt;-&lt;y&gt;exp) 平衡组 (?im-nsx:exp) 在子表达式exp中改变处理选项 (?im-nsx) 为表达式后面的部分改变处理选项 [1] 把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no (?(exp)yes) 同上，只是使用空表达式作为no [2] 如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no (?(name)yes) 同上，只是使用空表达式作为no 正则表达式常用实例账号&#x2F;密码帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线) = &quot;^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$&quot; 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线) = &quot;^[a-zA-Z]\\w&#123;5,17&#125;$&quot; 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间) = &quot;^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$&quot; 字符串校验汉字 = &quot;^[\\u4e00-\\u9fa5]&#123;0,&#125;$&quot;; 英文和数字 = &quot;^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$&quot;; 长度为3-20的所有字符 = &quot;^.&#123;3,20&#125;$&quot;； 由26个英文字母组成的字符串 = &quot;^[A-Za-z]+$&quot;； 由26个大写英文字母组成的字符串 = &quot;^[A-Z]+$&quot;； 由26个小写英文字母组成的字符串 = &quot;^[a-z]+$&quot;； 由数字和26个英文字母组成的字符串 = &quot;^[A-Za-z0-9]+$&quot;； 由数字、26个英文字母或者下划线组成的字符串 = &quot;^\\w+$ 或 ^\\w&#123;3,20&#125;$&quot;； 中文、英文、数字包括下划线 = &quot;^[\\u4E00-\\u9FA5A-Za-z0-9_]+$&quot;； 中文、英文、数字但不包括下划线等符号 = &quot;^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]&#123;2,20&#125;$&quot;； 禁止输入含有~的字符 = &quot;[^~\\x22]+&quot;； 手机号/** * 手机号码 * 移动：134,135,136,137,138,139,147,150,151,152,157,158,159,170,178,182,183,184,187,188 * 联通：130,131,132,145,152,155,156,1709,171,176,185,186 * 电信：133,134,153,1700,177,180,181,189 */ String MOBILE = &quot;^1(3[0-9]|4[57]|5[0-35-9]|7[01678]|8[0-9])\\\\d&#123;8&#125;$&quot;; /** * 中国移动：China Mobile * 134,135,136,137,138,139,147,150,151,152,157,158,159,170,178,182,183,184,187,188 */ String CM = &quot;^1(3[4-9]|4[7]|5[0-27-9]|7[0]|7[8]|8[2-478])\\\\d&#123;8&#125;$&quot;; /** * 中国联通：China Unicom * 130,131,132,145,152,155,156,1709,171,176,185,186 */ String CU = &quot;^1(3[0-2]|4[5]|5[56]|709|7[1]|7[6]|8[56])\\\\d&#123;8&#125;$&quot;; /** * 中国电信：China Telecom * 133,134,153,1700,177,180,181,189 */ String CT = &quot;^1(3[34]|53|77|700|8[019])\\\\d&#123;8&#125;$&quot;; IP地址String IPREGEXP = &quot;((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)&quot;; EMAIL地址Email地址 = &quot;^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$&quot;; 域名域名 = &quot;[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?&quot;; InternetURL = &quot;[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$&quot; 身份证身份证号(15位、18位数字) = &quot;^\\d&#123;15&#125;|\\d&#123;18&#125;$&quot; 短身份证号码(数字、字母x结尾) = &quot;^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$&quot; 数字类校验数字 = &quot;^[0-9]*$&quot;; n位的数字 = &quot;^\\d&#123;n&#125;$&quot;; 至少n位的数字 = &quot;^\\d&#123;n,&#125;$&quot;; m-n位的数字 = &quot;^\\d&#123;m,n&#125;$&quot;; 零和非零开头的数字 = &quot;^(0|[1-9][0-9]*)$&quot;; 非零开头的最多带两位小数的数字 = &quot;^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$&quot;; 带1-2位小数的正数或负数 = &quot;^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$&quot;; 正数、负数、和小数 = &quot;^(\\-|\\+)?\\d+(\\.\\d+)?$&quot;; 有两位小数的正实数 = &quot;^[0-9]+(.[0-9]&#123;2&#125;)?$&quot;; 有1~3位小数的正实数 = &quot;^[0-9]+(.[0-9]&#123;1,3&#125;)?$&quot;; 非零的正整数 = &quot;^[1-9]\\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\\+?[1-9][0-9]*$&quot;; 非零的负整数 = &quot;^\\-[1-9][]0-9&quot;*$&quot; 或 &quot;^-[1-9]\\d*$&quot;;","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"软件记录","slug":"工具/软件记录","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/%E8%BD%AF%E4%BB%B6%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"regex","slug":"regex","permalink":"https://ysluckly.github.io/tags/regex/"}]},{"title":"Git常用命令","slug":"tools/git-command","date":"2016-10-02T09:15:39.000Z","updated":"2022-02-19T09:27:58.554Z","comments":true,"path":"2016/10/02/git-command/","link":"","permalink":"https://ysluckly.github.io/2016/10/02/git-command/","excerpt":"经常用到Git，但是很多命令记不住，将其整理于此。（大量摘自网络） 一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要要记住60~100个命令。","text":"经常用到Git，但是很多命令记不住，将其整理于此。（大量摘自网络） 一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要要记住60~100个命令。 下面整理的 Git 命令清单。几个专业名词的译名如下。 Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（本地仓库） Remote：远程仓库 新建版本仓库# 在当前目录新建一个Git代码库 $ git init # 新建一个目录，将其初始化为Git代码库 $ git init [project-name] # 下载一个项目和它的整个代码历史, -o 给远程仓库起名:faker,默认origin $ git clone [-o faker] [url] 配置Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。 # 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e [--global] # 设置提交代码时的用户信息 $ git config [--global] user.name &quot;[name]&quot; $ git config [--global] user.email &quot;[email address]&quot; # 设置大小写敏感（windows不区分大小写的解决办法） $ git config core.ignorecase false 增加&#x2F;删除文件# 添加指定文件到暂存区 $ git add [file1] [file2] ... # 添加指定目录到暂存区，包括子目录 $ git add [dir] # 添加当前目录的所有文件到暂存区 $ git add . # 添加每个变化前，都会要求确认 # 对于同一个文件的多处变化，可以实现分次提交 $ git add -p # 删除工作区文件，并且将这次删除放入暂存区 $ git rm [file1] [file2] ... # 停止追踪指定文件，但该文件会保留在工作区 $ git rm --cached [file] # 改名文件，并且将这个改名放入暂存区 $ git mv [file-original] [file-renamed] 代码提交# 提交暂存区到仓库区 $ git commit -m [message] # 提交暂存区的指定文件到仓库区 $ git commit [file1] [file2] ... -m [message] # 提交工作区自上次commit之后的变化，直接到仓库区 $ git commit -a # 提交时显示所有diff信息 $ git commit -v # 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息 $ git commit --amend -m [message] # 重做上一次commit，并包括指定文件的新变化 $ git commit --amend [file1] [file2] ... 分支# 列出所有本地分支 $ git branch # 列出所有远程分支 $ git branch -r # 列出所有本地分支和远程分支 $ git branch -a # 列出所有本地分支，并展示没有分支最后一次提交的信息 $ git branch -v # 列出所有本地分支，并展示没有分支最后一次提交的信息和远程分支的追踪情况 $ git branch -vv # 列出所有已经合并到当前分支的分支 $ git branch --merged # 列出所有还没有合并到当前分支的分支 $ git branch --no-merged # 新建一个分支，但依然停留在当前分支 $ git branch [branch-name] # 新建一个分支，并切换到该分支 $ git checkout -b [branch] # 新建一个与远程分支同名的分支，并切换到该分支 $ git checkout --track [branch-name] # 新建一个分支，指向指定commit $ git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系 $ git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区 $ git checkout [branch-name] # 切换到上一个分支 $ git checkout - # 建立追踪关系，在现有分支与指定的远程分支之间 $ git branch --set-upstream-to=[remote-branch] $ git branch --set-upstream [branch] [remote-branch] # 已被弃用 # 合并指定分支到当前分支 $ git merge [branch] # 中断此次合并（你可能不想处理冲突） $ git merge --abort # 选择一个commit，合并进当前分支 $ git cherry-pick [commit] # 删除分支 $ git branch -d [branch-name] #新增远程分支 远程分支需先在本地创建,再进行推送 $ git push origin [branch-name] # 删除远程分支 $ git push origin --delete [branch-name] $ git branch -dr [remote/branch] 标签# 列出所有tag $ git tag # 新建一个tag在当前commit $ git tag [tag] # 新建一个tag在指定commit $ git tag [tag] [commit] # 删除本地tag $ git tag -d [tag] # 删除远程tag $ git push origin :refs/tags/[tagName] # 查看tag信息 $ git show [tag] # 提交指定tag $ git push [remote] [tag] # 提交所有tag $ git push [remote] --tags # 新建一个分支，指向某个tag $ git checkout -b [branch] [tag] 查看信息&#x2F;搜索# 显示有变更的文件 $ git status [-sb] #s:short,给一个短格式的展示，b:展示当前分支 # 显示当前分支的版本历史 $ git log # 显示commit历史，以及每次commit发生变更的文件 $ git log --stat # 搜索提交历史，根据关键词 $ git log -S [keyword] # 显示某个commit之后的所有变动，每个commit占据一行 $ git log [tag] HEAD --pretty=format:%s # 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件 $ git log [tag] HEAD --grep feature # 显示某个文件的版本历史，包括文件改名 $ git log --follow [file] $ git whatchanged [file] # 显示指定文件相关的每一次diff $ git log -p [file] # 显示过去5次提交 $ git log -5 --pretty --oneline # 图形化显示所有分支 $ git log --oneline --graph --all # 显示在分支2而不在分支1中的提交 $ git log [分支1]..[分支2] $ git log ^[分支1] [分支2] $ git log [分支2] --not [分支1] # 显示两个分支不同时包含的提交 $ git log [分支1]...[分支2] # 显示所有提交过的用户，按提交次数排序 $ git shortlog -sn # 显示指定文件是什么人在什么时间修改过 $ git blame [file] # 显示暂存区和工作区的差异 $ git diff # 显示暂存区和上一个commit的差异 $ git diff --cached [file] # 显示工作区与当前分支最新commit之间的差异 $ git diff HEAD # 显示两次提交之间的差异 $ git diff [first-branch]...[second-branch] # 显示今天你写了多少行代码 $ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot; # 显示某次提交的元数据和内容变化 $ git show [commit] # 显示某次提交发生变化的文件 $ git show --name-only [commit] # 显示某次提交时，某个文件的内容 $ git show [commit]:[filename] # 显示当前分支的最近几次提交 $ git reflog # 搜索你工作目录的文件，输出匹配行号 $ git grep -n [关键字] # 搜索你工作目录的文件，输出每个文件包含多少个匹配 $ git grep --count [关键字] # 优化阅读 $ git grep --break --heading [关键字] # 查询iCheck这个字符串那次提交的 $ git log -SiCheck --oneline # 查询git_deflate_bound函数每一次的变更 $ git log -L :git_deflate_bound:zlib.c 远程同步# 下载远程仓库的所有变动 [shortname] 为远程仓库的shortname, 如origin,为空时:默认origin $ git fetch [shortname] # 显示所有远程仓库 $ git remote -v #显式地获得远程引用的完整列表 [shortname] 为远程仓库的shortname, 如origin,为空时:默认origin $ git ls-remote [shortname] # 显示某个远程仓库的信息 [remote] 为远程仓库的shortname, 如origin $ git remote show [shortname] # 增加一个新的远程仓库，并命名 $ git remote add [shortname] [url] # 重命名一个远程仓库（shortname） $ git remote rename [旧仓库名] [新仓库名] # 删除一个远程链接 $ git remote rm [shortname] [url] $ git remote remove [shortname] [url] # 修改远程仓库地址 $ git remote set-url [shortname] [url] # 取回远程仓库的变化，并与本地分支合并 $ git pull [remote] [branch] # 上传本地当前分支到远程仓库 git push [remote] # 上传本地指定分支到远程仓库 $ git push [remote] [branch] # 推送所有分支到远程仓库 $ git push [remote] --all # 强行推送当前分支到远程仓库，即使有冲突 $ git push [remote] --force 撤销# 恢复暂存区的指定文件到工作区 $ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区 $ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区 $ git checkout . #只会保留源码（工作区），回退commit(本地仓库)与index（暂存区）到某个版本 $ git reset &lt;commit_id&gt; #默认为 --mixed模式 $ git reset --mixed &lt;commit_id&gt; #保留源码（工作区）和index（暂存区），只回退commit（本地仓库）到某个版本 $ git reset --soft &lt;commit_id&gt; #源码（工作区）、commit（本地仓库）与index（暂存区）都回退到某个版本 $ git reset --hard &lt;commit_id&gt; # 恢复到最后一次提交的状态 $ git reset --hard HEAD # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支 $ git revert [commit] # 将工作区和暂存区的代码全都存储起来了 $ git stash [save] # 只保存工作区，不存储暂存区 $ git stash --keep-index # 存储工作区、暂存区和未跟踪文件 $ git stash -u $ git stash --include-untracked # 不存储所有改动的东西，但会交互式的提示那些改动想要被储藏、哪些改动需要保存在工作目录中 $ git stash --patch # 不指定名字，Git认为指定最近的储藏，将存储的代码（工作区和暂存区）都应用到工作区 $ git stash apply [stash@&#123;2&#125;] # 存储的工作区和暂存区的代码应用到工作区和暂存区 $ git stash apply [stash@&#123;2&#125;] --index # 将存储的代码（工作区和暂存区）都应用到工作区，并从栈上扔掉他 $ git stash pop # 删除stash@&#123;2&#125;的存储 $ git stash drop [stash@&#123;2&#125;] # 获取储藏的列表 $ git stash list # 移除工作目录中所有未跟踪的文件及口口那个的子目录，不会移除.gitiignore忽略的文件 $ git clean -f -d 其他# 生成一个可供发布的压缩包 $ git archive","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"工具/git","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://ysluckly.github.io/tags/Git/"}]},{"title":"一个客户端设置多个github账号","slug":"tools/computer-mutiple-github-account","date":"2016-09-30T08:42:48.000Z","updated":"2022-02-19T09:27:58.550Z","comments":true,"path":"2016/09/30/computer-mutiple-github-account/","link":"","permalink":"https://ysluckly.github.io/2016/09/30/computer-mutiple-github-account/","excerpt":"最近想要使用自己的GitHub搭建Hexo博客，同时还要使用工作的GitHub开发项目，所以在网上找寻了一些文章，在此将自己的搭建过程记录一下。","text":"最近想要使用自己的GitHub搭建Hexo博客，同时还要使用工作的GitHub开发项目，所以在网上找寻了一些文章，在此将自己的搭建过程记录一下。 前期工作两个GitHub账号（假设两个账号为one,two）取消Git全局设置 $ git config --global --unset user.name $ git config --global --unset user.email SSH配置生成id_rsa私钥，id_rsa.pub公钥。one可以直接回车，默认生成 id_rsa 和 id_rsa.pub 。 $ ssh-keygen -t rsa -C &quot;one@xx.com&quot; 添加two会出现提示输入文件名，输入与默认配置不一样的文件名，如：id_rsa_two。 $ cd ~/.ssh $ ssh-keygen -t rsa -C &quot;two@126.com&quot; # 之后会提示输入文件名 GitHub添加公钥 id_rsa.pub 、 id_rsa_two.pub，分别登陆one,two的账号，在 Account Settings 的 SSH Keys 里，点 Add SSH Keys ，将公钥(.pub文件)中的内容粘贴到 Key 中，并输入 Title。添加 ssh Key $ ssh-add ~/.ssh/id_rsa $ ssh-add ~/.ssh/id_rsa_two 可以在添加前使用下面命令删除所有的 key $ ssh-add -D 最后可以通过下面命令，查看 key 的设置 $ ssh-add -l 修改ssh config文件$ cd ~/.ssh/ $ touch config 打开 .ssh 文件夹下的 config 文件，进行配置 # default Host github.com HostName github.com User git IdentityFile ~/.ssh/id_rsa # two Host two.github.com # 前缀名可以任意设置 HostName github.com User git IdentityFile ~/.ssh/id_rsa_two 这里必须采用这样的方式设置，否则 push 时会出现以下错误: ERROR: Permission to two&#x2F;two.github.com.git denied to one. 简单分析下原因，我们可以发现 ssh 客户端是通过类似: git@github.com:one/one.github.com.git 这样的 Git 地址中的 User 和 Host 来识别使用哪个本地私钥的。很明显，如果 User 和 Host 始终为 git 和 github.com，那么就只能使用一个私钥。所以需要上面的方式配置，每个账号使用了自己的 Host，每个 Host 的域名做 CNAME 解析到 github.com，这样 ssh 在连接时就可以区别不同的账号了。 $ ssh -T git@github.com # 测试one ssh连接 # Hi ***! You&#39;ve successfully authenticated, but GitHub does not provide shell access. $ ssh -T git@two.github.com # 测试two ssh连接 # Hi ***! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 但是这样还没有完，下面还有关联的设置。 在Git项目中配置账号关联可以用 git init 或者 git clone 创建本地项目分别在one和two的git项目目录下，使用下面的命令设置名字和邮箱 $ git config user.name &quot;__name__&quot; # __name__ 例如 one $ git config user.email &quot;__email__&quot; # __email__ 例如 one@126.com 注意：由于我不知道Hexo怎样配置 局部的config，所以，我将two的config使用全局，而工作目录配置局部。 $ git config --global user.name &quot;__name__&quot; # __name__ 例如 two $ git config --global user.email &quot;__email__&quot; # __email__ 例如 two@126.com 查看git项目的配置 $ git config --list 查看 one 的 remote.origin.url&#x3D;&#103;&#x69;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#x6d;:one&#x2F;one.github.com.git查看 two 的 remote.origin.url&#x3D;&#x67;&#x69;&#116;&#64;&#103;&#105;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#109;:two&#x2F;two.github.com.git由于 one 使用的是默认的 Host ，所以不需要修改，但是 two 使用的是 two.github.com ，则需要进行修改 $ git remote rm origin $ git remote add origin git@two.github.com:two/two.github.com.git 我在Hexo中的配置（使用two账号） deploy: type: git repo: git@two.github.com:two/two.github.io.git branch: master 上传更改上面所有的设置无误后，可以修改代码，然后上传了。 $ git add -A $ git commit -m &quot;your comments&quot; $ git push 如果遇到warning warning: push.default is unset; its implicit value is changing in Git 2.0 from ‘matching’ to ‘simple’. To squelch this messageand maintain the current behavior after the default changes, use… 推荐使用 $ git config --global push.default simple","categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"git","slug":"工具/git","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/git/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://ysluckly.github.io/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"https://ysluckly.github.io/tags/GitHub/"}]}],"categories":[{"name":"工具","slug":"工具","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"后端","slug":"后端","permalink":"https://ysluckly.github.io/categories/%E5%90%8E%E7%AB%AF/"},{"name":"hexo","slug":"工具/hexo","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/hexo/"},{"name":"大前端","slug":"大前端","permalink":"https://ysluckly.github.io/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"},{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/categories/%E8%BF%90%E7%BB%B4/"},{"name":"读书","slug":"读书","permalink":"https://ysluckly.github.io/categories/%E8%AF%BB%E4%B9%A6/"},{"name":"阅读笔记","slug":"读书/阅读笔记","permalink":"https://ysluckly.github.io/categories/%E8%AF%BB%E4%B9%A6/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"},{"name":"软件记录","slug":"工具/软件记录","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/%E8%BD%AF%E4%BB%B6%E8%AE%B0%E5%BD%95/"},{"name":"数据库","slug":"数据库","permalink":"https://ysluckly.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"git","slug":"工具/git","permalink":"https://ysluckly.github.io/categories/%E5%B7%A5%E5%85%B7/git/"},{"name":"书单","slug":"读书/书单","permalink":"https://ysluckly.github.io/categories/%E8%AF%BB%E4%B9%A6/%E4%B9%A6%E5%8D%95/"}],"tags":[{"name":"game","slug":"game","permalink":"https://ysluckly.github.io/tags/game/"},{"name":"java","slug":"java","permalink":"https://ysluckly.github.io/tags/java/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"https://ysluckly.github.io/tags/SpringCloud/"},{"name":"SkyWalking","slug":"SkyWalking","permalink":"https://ysluckly.github.io/tags/SkyWalking/"},{"name":"hexo","slug":"hexo","permalink":"https://ysluckly.github.io/tags/hexo/"},{"name":"3-hexo","slug":"3-hexo","permalink":"https://ysluckly.github.io/tags/3-hexo/"},{"name":"javascript","slug":"javascript","permalink":"https://ysluckly.github.io/tags/javascript/"},{"name":"docker","slug":"docker","permalink":"https://ysluckly.github.io/tags/docker/"},{"name":"linux","slug":"linux","permalink":"https://ysluckly.github.io/tags/linux/"},{"name":"reading","slug":"reading","permalink":"https://ysluckly.github.io/tags/reading/"},{"name":"活着","slug":"活着","permalink":"https://ysluckly.github.io/tags/%E6%B4%BB%E7%9D%80/"},{"name":"shell","slug":"shell","permalink":"https://ysluckly.github.io/tags/shell/"},{"name":"nginx","slug":"nginx","permalink":"https://ysluckly.github.io/tags/nginx/"},{"name":"mac","slug":"mac","permalink":"https://ysluckly.github.io/tags/mac/"},{"name":"efficiency","slug":"efficiency","permalink":"https://ysluckly.github.io/tags/efficiency/"},{"name":"PostgreSQL","slug":"PostgreSQL","permalink":"https://ysluckly.github.io/tags/PostgreSQL/"},{"name":"vim","slug":"vim","permalink":"https://ysluckly.github.io/tags/vim/"},{"name":"keybord","slug":"keybord","permalink":"https://ysluckly.github.io/tags/keybord/"},{"name":"emacs","slug":"emacs","permalink":"https://ysluckly.github.io/tags/emacs/"},{"name":"encoding","slug":"encoding","permalink":"https://ysluckly.github.io/tags/encoding/"},{"name":"dubbo","slug":"dubbo","permalink":"https://ysluckly.github.io/tags/dubbo/"},{"name":"zookeeper","slug":"zookeeper","permalink":"https://ysluckly.github.io/tags/zookeeper/"},{"name":"fragment_cache","slug":"fragment-cache","permalink":"https://ysluckly.github.io/tags/fragment-cache/"},{"name":"浏览器","slug":"浏览器","permalink":"https://ysluckly.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"},{"name":"js","slug":"js","permalink":"https://ysluckly.github.io/tags/js/"},{"name":"firewall","slug":"firewall","permalink":"https://ysluckly.github.io/tags/firewall/"},{"name":"maven","slug":"maven","permalink":"https://ysluckly.github.io/tags/maven/"},{"name":"nexus","slug":"nexus","permalink":"https://ysluckly.github.io/tags/nexus/"},{"name":"mybatis","slug":"mybatis","permalink":"https://ysluckly.github.io/tags/mybatis/"},{"name":"mathjax","slug":"mathjax","permalink":"https://ysluckly.github.io/tags/mathjax/"},{"name":"pjax","slug":"pjax","permalink":"https://ysluckly.github.io/tags/pjax/"},{"name":"samba","slug":"samba","permalink":"https://ysluckly.github.io/tags/samba/"},{"name":"tale","slug":"tale","permalink":"https://ysluckly.github.io/tags/tale/"},{"name":"docker仓库","slug":"docker仓库","permalink":"https://ysluckly.github.io/tags/docker%E4%BB%93%E5%BA%93/"},{"name":"运维","slug":"运维","permalink":"https://ysluckly.github.io/tags/%E8%BF%90%E7%BB%B4/"},{"name":"centos","slug":"centos","permalink":"https://ysluckly.github.io/tags/centos/"},{"name":"磁盘分区","slug":"磁盘分区","permalink":"https://ysluckly.github.io/tags/%E7%A3%81%E7%9B%98%E5%88%86%E5%8C%BA/"},{"name":"git","slug":"git","permalink":"https://ysluckly.github.io/tags/git/"},{"name":"linux命令","slug":"linux命令","permalink":"https://ysluckly.github.io/tags/linux%E5%91%BD%E4%BB%A4/"},{"name":"encryption","slug":"encryption","permalink":"https://ysluckly.github.io/tags/encryption/"},{"name":"jsp","slug":"jsp","permalink":"https://ysluckly.github.io/tags/jsp/"},{"name":"jstl","slug":"jstl","permalink":"https://ysluckly.github.io/tags/jstl/"},{"name":"spring","slug":"spring","permalink":"https://ysluckly.github.io/tags/spring/"},{"name":"springmvc","slug":"springmvc","permalink":"https://ysluckly.github.io/tags/springmvc/"},{"name":"postgres","slug":"postgres","permalink":"https://ysluckly.github.io/tags/postgres/"},{"name":"sql","slug":"sql","permalink":"https://ysluckly.github.io/tags/sql/"},{"name":"deepin","slug":"deepin","permalink":"https://ysluckly.github.io/tags/deepin/"},{"name":"node","slug":"node","permalink":"https://ysluckly.github.io/tags/node/"},{"name":"jQuery","slug":"jQuery","permalink":"https://ysluckly.github.io/tags/jQuery/"},{"name":"translation","slug":"translation","permalink":"https://ysluckly.github.io/tags/translation/"},{"name":"ftp","slug":"ftp","permalink":"https://ysluckly.github.io/tags/ftp/"},{"name":"AngularJs","slug":"AngularJs","permalink":"https://ysluckly.github.io/tags/AngularJs/"},{"name":"Git","slug":"Git","permalink":"https://ysluckly.github.io/tags/Git/"},{"name":"IntellijIDEA","slug":"IntellijIDEA","permalink":"https://ysluckly.github.io/tags/IntellijIDEA/"},{"name":"javaee","slug":"javaee","permalink":"https://ysluckly.github.io/tags/javaee/"},{"name":"GitHub","slug":"GitHub","permalink":"https://ysluckly.github.io/tags/GitHub/"},{"name":"freemarker","slug":"freemarker","permalink":"https://ysluckly.github.io/tags/freemarker/"},{"name":"regex","slug":"regex","permalink":"https://ysluckly.github.io/tags/regex/"}]}